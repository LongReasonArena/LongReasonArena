{"problem": "Given a string s, find the length of the longest substring without repeating characters.", "tags": ["Hash Table", "String", "Sliding Window"], "input": {"s": " THfA2v@d@'O60,AxJtclke[u'65!Ge~2pTYS!V8P3K?!V){\"$EbG_pZg}Mr:% TD2"}, "output": 27, "input_len": 55, "line": 387}
{"problem": "Given a string s, return the longest palindromic substring in s.", "tags": ["Two Pointers", "String", "DP"], "input": {"s": "9dujP7H9vsNzPdZLwKxhbT3YSZJ7Qi25GtyQN2N"}, "output": "N2N", "input_len": 38, "line": 2367}
{"problem": "Given an integer array nums of length n and an integer target, find three integers in nums such that the sum is closest to target.\nReturn the sum of the three integers.\nYou may assume that each input would have exactly one solution.", "tags": ["Array", "Two Pointers", "Sorting"], "input": {"nums": [-957, -574, -183, -15, -504, -73, 545, 634, 271, -623, -501, -783, -277, -456, -340, -8, 683, -494, 52, -866, 911, 230, -390, -978, 389, 352, 377, 82, 805, -307, -362, 901, -285, -939, 214, -364, 842, -800, -893, -500, 610, 543, -555, 975, -861, 972, 680, 676, 213, -577, 82, 330, -116, -712, -327, 480, -98, -53, 195, 505, -736, 812, 437, -496, -983, 510, -175, 694, -624, 996, 595, 537, -323, 444, 897, 830, -181, 46, 279, 843, -548, -402, -583, -167, -101, -10, 804, 794, 136, 898], "target": 1287}, "output": 1287, "input_len": 452, "line": 6992}
{"problem": "Given two strings word1 and word2, return the minimum number of operations required to convert word1 to word2.\nYou have the following three operations permitted on a word:\n\tInsert a character\n\tDelete a character\n\tReplace a character", "tags": ["String", "DP"], "input": {"word1": "wfqirlsoumhpypfnz", "word2": "czvuuowhfjmwucktsqacqpuikysreuhksilgmactlcq"}, "output": 37, "input_len": 46, "line": 2356}
{"problem": "Given two strings word1 and word2, return the minimum number of operations required to convert word1 to word2.\nYou have the following three operations permitted on a word:\n\tInsert a character\n\tDelete a character\n\tReplace a character", "tags": ["String", "DP"], "input": {"word1": "vreeugqecoqhedalqkvywruwgnzrvfhwpydssfyyjjvtzdqtoowppswfwcuixqaebwqeussibtwmuppqfcggwnysbocln", "word2": "exepoaz"}, "output": 88, "input_len": 68, "line": 2348}
{"problem": "Given two strings s and t of lengths m and n respectively, return the minimum window substring of s such that every character in t (including duplicates) is included in the window. If there is no such substring, return the empty string \"\".\nThe testcases will be generated such that the answer is unique.", "tags": ["Hash Table", "String", "Sliding Window"], "input": {"s": "wBeGwdNxujJQEXrMhTUPxoYnJuluHhYIAHNoGtWMpobaaVNHYGRjJXndSnzfDpaPUZEpMFIGDWQPhUFbeamkXDIIRYauPfHPmyqPLXQYJdmKNof", "t": "XN"}, "output": "NxujJQEX", "input_len": 84, "line": 1238}
{"problem": "Given a string s, return the length of the longest substring that contains at most two distinct characters.", "tags": ["Hash Table", "String", "Sliding Window"], "input": {"s": "MzJRBWbAXkeFojHLnghGItJkhmxHSTCfl"}, "output": 2, "input_len": 28, "line": 330}
{"problem": "Given a string s representing a valid expression, implement a basic calculator to evaluate it, and return the result of the evaluation.\nNote: You are not allowed to use any built-in function which evaluates strings as mathematical expressions, such as eval().", "tags": ["Stack", "Recursion", "Math", "String"], "input": {"s": "056() 13-()4()59-( )-9  +2-6+2-6+()  3-48+1 2+(31) - +()9+8-2+5+7 ()-(5)4  521 -8( )01 80+ ((  ( ) )( ) )7 - 551 9+8()+   8- +8  35+8( -)-8 ()7-77  1+7-4 - -2+3 +1()68()- 18 +  -53+ ( )5-3 + -()  6 () 6(8)7 (2)+ + -()+2786((0 ))4- -78-()51-  -   ()()8()()18  (( )2)( )- 3 5()+() 1 ()8 -()+5 -9 ( )4  -0- ()5-295()()-  +(()-)93() +7+()-()() 5 (( ))+01   566()()-  9-()3+ ( )    -  4- 4+ 8   -9 29-  +()3+(9()+ ())+()-5(5) (2)- -2( -) - 5-(7) +()- - 0-()()( 5)() 73+ 6() 4 (9 )2 2 5 () 8 - ()- +93 -6+2 +8026-  +()4 2()2+ 18-6()()"}, "output": 11375, "input_len": 380, "line": 4085}
{"problem": "Given two strings low and high that represent two integers low and high where low <= high, return the number of strobogrammatic numbers in the range [low, high].\nA strobogrammatic number is a number that looks the same when rotated 180 degrees (looked at upside down).", "tags": ["Recursion", "Array", "String"], "input": {"low": "25", "high": "274"}, "output": 6, "input_len": 16, "line": 109}
{"problem": "Given an array of n integers nums and an integer\u00a0target, find the number of index triplets i, j, k with 0 <= i < j < k < n that satisfy the condition nums[i] + nums[j] + nums[k] < target.", "tags": ["Array", "Two Pointers", "Binary Search", "Sorting"], "input": {"nums": [-79, -90, -81, -83, -36, 15, 50, -32, -16, -19, 30, -67, -54, -19, -29, 61, 20, 72, 43, -1, 57, 48, -61, 62, 29, -45, 83, 17, 9, 8, 93, 58, -22, -62, -45, -34, 30, -33, 36, 5, 57, -54, 97, 85, 32, 25, 69, 61, -97, -58, -8, -35], "target": -87}, "output": 3507, "input_len": 214, "line": 5467}
{"problem": "Given a string s, return all the palindromic permutations (without duplicates) of it.\nYou may return the answer in any order. If s has no palindromic permutation, return an empty list.", "tags": ["Hash Table", "String", "Backtracking"], "input": {"s": "krvvrk"}, "output": ["vrkkrv", "rvkkvr", "vkrrkv", "kvrrvk", "rkvvkr", "krvvrk"], "input_len": 10, "line": 165}
{"problem": "Given a string s, return all the palindromic permutations (without duplicates) of it.\nYou may return the answer in any order. If s has no palindromic permutation, return an empty list.", "tags": ["Hash Table", "String", "Backtracking"], "input": {"s": "lmuluml"}, "output": ["umlllmu", "mulllum", "ulmlmlu", "lumlmul", "mlululm", "lmuluml"], "input_len": 9, "line": 168}
{"problem": "Given a string s, return all the palindromic permutations (without duplicates) of it.\nYou may return the answer in any order. If s has no palindromic permutation, return an empty list.", "tags": ["Hash Table", "String", "Backtracking"], "input": {"s": "ikkowwokki"}, "output": ["wokkiikkow", "owkkiikkwo", "wkokiikokw", "kwokiikowk", "okwkiikwko", "kowkiikwok", "wkkoiiokkw", "kwkoiiokwk", "kkwoiiowkk", "okkwiiwkko", "kokwiiwkok", "kkowiiwokk", "wokikkikow", "owkikkikwo", "wkoikkiokw", "kwoikkiowk", "okwikkiwko", "kowikkiwok", "woikkkkiow", "owikkkkiwo", "wiokkkkoiw", "iwokkkkowi", "oiwkkkkwio", "iowkkkkwoi", "wkiokkoikw", "kwiokkoiwk", "wikokkokiw", "iwkokkokwi", "kiwokkowik", "ikwokkowki", "okiwkkwiko", "koiwkkwiok", "oikwkkwkio", "iokwkkwkoi", "kiowkkwoik", "ikowkkwoki", "wkkiooikkw", "kwkiooikwk", "kkwiooiwkk", "wkikookikw", "kwikookiwk", "wikkookkiw", "iwkkookkwi", "kiwkookwik", "ikwkookwki", "kkiwoowikk", "kikwoowkik", "ikkwoowkki", "okkiwwikko", "kokiwwikok", "kkoiwwiokk", "okikwwkiko", "koikwwkiok", "oikkwwkkio", "iokkwwkkoi", "kiokwwkoik", "ikokwwkoki", "kkiowwoikk", "kikowwokik", "ikkowwokki"], "input_len": 11, "line": 1824}
{"problem": "Given a string s, return all the palindromic permutations (without duplicates) of it.\nYou may return the answer in any order. If s has no palindromic permutation, return an empty list.", "tags": ["Hash Table", "String", "Backtracking"], "input": {"s": "mpzzpm"}, "output": ["zpmmpz", "pzmmzp", "zmppmz", "mzppzm", "pmzzmp", "mpzzpm"], "input_len": 9, "line": 165}
{"problem": "Given a string s, return all the palindromic permutations (without duplicates) of it.\nYou may return the answer in any order. If s has no palindromic permutation, return an empty list.", "tags": ["Hash Table", "String", "Backtracking"], "input": {"s": "acsssca"}, "output": ["scasacs", "csasasc", "sacscas", "ascscsa", "casssac", "acsssca"], "input_len": 9, "line": 168}
{"problem": "Given a string s, return all the palindromic permutations (without duplicates) of it.\nYou may return the answer in any order. If s has no palindromic permutation, return an empty list.", "tags": ["Hash Table", "String", "Backtracking"], "input": {"s": "nqxqxqn"}, "output": ["xqnqnqx", "qxnqnxq", "xnqqqnx", "nxqqqxn", "qnxqxnq", "nqxqxqn"], "input_len": 10, "line": 168}
{"problem": "Given an integer array nums, return the length of the longest strictly increasing subsequence.", "tags": ["Array", "Binary Search", "DP"], "input": {"nums": [8768, -6535, 1479, 7262, -9062, -9101, -6276, 4642, 1176, -7778, -9377, 9018, 729, 5933, 8531, -7109, -8473, 7363, 7458, 2196, 7246, 1518, 4478, 6785, 72, -5587, 3190, -1630, 8701, 1752, -5177, 4135, 3495, 8353, -4819, -1612, -2340, -130, -7795, 6045, 9018, 9127, -6970, 6684, 4753, -5064, 8952, 7494, -4182, 3291, -6161, -10, -9560, 2954, 791, -7491, -197, -9957, -9314, 5564, -9779, 1021, -5059, -4442, 8531, 3687]}, "output": 12, "input_len": 392, "line": 5428}
{"problem": "Given an integer array nums, return the length of the longest strictly increasing subsequence.", "tags": ["Array", "Binary Search", "DP"], "input": {"nums": [-5045, 2925, 3940, 8426, -1337, 439, -6101, -6631, 9983, 9627, 150, 1805, 7452, 5195, -9189, -2397, 2864, 5327, -1694, 5889, -3656, -3170, 2218, 490, -2155, 7542, 3562, -1837, 2818, 478, 9692, -8199, -2831, 3158, 2172, 232, -324, -1426, -4678, 6138, 6204, -8421, -5817, -4922]}, "output": 9, "input_len": 262, "line": 2399}
{"problem": "You are given n balloons, indexed from 0 to n - 1. Each balloon is painted with a number on it represented by an array nums. You are asked to burst all the balloons.\nIf you burst the ith balloon, you will get nums[i - 1] * nums[i] * nums[i + 1] coins. If i - 1 or i + 1 goes out of bounds of the array, then treat it as if there is a balloon with a 1 painted on it.\nReturn the maximum coins you can collect by bursting the balloons wisely.", "tags": ["Array", "DP"], "input": {"nums": [90, 89, 43, 5, 61, 88, 17, 14, 52, 90, 57, 28, 3, 80]}, "output": 3852192, "input_len": 58, "line": 1382}
{"problem": "A word's generalized abbreviation can be constructed by taking any number of non-overlapping and non-adjacent substrings and replacing them with their respective lengths.\n\tFor example, \"abcde\" can be abbreviated into:\n    \t\"a3e\" (\"bcd\" turned into \"3\")\n    \t\"1bcd1\" (\"a\" and \"e\" both turned into \"1\")\n    \t\"5\" (\"abcde\" turned into \"5\")\n    \t\"abcde\" (no substrings replaced)\n    However, these abbreviations are invalid:\n    \t\"23\" (\"ab\" turned into \"2\" and \"cde\" turned into \"3\") is invalid as the substrings chosen are adjacent.\n    \t\"22de\" (\"ab\" turned into \"2\" and \"bc\" turned into \"2\") is invalid as the substring chosen overlap.\nGiven a string word, return a list of all the possible generalized abbreviations of word. Return the answer in any order.", "tags": ["Bit Manipulation", "String", "Backtracking"], "input": {"word": "lzsezzlb"}, "output": ["lzsezzlb", "lzsezzl1", "lzsezz1b", "lzsezz2", "lzsez1lb", "lzsez1l1", "lzsez2b", "lzsez3", "lzse1zlb", "lzse1zl1", "lzse1z1b", "lzse1z2", "lzse2lb", "lzse2l1", "lzse3b", "lzse4", "lzs1zzlb", "lzs1zzl1", "lzs1zz1b", "lzs1zz2", "lzs1z1lb", "lzs1z1l1", "lzs1z2b", "lzs1z3", "lzs2zlb", "lzs2zl1", "lzs2z1b", "lzs2z2", "lzs3lb", "lzs3l1", "lzs4b", "lzs5", "lz1ezzlb", "lz1ezzl1", "lz1ezz1b", "lz1ezz2", "lz1ez1lb", "lz1ez1l1", "lz1ez2b", "lz1ez3", "lz1e1zlb", "lz1e1zl1", "lz1e1z1b", "lz1e1z2", "lz1e2lb", "lz1e2l1", "lz1e3b", "lz1e4", "lz2zzlb", "lz2zzl1", "lz2zz1b", "lz2zz2", "lz2z1lb", "lz2z1l1", "lz2z2b", "lz2z3", "lz3zlb", "lz3zl1", "lz3z1b", "lz3z2", "lz4lb", "lz4l1", "lz5b", "lz6", "l1sezzlb", "l1sezzl1", "l1sezz1b", "l1sezz2", "l1sez1lb", "l1sez1l1", "l1sez2b", "l1sez3", "l1se1zlb", "l1se1zl1", "l1se1z1b", "l1se1z2", "l1se2lb", "l1se2l1", "l1se3b", "l1se4", "l1s1zzlb", "l1s1zzl1", "l1s1zz1b", "l1s1zz2", "l1s1z1lb", "l1s1z1l1", "l1s1z2b", "l1s1z3", "l1s2zlb", "l1s2zl1", "l1s2z1b", "l1s2z2", "l1s3lb", "l1s3l1", "l1s4b", "l1s5", "l2ezzlb", "l2ezzl1", "l2ezz1b", "l2ezz2", "l2ez1lb", "l2ez1l1", "l2ez2b", "l2ez3", "l2e1zlb", "l2e1zl1", "l2e1z1b", "l2e1z2", "l2e2lb", "l2e2l1", "l2e3b", "l2e4", "l3zzlb", "l3zzl1", "l3zz1b", "l3zz2", "l3z1lb", "l3z1l1", "l3z2b", "l3z3", "l4zlb", "l4zl1", "l4z1b", "l4z2", "l5lb", "l5l1", "l6b", "l7", "1zsezzlb", "1zsezzl1", "1zsezz1b", "1zsezz2", "1zsez1lb", "1zsez1l1", "1zsez2b", "1zsez3", "1zse1zlb", "1zse1zl1", "1zse1z1b", "1zse1z2", "1zse2lb", "1zse2l1", "1zse3b", "1zse4", "1zs1zzlb", "1zs1zzl1", "1zs1zz1b", "1zs1zz2", "1zs1z1lb", "1zs1z1l1", "1zs1z2b", "1zs1z3", "1zs2zlb", "1zs2zl1", "1zs2z1b", "1zs2z2", "1zs3lb", "1zs3l1", "1zs4b", "1zs5", "1z1ezzlb", "1z1ezzl1", "1z1ezz1b", "1z1ezz2", "1z1ez1lb", "1z1ez1l1", "1z1ez2b", "1z1ez3", "1z1e1zlb", "1z1e1zl1", "1z1e1z1b", "1z1e1z2", "1z1e2lb", "1z1e2l1", "1z1e3b", "1z1e4", "1z2zzlb", "1z2zzl1", "1z2zz1b", "1z2zz2", "1z2z1lb", "1z2z1l1", "1z2z2b", "1z2z3", "1z3zlb", "1z3zl1", "1z3z1b", "1z3z2", "1z4lb", "1z4l1", "1z5b", "1z6", "2sezzlb", "2sezzl1", "2sezz1b", "2sezz2", "2sez1lb", "2sez1l1", "2sez2b", "2sez3", "2se1zlb", "2se1zl1", "2se1z1b", "2se1z2", "2se2lb", "2se2l1", "2se3b", "2se4", "2s1zzlb", "2s1zzl1", "2s1zz1b", "2s1zz2", "2s1z1lb", "2s1z1l1", "2s1z2b", "2s1z3", "2s2zlb", "2s2zl1", "2s2z1b", "2s2z2", "2s3lb", "2s3l1", "2s4b", "2s5", "3ezzlb", "3ezzl1", "3ezz1b", "3ezz2", "3ez1lb", "3ez1l1", "3ez2b", "3ez3", "3e1zlb", "3e1zl1", "3e1z1b", "3e1z2", "3e2lb", "3e2l1", "3e3b", "3e4", "4zzlb", "4zzl1", "4zz1b", "4zz2", "4z1lb", "4z1l1", "4z2b", "4z3", "5zlb", "5zl1", "5z1b", "5z2", "6lb", "6l1", "7b", "8"], "input_len": 10, "line": 3397}
{"problem": "A word's generalized abbreviation can be constructed by taking any number of non-overlapping and non-adjacent substrings and replacing them with their respective lengths.\n\tFor example, \"abcde\" can be abbreviated into:\n    \t\"a3e\" (\"bcd\" turned into \"3\")\n    \t\"1bcd1\" (\"a\" and \"e\" both turned into \"1\")\n    \t\"5\" (\"abcde\" turned into \"5\")\n    \t\"abcde\" (no substrings replaced)\n    However, these abbreviations are invalid:\n    \t\"23\" (\"ab\" turned into \"2\" and \"cde\" turned into \"3\") is invalid as the substrings chosen are adjacent.\n    \t\"22de\" (\"ab\" turned into \"2\" and \"bc\" turned into \"2\") is invalid as the substring chosen overlap.\nGiven a string word, return a list of all the possible generalized abbreviations of word. Return the answer in any order.", "tags": ["Bit Manipulation", "String", "Backtracking"], "input": {"word": "fvick"}, "output": ["fvick", "fvic1", "fvi1k", "fvi2", "fv1ck", "fv1c1", "fv2k", "fv3", "f1ick", "f1ic1", "f1i1k", "f1i2", "f2ck", "f2c1", "f3k", "f4", "1vick", "1vic1", "1vi1k", "1vi2", "1v1ck", "1v1c1", "1v2k", "1v3", "2ick", "2ic1", "2i1k", "2i2", "3ck", "3c1", "4k", "5"], "input_len": 8, "line": 357}
{"problem": "A word's generalized abbreviation can be constructed by taking any number of non-overlapping and non-adjacent substrings and replacing them with their respective lengths.\n\tFor example, \"abcde\" can be abbreviated into:\n    \t\"a3e\" (\"bcd\" turned into \"3\")\n    \t\"1bcd1\" (\"a\" and \"e\" both turned into \"1\")\n    \t\"5\" (\"abcde\" turned into \"5\")\n    \t\"abcde\" (no substrings replaced)\n    However, these abbreviations are invalid:\n    \t\"23\" (\"ab\" turned into \"2\" and \"cde\" turned into \"3\") is invalid as the substrings chosen are adjacent.\n    \t\"22de\" (\"ab\" turned into \"2\" and \"bc\" turned into \"2\") is invalid as the substring chosen overlap.\nGiven a string word, return a list of all the possible generalized abbreviations of word. Return the answer in any order.", "tags": ["Bit Manipulation", "String", "Backtracking"], "input": {"word": "cbgpjvv"}, "output": ["cbgpjvv", "cbgpjv1", "cbgpj1v", "cbgpj2", "cbgp1vv", "cbgp1v1", "cbgp2v", "cbgp3", "cbg1jvv", "cbg1jv1", "cbg1j1v", "cbg1j2", "cbg2vv", "cbg2v1", "cbg3v", "cbg4", "cb1pjvv", "cb1pjv1", "cb1pj1v", "cb1pj2", "cb1p1vv", "cb1p1v1", "cb1p2v", "cb1p3", "cb2jvv", "cb2jv1", "cb2j1v", "cb2j2", "cb3vv", "cb3v1", "cb4v", "cb5", "c1gpjvv", "c1gpjv1", "c1gpj1v", "c1gpj2", "c1gp1vv", "c1gp1v1", "c1gp2v", "c1gp3", "c1g1jvv", "c1g1jv1", "c1g1j1v", "c1g1j2", "c1g2vv", "c1g2v1", "c1g3v", "c1g4", "c2pjvv", "c2pjv1", "c2pj1v", "c2pj2", "c2p1vv", "c2p1v1", "c2p2v", "c2p3", "c3jvv", "c3jv1", "c3j1v", "c3j2", "c4vv", "c4v1", "c5v", "c6", "1bgpjvv", "1bgpjv1", "1bgpj1v", "1bgpj2", "1bgp1vv", "1bgp1v1", "1bgp2v", "1bgp3", "1bg1jvv", "1bg1jv1", "1bg1j1v", "1bg1j2", "1bg2vv", "1bg2v1", "1bg3v", "1bg4", "1b1pjvv", "1b1pjv1", "1b1pj1v", "1b1pj2", "1b1p1vv", "1b1p1v1", "1b1p2v", "1b1p3", "1b2jvv", "1b2jv1", "1b2j1v", "1b2j2", "1b3vv", "1b3v1", "1b4v", "1b5", "2gpjvv", "2gpjv1", "2gpj1v", "2gpj2", "2gp1vv", "2gp1v1", "2gp2v", "2gp3", "2g1jvv", "2g1jv1", "2g1j1v", "2g1j2", "2g2vv", "2g2v1", "2g3v", "2g4", "3pjvv", "3pjv1", "3pj1v", "3pj2", "3p1vv", "3p1v1", "3p2v", "3p3", "4jvv", "4jv1", "4j1v", "4j2", "5vv", "5v1", "6v", "7"], "input_len": 10, "line": 1605}
{"problem": "A word's generalized abbreviation can be constructed by taking any number of non-overlapping and non-adjacent substrings and replacing them with their respective lengths.\n\tFor example, \"abcde\" can be abbreviated into:\n    \t\"a3e\" (\"bcd\" turned into \"3\")\n    \t\"1bcd1\" (\"a\" and \"e\" both turned into \"1\")\n    \t\"5\" (\"abcde\" turned into \"5\")\n    \t\"abcde\" (no substrings replaced)\n    However, these abbreviations are invalid:\n    \t\"23\" (\"ab\" turned into \"2\" and \"cde\" turned into \"3\") is invalid as the substrings chosen are adjacent.\n    \t\"22de\" (\"ab\" turned into \"2\" and \"bc\" turned into \"2\") is invalid as the substring chosen overlap.\nGiven a string word, return a list of all the possible generalized abbreviations of word. Return the answer in any order.", "tags": ["Bit Manipulation", "String", "Backtracking"], "input": {"word": "qsnwh"}, "output": ["qsnwh", "qsnw1", "qsn1h", "qsn2", "qs1wh", "qs1w1", "qs2h", "qs3", "q1nwh", "q1nw1", "q1n1h", "q1n2", "q2wh", "q2w1", "q3h", "q4", "1snwh", "1snw1", "1sn1h", "1sn2", "1s1wh", "1s1w1", "1s2h", "1s3", "2nwh", "2nw1", "2n1h", "2n2", "3wh", "3w1", "4h", "5"], "input_len": 9, "line": 357}
{"problem": "A word's generalized abbreviation can be constructed by taking any number of non-overlapping and non-adjacent substrings and replacing them with their respective lengths.\n\tFor example, \"abcde\" can be abbreviated into:\n    \t\"a3e\" (\"bcd\" turned into \"3\")\n    \t\"1bcd1\" (\"a\" and \"e\" both turned into \"1\")\n    \t\"5\" (\"abcde\" turned into \"5\")\n    \t\"abcde\" (no substrings replaced)\n    However, these abbreviations are invalid:\n    \t\"23\" (\"ab\" turned into \"2\" and \"cde\" turned into \"3\") is invalid as the substrings chosen are adjacent.\n    \t\"22de\" (\"ab\" turned into \"2\" and \"bc\" turned into \"2\") is invalid as the substring chosen overlap.\nGiven a string word, return a list of all the possible generalized abbreviations of word. Return the answer in any order.", "tags": ["Bit Manipulation", "String", "Backtracking"], "input": {"word": "lbsrr"}, "output": ["lbsrr", "lbsr1", "lbs1r", "lbs2", "lb1rr", "lb1r1", "lb2r", "lb3", "l1srr", "l1sr1", "l1s1r", "l1s2", "l2rr", "l2r1", "l3r", "l4", "1bsrr", "1bsr1", "1bs1r", "1bs2", "1b1rr", "1b1r1", "1b2r", "1b3", "2srr", "2sr1", "2s1r", "2s2", "3rr", "3r1", "4r", "5"], "input_len": 8, "line": 357}
{"problem": "A word's generalized abbreviation can be constructed by taking any number of non-overlapping and non-adjacent substrings and replacing them with their respective lengths.\n\tFor example, \"abcde\" can be abbreviated into:\n    \t\"a3e\" (\"bcd\" turned into \"3\")\n    \t\"1bcd1\" (\"a\" and \"e\" both turned into \"1\")\n    \t\"5\" (\"abcde\" turned into \"5\")\n    \t\"abcde\" (no substrings replaced)\n    However, these abbreviations are invalid:\n    \t\"23\" (\"ab\" turned into \"2\" and \"cde\" turned into \"3\") is invalid as the substrings chosen are adjacent.\n    \t\"22de\" (\"ab\" turned into \"2\" and \"bc\" turned into \"2\") is invalid as the substring chosen overlap.\nGiven a string word, return a list of all the possible generalized abbreviations of word. Return the answer in any order.", "tags": ["Bit Manipulation", "String", "Backtracking"], "input": {"word": "xgqr"}, "output": ["xgqr", "xgq1", "xg1r", "xg2", "x1qr", "x1q1", "x2r", "x3", "1gqr", "1gq1", "1g1r", "1g2", "2qr", "2q1", "3r", "4"], "input_len": 9, "line": 169}
{"problem": "You are given two integer arrays nums1 and nums2 of lengths m and n respectively. nums1 and nums2 represent the digits of two numbers. You are also given an integer k.\nCreate the maximum number of length k <= m + n from digits of the two numbers. The relative order of the digits from the same array must be preserved.\nReturn an array of the k digits representing the answer.", "tags": ["Stack", "Greedy", "Array", "Two Pointers", "Monotonic Stack"], "input": {"nums1": [1, 5, 5, 4], "nums2": [6, 1, 3, 1, 4], "k": 5}, "output": [6, 5, 5, 4, 4], "input_len": 42, "line": 557}
{"problem": "You are given a 0-indexed array of unique strings words.\nA palindrome pair is a pair of integers (i, j) such that:\n\t0 <= i, j < words.length,\n\ti != j, and\n\twords[i] + words[j] (the concatenation of the two strings) is a palindrome.\nReturn an array of all the palindrome pairs of words.\nYou must write an algorithm with\u00a0O(sum of words[i].length)\u00a0runtime complexity.", "tags": ["Trie", "Array", "Hash Table", "String"], "input": {"words": ["", "nce", "s", "pyvsjbbdclyfixirteispyqevzkwzykagzzsrscrajpkntvljtmpsdmhdstqrpqrvlkucuhdmttifdzvowqnenmrqnvkpadxbyqgkaadmcjstlyfgdpuxjkwiosoypfplwcpmidrhnzvshlnuvgefsubffjthidwfgyexcxrhkfyxyegthaihqkny", "kibp", "tuxyd", "uoaxytbrkvwb", "hb", "avtbnmaldhvcqeidoymmrubcavhcrssnbhfqgqbyypecicwqamgwodoxlrgiovembgurqfkkhvadszzegtpdiyprhgcwpeiglujbuvqbjutjwmcvqzcfwlkeukqeayxbospjslsfifyiymwuewqznummkzqxmonvhplajkxuqguwn", "cv", "sj", "p", "bfwuxil", "ykhajqp", "cqmgvyalmnnbawolmatwjkrjtzqlmvmbmesygi"]}, "output": [[2, 0], [0, 2], [10, 2], [11, 0], [0, 11]], "input_len": 276, "line": 2342}
{"problem": "Android devices have a special lock screen with a 3 x 3 grid of dots. Users can set an \"unlock pattern\" by connecting the dots in a specific sequence, forming a series of joined line segments where each segment's endpoints are two consecutive dots in the sequence. A sequence of k dots is a valid unlock pattern if both of the following are true:\n\tAll the dots in the sequence are distinct.\n\tIf the line segment connecting two consecutive dots in the sequence passes through the center of any other dot, the other dot must have previously appeared in the sequence. No jumps through the center non-selected dots are allowed.\n\t\tFor example, connecting dots 2 and 9 without dots 5 or 6 appearing beforehand is valid because the line from dot 2 to dot 9 does not pass through the center of either dot 5 or 6.\n\t\tHowever, connecting dots 1 and 3 without dot 2 appearing beforehand is invalid because the line from dot 1 to dot 3 passes through the center of dot 2.\nHere are some example valid and invalid unlock patterns:\n\tThe 1st pattern [4,1,3,6] is invalid because the line connecting dots 1 and 3 pass through dot 2, but dot 2 did not previously appear in the sequence.\n\tThe 2nd pattern [4,1,9,2] is invalid because the line connecting dots 1 and 9 pass through dot 5, but dot 5 did not previously appear in the sequence.\n\tThe 3rd pattern [2,4,1,3,6] is valid because it follows the conditions. The line connecting dots 1 and 3 meets the condition because dot 2 previously appeared in the sequence.\n\tThe 4th pattern [6,5,4,1,9,2] is valid because it follows the conditions. The line connecting dots 1 and 9 meets the condition because dot 5 previously appeared in the sequence.\nGiven two integers m and n, return the number of unique and valid unlock patterns of the Android grid lock screen that consist of at least m keys and at most n keys.\nTwo unlock patterns are considered unique if there is a dot in one sequence that is not in the other, or the order of the dots is different.", "tags": ["Bit Manipulation", "DP", "Backtracking", "Bitmask DP"], "input": {"m": 1, "n": 3}, "output": 385, "input_len": 13, "line": 6542}
{"problem": "Android devices have a special lock screen with a 3 x 3 grid of dots. Users can set an \"unlock pattern\" by connecting the dots in a specific sequence, forming a series of joined line segments where each segment's endpoints are two consecutive dots in the sequence. A sequence of k dots is a valid unlock pattern if both of the following are true:\n\tAll the dots in the sequence are distinct.\n\tIf the line segment connecting two consecutive dots in the sequence passes through the center of any other dot, the other dot must have previously appeared in the sequence. No jumps through the center non-selected dots are allowed.\n\t\tFor example, connecting dots 2 and 9 without dots 5 or 6 appearing beforehand is valid because the line from dot 2 to dot 9 does not pass through the center of either dot 5 or 6.\n\t\tHowever, connecting dots 1 and 3 without dot 2 appearing beforehand is invalid because the line from dot 1 to dot 3 passes through the center of dot 2.\nHere are some example valid and invalid unlock patterns:\n\tThe 1st pattern [4,1,3,6] is invalid because the line connecting dots 1 and 3 pass through dot 2, but dot 2 did not previously appear in the sequence.\n\tThe 2nd pattern [4,1,9,2] is invalid because the line connecting dots 1 and 9 pass through dot 5, but dot 5 did not previously appear in the sequence.\n\tThe 3rd pattern [2,4,1,3,6] is valid because it follows the conditions. The line connecting dots 1 and 3 meets the condition because dot 2 previously appeared in the sequence.\n\tThe 4th pattern [6,5,4,1,9,2] is valid because it follows the conditions. The line connecting dots 1 and 9 meets the condition because dot 5 previously appeared in the sequence.\nGiven two integers m and n, return the number of unique and valid unlock patterns of the Android grid lock screen that consist of at least m keys and at most n keys.\nTwo unlock patterns are considered unique if there is a dot in one sequence that is not in the other, or the order of the dots is different.", "tags": ["Bit Manipulation", "DP", "Backtracking", "Bitmask DP"], "input": {"m": 2, "n": 2}, "output": 56, "input_len": 13, "line": 1152}
{"problem": "Android devices have a special lock screen with a 3 x 3 grid of dots. Users can set an \"unlock pattern\" by connecting the dots in a specific sequence, forming a series of joined line segments where each segment's endpoints are two consecutive dots in the sequence. A sequence of k dots is a valid unlock pattern if both of the following are true:\n\tAll the dots in the sequence are distinct.\n\tIf the line segment connecting two consecutive dots in the sequence passes through the center of any other dot, the other dot must have previously appeared in the sequence. No jumps through the center non-selected dots are allowed.\n\t\tFor example, connecting dots 2 and 9 without dots 5 or 6 appearing beforehand is valid because the line from dot 2 to dot 9 does not pass through the center of either dot 5 or 6.\n\t\tHowever, connecting dots 1 and 3 without dot 2 appearing beforehand is invalid because the line from dot 1 to dot 3 passes through the center of dot 2.\nHere are some example valid and invalid unlock patterns:\n\tThe 1st pattern [4,1,3,6] is invalid because the line connecting dots 1 and 3 pass through dot 2, but dot 2 did not previously appear in the sequence.\n\tThe 2nd pattern [4,1,9,2] is invalid because the line connecting dots 1 and 9 pass through dot 5, but dot 5 did not previously appear in the sequence.\n\tThe 3rd pattern [2,4,1,3,6] is valid because it follows the conditions. The line connecting dots 1 and 3 meets the condition because dot 2 previously appeared in the sequence.\n\tThe 4th pattern [6,5,4,1,9,2] is valid because it follows the conditions. The line connecting dots 1 and 9 meets the condition because dot 5 previously appeared in the sequence.\nGiven two integers m and n, return the number of unique and valid unlock patterns of the Android grid lock screen that consist of at least m keys and at most n keys.\nTwo unlock patterns are considered unique if there is a dot in one sequence that is not in the other, or the order of the dots is different.", "tags": ["Bit Manipulation", "DP", "Backtracking", "Bitmask DP"], "input": {"m": 1, "n": 2}, "output": 65, "input_len": 13, "line": 1152}
{"problem": "Android devices have a special lock screen with a 3 x 3 grid of dots. Users can set an \"unlock pattern\" by connecting the dots in a specific sequence, forming a series of joined line segments where each segment's endpoints are two consecutive dots in the sequence. A sequence of k dots is a valid unlock pattern if both of the following are true:\n\tAll the dots in the sequence are distinct.\n\tIf the line segment connecting two consecutive dots in the sequence passes through the center of any other dot, the other dot must have previously appeared in the sequence. No jumps through the center non-selected dots are allowed.\n\t\tFor example, connecting dots 2 and 9 without dots 5 or 6 appearing beforehand is valid because the line from dot 2 to dot 9 does not pass through the center of either dot 5 or 6.\n\t\tHowever, connecting dots 1 and 3 without dot 2 appearing beforehand is invalid because the line from dot 1 to dot 3 passes through the center of dot 2.\nHere are some example valid and invalid unlock patterns:\n\tThe 1st pattern [4,1,3,6] is invalid because the line connecting dots 1 and 3 pass through dot 2, but dot 2 did not previously appear in the sequence.\n\tThe 2nd pattern [4,1,9,2] is invalid because the line connecting dots 1 and 9 pass through dot 5, but dot 5 did not previously appear in the sequence.\n\tThe 3rd pattern [2,4,1,3,6] is valid because it follows the conditions. The line connecting dots 1 and 3 meets the condition because dot 2 previously appeared in the sequence.\n\tThe 4th pattern [6,5,4,1,9,2] is valid because it follows the conditions. The line connecting dots 1 and 9 meets the condition because dot 5 previously appeared in the sequence.\nGiven two integers m and n, return the number of unique and valid unlock patterns of the Android grid lock screen that consist of at least m keys and at most n keys.\nTwo unlock patterns are considered unique if there is a dot in one sequence that is not in the other, or the order of the dots is different.", "tags": ["Bit Manipulation", "DP", "Backtracking", "Bitmask DP"], "input": {"m": 2, "n": 3}, "output": 376, "input_len": 13, "line": 6542}
{"problem": "Android devices have a special lock screen with a 3 x 3 grid of dots. Users can set an \"unlock pattern\" by connecting the dots in a specific sequence, forming a series of joined line segments where each segment's endpoints are two consecutive dots in the sequence. A sequence of k dots is a valid unlock pattern if both of the following are true:\n\tAll the dots in the sequence are distinct.\n\tIf the line segment connecting two consecutive dots in the sequence passes through the center of any other dot, the other dot must have previously appeared in the sequence. No jumps through the center non-selected dots are allowed.\n\t\tFor example, connecting dots 2 and 9 without dots 5 or 6 appearing beforehand is valid because the line from dot 2 to dot 9 does not pass through the center of either dot 5 or 6.\n\t\tHowever, connecting dots 1 and 3 without dot 2 appearing beforehand is invalid because the line from dot 1 to dot 3 passes through the center of dot 2.\nHere are some example valid and invalid unlock patterns:\n\tThe 1st pattern [4,1,3,6] is invalid because the line connecting dots 1 and 3 pass through dot 2, but dot 2 did not previously appear in the sequence.\n\tThe 2nd pattern [4,1,9,2] is invalid because the line connecting dots 1 and 9 pass through dot 5, but dot 5 did not previously appear in the sequence.\n\tThe 3rd pattern [2,4,1,3,6] is valid because it follows the conditions. The line connecting dots 1 and 3 meets the condition because dot 2 previously appeared in the sequence.\n\tThe 4th pattern [6,5,4,1,9,2] is valid because it follows the conditions. The line connecting dots 1 and 9 meets the condition because dot 5 previously appeared in the sequence.\nGiven two integers m and n, return the number of unique and valid unlock patterns of the Android grid lock screen that consist of at least m keys and at most n keys.\nTwo unlock patterns are considered unique if there is a dot in one sequence that is not in the other, or the order of the dots is different.", "tags": ["Bit Manipulation", "DP", "Backtracking", "Bitmask DP"], "input": {"m": 3, "n": 3}, "output": 320, "input_len": 13, "line": 6542}
{"problem": "Given a set of distinct positive integers nums, return the largest subset answer such that every pair (answer[i], answer[j]) of elements in this subset satisfies:\n\tanswer[i] % answer[j] == 0, or\n\tanswer[j] % answer[i] == 0\nIf there are multiple solutions, return any of them.", "tags": ["Array", "Math", "DP", "Sorting"], "input": {"nums": [732362045, 777732678, 524234164, 1171177352, 306085289, 799636868, 1994804641, 961615514, 1921558871, 947868444, 989646263, 748334403, 431945438, 571530879, 456960266, 1307192884, 1928553776, 172115608, 201035700, 678155688, 792221312]}, "output": [172115608], "input_len": 240, "line": 500}
{"problem": "Given a set of distinct positive integers nums, return the largest subset answer such that every pair (answer[i], answer[j]) of elements in this subset satisfies:\n\tanswer[i] % answer[j] == 0, or\n\tanswer[j] % answer[i] == 0\nIf there are multiple solutions, return any of them.", "tags": ["Array", "Math", "DP", "Sorting"], "input": {"nums": [1530221436, 653514108, 1461294203, 1844783766, 668798081, 759456680, 135030505, 128083349, 1525299977]}, "output": [128083349], "input_len": 107, "line": 116}
{"problem": "We are playing the Guessing Game. The game will work as follows:\n\tI pick a number between\u00a01\u00a0and\u00a0n.\n\tYou guess a number.\n\tIf you guess the right number, you win the game.\n\tIf you guess the wrong number, then I will tell you whether the number I picked is higher or lower, and you will continue guessing.\n\tEvery time you guess a wrong number\u00a0x, you will pay\u00a0x\u00a0dollars. If you run out of money, you lose the game.\nGiven a particular\u00a0n, return\u00a0the minimum amount of money you need to\u00a0guarantee a win regardless of what number I pick.", "tags": ["Math", "DP", "Game Theory"], "input": {"n": 22}, "output": 55, "input_len": 8, "line": 4306}
{"problem": "We are playing the Guessing Game. The game will work as follows:\n\tI pick a number between\u00a01\u00a0and\u00a0n.\n\tYou guess a number.\n\tIf you guess the right number, you win the game.\n\tIf you guess the wrong number, then I will tell you whether the number I picked is higher or lower, and you will continue guessing.\n\tEvery time you guess a wrong number\u00a0x, you will pay\u00a0x\u00a0dollars. If you run out of money, you lose the game.\nGiven a particular\u00a0n, return\u00a0the minimum amount of money you need to\u00a0guarantee a win regardless of what number I pick.", "tags": ["Math", "DP", "Game Theory"], "input": {"n": 12}, "output": 21, "input_len": 8, "line": 811}
{"problem": "A wiggle sequence is a sequence where the differences between successive numbers strictly alternate between positive and negative. The first difference (if one exists) may be either positive or negative. A sequence with one element and a sequence with two non-equal elements are trivially wiggle sequences.\n\tFor example, [1, 7, 4, 9, 2, 5] is a wiggle sequence because the differences (6, -3, 5, -7, 3) alternate between positive and negative.\n\tIn contrast, [1, 4, 7, 2, 5] and [1, 7, 4, 5, 5] are not wiggle sequences. The first is not because its first two differences are positive, and the second is not because its last difference is zero.\nA subsequence is obtained by deleting some elements (possibly zero) from the original sequence, leaving the remaining elements in their original order.\nGiven an integer array nums, return the length of the longest wiggle subsequence of nums.", "tags": ["Greedy", "Array", "DP"], "input": {"nums": [616, 155, 13, 44, 170, 834, 862, 471, 771]}, "output": 5, "input_len": 47, "line": 151}
{"problem": "A wiggle sequence is a sequence where the differences between successive numbers strictly alternate between positive and negative. The first difference (if one exists) may be either positive or negative. A sequence with one element and a sequence with two non-equal elements are trivially wiggle sequences.\n\tFor example, [1, 7, 4, 9, 2, 5] is a wiggle sequence because the differences (6, -3, 5, -7, 3) alternate between positive and negative.\n\tIn contrast, [1, 4, 7, 2, 5] and [1, 7, 4, 5, 5] are not wiggle sequences. The first is not because its first two differences are positive, and the second is not because its last difference is zero.\nA subsequence is obtained by deleting some elements (possibly zero) from the original sequence, leaving the remaining elements in their original order.\nGiven an integer array nums, return the length of the longest wiggle subsequence of nums.", "tags": ["Greedy", "Array", "DP"], "input": {"nums": [87, 804, 573, 970, 617, 271, 348, 619, 560, 365, 826, 194, 154, 184, 968, 861, 761]}, "output": 11, "input_len": 88, "line": 529}
{"problem": "You are given a string s and an integer k. You can choose any character of the string and change it to any other uppercase English character. You can perform this operation at most k times.\nReturn the length of the longest substring containing the same letter you can get after performing the above operations.", "tags": ["Hash Table", "String", "Sliding Window"], "input": {"s": "UNZANBXVJFWLPEGDTFFYZRURPEOEFLNECLTKSDILDRKDNKTHPPPSGTUMMQUGGIWPORBTVXGBHRQKGCPZCHBIYLYJJICVXMYOTRPVDYBIXMAPWWDKKNGTVHYCQQDQEMXKBKVOHCCQQOXJHUDMTMXUWXEGDWGDNPBXOSTOMCCNTSTLXTQBYGEXLWEKYHNZSXLRBQUJOBGUYIQJFTURXCGPLHIQJSFBBVJCSINFQQMYYQYOPTOLNIIXRMSDHPYYREUBDUNGNXTVPAUGYXRQHGVCCNKNCEZBEPOWLMAEWEKSROPDMEQHOJZWREPCPEDTLSQILDPFGEOQPHQDWUFTPULHAIAMEMFCZKZLKGUXPFEANOFAWHXRRCPYCHDCEZSOAUZXVBYTZGOIASEXGFBPBWVEPFQONPFVLDOXENESQGJDRKVZFJHGDXBIZVSNBCYLSBUALCAIPPEBZAQCUKPCBLIPSZVCGZBDKUYOMJEQCHVPTXJCTAEPPBRUOWWOHPXUCHYGRXYNPMPLNORZXBCGZRRZQYRKTTHWWELWRAJWAYTXWBHRRZOGLYLLUWOFVRRALGLTODZYGFJCGWWAJVHSXUBFUABFCJAEDHIAMQROAZSRIMOLPST", "k": 1}, "output": 4, "input_len": 372, "line": 3766}
{"problem": "We define the string base to be the infinite wraparound string of \"abcdefghijklmnopqrstuvwxyz\", so base will look like this:\n\t\"...zabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcd....\".\nGiven a string s, return the number of unique non-empty substrings of s are present in base.", "tags": ["String", "DP"], "input": {"s": "yiiwiprohnltkrzgkasvulhxljemfpdqdyoxugmwewdmiwcgyasajajkyktdgipmqvvnufizadfczewyudoxuzophdylxxazhavhdbskpocnnfiqdnyttndcofwngfywlrnohhlhrwriajglzevfqjcbvjraeowhbhiewecklperxkssouppeyhmkycaaldtjcutqaavfttjplsweijlrmgefpuesqogcvuaqwryunuozxpmseerbidldyeiqtdhjhczzhfsrchsdcvejiyhgilfcfbpihhlnvgplolgakljbupnwhyxxgljrjhjtlrqlicbkvzjljunjfjiulqpkmgdoxuosrqnlshtcpqxuwqczmgjwtaiazaeektnlewbkiaaronimlazmhysabeapqeodzjmawqanksbdpizrfowwcycrfhshxcxpazsxfzrrlqpmpcahuazhddmsedkiefaltxtqnmlzzuqstnjrkekfwyeipgzetadztqvgwggrbqskwxccvmnzlrwovgzxoipemqcrbcsieskihffurifmwdbhlbkkhokigjuyfgynwrhawimzrnaxrjycwfehukhpbacqcvbqvycxsxgvzwgfekxonukyqgiymijhbylylrmcgbdfodnpoajuhmzbamgihxxkeblwdhtyzhetdleyjewehpgqbjssrddcvpocuvykrmfkgzopgezhffeoupwoeqfryaymgmlmorioqazofhbfaxvqexgfkuakeqcumjbykcmtoqtjoqssifdvbywvygn"}, "output": 44, "input_len": 437, "line": 3190}
{"problem": "You are given an array of binary strings strs and two integers m and n.\nReturn the size of the largest subset of strs such that there are at most m 0's and n 1's in the subset.\nA set x is a subset of a set y if all elements of x are also elements of y.", "tags": ["Array", "String", "DP"], "input": {"strs": ["1", "101011001", "10010100110", "110", "11110011101000011000111001100111000010100110100010110111100111100000110100101100110010110"], "m": 2, "n": 1}, "output": 1, "input_len": 140, "line": 175}
{"problem": "You are given an array of binary strings strs and two integers m and n.\nReturn the size of the largest subset of strs such that there are at most m 0's and n 1's in the subset.\nA set x is a subset of a set y if all elements of x are also elements of y.", "tags": ["Array", "String", "DP"], "input": {"strs": ["10111001011100101100010001110001001000", "0110110101011011011001100100011101100100100011111101011110100101011010101011010100010111111", "0010111100100000001000111001110101101111011011001000111101001111001110", "01000000", "0101", "1110101010000", "001010111010111110100111001110000000101011110101010011000000110", "000110001010100110100001011111110001000010000101010111101", "011101000110010110000001100000000110010010", "01", "01111011101000110000011110010010011011000000101011", "10110010001000000001100110000000000011001010100001100000", "010011", "000100000010100101101100010111010010101010101001011", "0011001", "0011111101000101", "1", "10101100", "1001010000110000101111100011101100111101011001111101011101111101", "1", "1", "00010", "0", "00001100001101011"], "m": 2, "n": 2}, "output": 3, "input_len": 737, "line": 1025}
{"problem": "Winter is coming! During the contest, your first job is to design a standard heater with a fixed warm radius to warm all the houses.\nEvery house can be warmed, as long as the house is within the heater's warm radius range.\u00a0\nGiven the positions of houses and heaters on a horizontal line, return the minimum radius standard of heaters\u00a0so that those heaters could cover all houses.\nNotice that\u00a0all the heaters follow your radius standard, and the warm radius will the same.", "tags": ["Array", "Two Pointers", "Binary Search", "Sorting"], "input": {"houses": [12151052], "heaters": [485621131, 99626360, 223564497, 532630100, 757624961, 407918547, 299864233]}, "output": 87475308, "input_len": 94, "line": 425}
{"problem": "A magical string s consists of only '1' and '2' and obeys the following rules:\n\tThe string s is magical because concatenating the number of contiguous occurrences of characters '1' and '2' generates the string s itself.\nThe first few elements of s is s = \"1221121221221121122\u2026\u2026\". If we group the consecutive 1's and 2's in s, it will be \"1 22 11 2 1 22 1 22 11 2 11 22 ......\" and the occurrences of 1's or 2's in each group are \"1 2 2 1 1 2 1 2 2 1 2 2 ......\". You can see that the occurrence sequence is s itself.\nGiven an integer n, return the number of 1's in the first n number in the magical string s.", "tags": ["Two Pointers", "String"], "input": {"n": 139}, "output": 69, "input_len": 9, "line": 456}
{"problem": "A permutation perm of n\u00a0integers of all the integers in the range [1, n] can be represented as a string s of length n - 1 where:\n\ts[i] == 'I' if perm[i] < perm[i + 1], and\n\ts[i] == 'D' if perm[i] > perm[i + 1].\nGiven a string s, reconstruct the lexicographically smallest permutation perm and return it.", "tags": ["Stack", "Greedy", "Array", "String"], "input": {"s": "DDIIDDIIIDIIDIDIIIDDIDI"}, "output": [3, 2, 1, 4, 7, 6, 5, 8, 9, 11, 10, 12, 14, 13, 16, 15, 17, 18, 21, 20, 19, 23, 22, 24], "input_len": 16, "line": 127}
{"problem": "Given a string s, find the longest palindromic subsequence's length in s.\nA subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.", "tags": ["String", "DP"], "input": {"s": "mltkkcvzwcebxsibmzphdsfxgiqpmoti"}, "output": 7, "input_len": 23, "line": 1654}
{"problem": "Given a string s, find the longest palindromic subsequence's length in s.\nA subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.", "tags": ["String", "DP"], "input": {"s": "oahmhrzeooxqxrzucggbdpndukzeqbisvikwguqqyfjsoclrgoictapxhyktpqafceert"}, "output": 19, "input_len": 45, "line": 7389}
{"problem": "Given a string s and a string array dictionary, return the longest string in the dictionary that can be formed by deleting some of the given string characters. If there is more than one possible result, return the longest word with the smallest lexicographical order. If there is no possible result, return the empty string.", "tags": ["Array", "Two Pointers", "String", "Sorting"], "input": {"s": "tpwazywqeynfxfqutrnoxgzjjcyoaqxgrgjjexltrtndxfldspowpbwxbihkaqbwsiyhzjrdvxjbgnmnwqnaugioauqgnxbujnrglkyuovbztvevsgcvmztvmudzqkodanfduysoedspzzyftmf", "dictionary": ["fre", "ptfxrezcfuppnbxabntuwkvkjdwvmvisimfshpgefnzeqbrxdajhzozwnqpbwihmpoxyphubzmlzklriazlqvuybnglogwspprmgzfmcrknmaiy", "zvkndqvukiuqxgpuiyuytqwtnukyqlvhjquqemnmaigtisiooujfvfwifirqlmzlhbrljpvyvoongsidyjngywukauarfbkjmpiihmjtfulnoglqsvsuaaklbugthirvbapggqavmcxywoogguxwfogbriuybgutprsvnxudsgmagkqyttchuredwbupixembhvmozttgkiilvllbspzfupsgthzjlmmzpvxveoyxtnhihxbosabopwefqfweyjzcqehyvrszjkkvofeypisdcgzennjgcmzrwfqfchnaguiiuugwcvoejgqyohocgvmyqytjhgkthgovuirukodadccifxwhgpjfmyxyushohfiicyhbigarbovamhivrvfvnmtofjvgz", "ecvbjdtffwldnrxvtbjlrtgxrwqmvfgqdjshzokyqexsygmorkdpqbktuokpzrqtsqjhuwhwtoupwggpfrrynbczxhnpybobhrykbrimaoxfjiribnwqddimukyuczfieuifmsxmtptrakltunqcfhnzkogpfjbzkboywgatpmbpgsonntbumarwtalqfwbrzfpqpiqbfmdfkodmejjkosbeywlxnlyncdtgypnvzueaehmkgrqezeibwpesskmttrggaitucegsvcnanbvqslka"]}, "output": "fre", "input_len": 520, "line": 1488}
{"problem": "Given an m x n binary matrix mat, return the distance of the nearest 0 for each cell.\nThe distance between two adjacent cells is 1.", "tags": ["BFS", "Array", "DP", "Matrix"], "input": {"mat": [[0, 0, 0, 1], [0, 1, 1, 1], [0, 0, 1, 0], [1, 1, 1, 0], [0, 0, 1, 0], [0, 1, 1, 1], [1, 0, 0, 0], [1, 0, 1, 0], [0, 1, 1, 1], [0, 0, 0, 0], [1, 0, 1, 0], [1, 0, 0, 1], [0, 0, 0, 1], [0, 0, 1, 1], [1, 1, 0, 1], [1, 0, 1, 0], [0, 0, 1, 0]]}, "output": [[0, 0, 0, 1], [0, 1, 1, 1], [0, 0, 1, 0], [1, 1, 1, 0], [0, 0, 1, 0], [0, 1, 1, 1], [1, 0, 0, 0], [1, 0, 1, 0], [0, 1, 1, 1], [0, 0, 0, 0], [1, 0, 1, 0], [1, 0, 0, 1], [0, 0, 0, 1], [0, 0, 1, 2], [1, 1, 0, 1], [1, 0, 1, 0], [0, 0, 1, 0]], "input_len": 209, "line": 1353}
{"problem": "Given an m x n binary matrix mat, return the distance of the nearest 0 for each cell.\nThe distance between two adjacent cells is 1.", "tags": ["BFS", "Array", "DP", "Matrix"], "input": {"mat": [[0, 1, 0], [0, 0, 0], [1, 0, 1], [0, 1, 0], [1, 1, 1], [0, 1, 1], [1, 1, 0], [0, 1, 1], [1, 1, 1], [0, 0, 1], [1, 0, 0], [1, 0, 0], [0, 0, 0], [0, 0, 1], [1, 0, 0], [1, 0, 0], [0, 0, 0], [0, 0, 1], [0, 0, 0], [0, 1, 1], [0, 0, 0], [1, 1, 0], [1, 1, 0], [0, 0, 1], [0, 0, 0], [1, 0, 1], [0, 0, 1], [1, 1, 0], [1, 0, 0], [1, 1, 1], [0, 1, 1], [1, 1, 1], [1, 0, 1], [1, 0, 1], [0, 0, 0], [1, 0, 1], [0, 0, 1]]}, "output": [[0, 1, 0], [0, 0, 0], [1, 0, 1], [0, 1, 0], [1, 2, 1], [0, 1, 1], [1, 1, 0], [0, 1, 1], [1, 1, 2], [0, 0, 1], [1, 0, 0], [1, 0, 0], [0, 0, 0], [0, 0, 1], [1, 0, 0], [1, 0, 0], [0, 0, 0], [0, 0, 1], [0, 0, 0], [0, 1, 1], [0, 0, 0], [1, 1, 0], [1, 1, 0], [0, 0, 1], [0, 0, 0], [1, 0, 1], [0, 0, 1], [1, 1, 0], [1, 0, 0], [1, 1, 1], [0, 1, 2], [1, 1, 2], [1, 0, 1], [1, 0, 1], [0, 0, 0], [1, 0, 1], [0, 0, 1]], "input_len": 338, "line": 2230}
{"problem": "Given an m x n binary matrix mat, return the distance of the nearest 0 for each cell.\nThe distance between two adjacent cells is 1.", "tags": ["BFS", "Array", "DP", "Matrix"], "input": {"mat": [[1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0], [1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1]]}, "output": [[1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2], [0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 1, 2, 1, 0, 1, 0, 0, 0, 0], [2, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 2]], "input_len": 185, "line": 1165}
{"problem": "Given an m x n binary matrix mat, return the distance of the nearest 0 for each cell.\nThe distance between two adjacent cells is 1.", "tags": ["BFS", "Array", "DP", "Matrix"], "input": {"mat": [[1, 1], [1, 1], [1, 1], [0, 1], [1, 1], [0, 1], [1, 1], [1, 0], [0, 0], [0, 0], [1, 0], [0, 1], [1, 1], [1, 1], [1, 0], [1, 1], [1, 0], [1, 0], [0, 0], [1, 1], [1, 0], [1, 1], [0, 1], [0, 0], [1, 0], [1, 0], [0, 1], [0, 0], [0, 0], [1, 0], [0, 0], [1, 0], [0, 0], [1, 0], [1, 0], [0, 0], [0, 1], [1, 0], [0, 1], [0, 0], [1, 1], [0, 1], [0, 1], [0, 0], [1, 1], [1, 1], [1, 0], [1, 0], [0, 0], [1, 1], [0, 0], [1, 0], [1, 1], [0, 1], [0, 0], [1, 1], [1, 1], [0, 0], [1, 0], [0, 0], [1, 1], [1, 1], [0, 1]]}, "output": [[3, 4], [2, 3], [1, 2], [0, 1], [1, 2], [0, 1], [1, 1], [1, 0], [0, 0], [0, 0], [1, 0], [0, 1], [1, 2], [2, 1], [1, 0], [2, 1], [1, 0], [1, 0], [0, 0], [1, 1], [1, 0], [1, 1], [0, 1], [0, 0], [1, 0], [1, 0], [0, 1], [0, 0], [0, 0], [1, 0], [0, 0], [1, 0], [0, 0], [1, 0], [1, 0], [0, 0], [0, 1], [1, 0], [0, 1], [0, 0], [1, 1], [0, 1], [0, 1], [0, 0], [1, 1], [2, 1], [1, 0], [1, 0], [0, 0], [1, 1], [0, 0], [1, 0], [1, 1], [0, 1], [0, 0], [1, 1], [1, 1], [0, 0], [1, 0], [0, 0], [1, 1], [1, 2], [0, 1]], "input_len": 383, "line": 2593}
{"problem": "Given an m x n binary matrix mat, return the distance of the nearest 0 for each cell.\nThe distance between two adjacent cells is 1.", "tags": ["BFS", "Array", "DP", "Matrix"], "input": {"mat": [[0], [0], [0], [1], [0], [1]]}, "output": [[0], [0], [0], [1], [0], [1]], "input_len": 23, "line": 142}
{"problem": "Given an m x n binary matrix mat, return the distance of the nearest 0 for each cell.\nThe distance between two adjacent cells is 1.", "tags": ["BFS", "Array", "DP", "Matrix"], "input": {"mat": [[1, 1], [1, 1], [1, 0], [1, 0], [1, 1], [0, 0], [0, 1], [1, 0], [1, 1], [0, 1], [0, 1], [0, 0], [0, 1], [1, 0], [1, 1], [1, 1], [1, 0], [0, 0], [1, 0], [1, 1], [1, 0], [1, 0], [1, 1], [1, 1], [0, 0], [0, 1], [1, 1], [1, 0], [0, 0], [1, 0], [1, 0], [1, 1], [0, 0], [0, 1], [1, 0], [0, 1], [0, 0], [0, 0], [1, 0], [0, 0], [1, 0], [1, 1], [0, 1], [1, 1], [0, 0], [1, 1], [0, 0], [0, 1], [1, 0], [1, 0], [1, 1], [0, 1], [1, 1], [1, 1], [0, 1], [1, 0], [0, 1], [1, 1], [1, 1], [1, 0], [1, 1], [1, 1], [1, 1], [0, 0], [1, 1], [1, 0], [1, 1], [1, 0], [0, 0], [1, 0], [1, 0], [1, 0], [1, 1], [1, 0], [1, 1], [0, 0], [0, 1], [1, 0], [1, 0], [1, 1], [0, 1], [0, 1], [1, 0], [1, 1], [1, 0], [0, 0], [0, 0], [0, 1], [0, 0], [1, 0], [1, 0], [0, 1], [1, 1], [0, 1], [0, 1], [0, 0], [1, 1], [1, 0], [1, 1], [0, 0], [1, 0], [0, 1], [1, 0], [1, 1], [1, 1], [0, 1], [0, 1], [0, 1], [1, 0], [0, 1], [1, 0], [1, 0], [0, 1], [1, 1], [1, 0], [0, 0], [1, 0], [1, 0], [0, 1], [0, 1], [0, 0], [1, 0], [1, 0], [1, 0], [0, 0], [1, 1], [1, 0], [0, 0], [1, 0], [1, 1], [0, 1], [1, 1], [0, 0], [1, 0], [1, 0], [0, 0], [0, 0]]}, "output": [[3, 2], [2, 1], [1, 0], [1, 0], [1, 1], [0, 0], [0, 1], [1, 0], [1, 1], [0, 1], [0, 1], [0, 0], [0, 1], [1, 0], [2, 1], [2, 1], [1, 0], [0, 0], [1, 0], [2, 1], [1, 0], [1, 0], [2, 1], [1, 1], [0, 0], [0, 1], [1, 1], [1, 0], [0, 0], [1, 0], [1, 0], [1, 1], [0, 0], [0, 1], [1, 0], [0, 1], [0, 0], [0, 0], [1, 0], [0, 0], [1, 0], [1, 1], [0, 1], [1, 1], [0, 0], [1, 1], [0, 0], [0, 1], [1, 0], [1, 0], [1, 1], [0, 1], [1, 2], [1, 2], [0, 1], [1, 0], [0, 1], [1, 2], [2, 1], [1, 0], [2, 1], [2, 2], [1, 1], [0, 0], [1, 1], [1, 0], [2, 1], [1, 0], [0, 0], [1, 0], [1, 0], [1, 0], [2, 1], [1, 0], [1, 1], [0, 0], [0, 1], [1, 0], [1, 0], [1, 1], [0, 1], [0, 1], [1, 0], [2, 1], [1, 0], [0, 0], [0, 0], [0, 1], [0, 0], [1, 0], [1, 0], [0, 1], [1, 2], [0, 1], [0, 1], [0, 0], [1, 1], [1, 0], [1, 1], [0, 0], [1, 0], [0, 1], [1, 0], [2, 1], [1, 2], [0, 1], [0, 1], [0, 1], [1, 0], [0, 1], [1, 0], [1, 0], [0, 1], [1, 1], [1, 0], [0, 0], [1, 0], [1, 0], [0, 1], [0, 1], [0, 0], [1, 0], [1, 0], [1, 0], [0, 0], [1, 1], [1, 0], [0, 0], [1, 0], [1, 1], [0, 1], [1, 1], [0, 0], [1, 0], [1, 0], [0, 0], [0, 0]], "input_len": 827, "line": 5627}
{"problem": "Given an m x n binary matrix mat, return the distance of the nearest 0 for each cell.\nThe distance between two adjacent cells is 1.", "tags": ["BFS", "Array", "DP", "Matrix"], "input": {"mat": [[1], [0], [0], [1], [1], [0], [1], [0], [0], [0], [0], [0], [0], [1], [1], [1], [0], [1], [1], [0], [1], [1], [0], [0], [1], [1], [0], [0], [1], [1], [0]]}, "output": [[1], [0], [0], [1], [1], [0], [1], [0], [0], [0], [0], [0], [0], [1], [2], [1], [0], [1], [1], [0], [1], [1], [0], [0], [1], [1], [0], [0], [1], [1], [0]], "input_len": 98, "line": 692}
{"problem": "Given an m x n binary matrix mat, return the distance of the nearest 0 for each cell.\nThe distance between two adjacent cells is 1.", "tags": ["BFS", "Array", "DP", "Matrix"], "input": {"mat": [[0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1], [1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0], [1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1]]}, "output": [[0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 2, 1, 0, 0, 0, 1, 0, 1, 0, 1], [1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0], [1, 0, 1, 2, 1, 0, 1, 1, 2, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1]], "input_len": 266, "line": 1672}
{"problem": "Given an m x n binary matrix mat, return the distance of the nearest 0 for each cell.\nThe distance between two adjacent cells is 1.", "tags": ["BFS", "Array", "DP", "Matrix"], "input": {"mat": [[1, 1, 1, 0, 1], [0, 1, 0, 1, 0], [1, 1, 1, 0, 0], [0, 0, 1, 0, 1], [1, 1, 1, 1, 1], [1, 1, 0, 0, 0], [1, 0, 0, 0, 0], [1, 0, 1, 1, 0], [1, 0, 1, 1, 0], [0, 1, 0, 0, 0], [1, 1, 0, 0, 1], [1, 0, 1, 0, 1], [1, 1, 1, 0, 1], [0, 1, 1, 0, 0], [0, 1, 0, 1, 1]]}, "output": [[1, 2, 1, 0, 1], [0, 1, 0, 1, 0], [1, 1, 1, 0, 0], [0, 0, 1, 0, 1], [1, 1, 1, 1, 1], [2, 1, 0, 0, 0], [1, 0, 0, 0, 0], [1, 0, 1, 1, 0], [1, 0, 1, 1, 0], [0, 1, 0, 0, 0], [1, 1, 0, 0, 1], [1, 0, 1, 0, 1], [1, 1, 1, 0, 1], [0, 1, 1, 0, 0], [0, 1, 0, 1, 1]], "input_len": 230, "line": 1480}
{"problem": "Given an m x n binary matrix mat, return the distance of the nearest 0 for each cell.\nThe distance between two adjacent cells is 1.", "tags": ["BFS", "Array", "DP", "Matrix"], "input": {"mat": [[1, 1, 0, 1, 1], [1, 1, 1, 0, 1], [0, 0, 0, 0, 0], [0, 0, 0, 1, 1]]}, "output": [[2, 1, 0, 1, 2], [1, 1, 1, 0, 1], [0, 0, 0, 0, 0], [0, 0, 0, 1, 1]], "input_len": 65, "line": 402}
{"problem": "LeetCode wants to give one of its best employees the option to travel among n cities to collect algorithm problems. But all work and no play makes Jack a dull boy, you could take vacations in some particular cities and weeks. Your job is to schedule the traveling to maximize the number of vacation days you could take, but there are certain rules and restrictions you need to follow.\nRules and restrictions:\n\tYou can only travel among n cities, represented by indexes from 0 to n - 1. Initially, you are in the city indexed 0 on Monday.\n\tThe cities are connected by flights. The flights are represented as an n x n matrix (not necessarily symmetrical), called flights representing the airline status from the city i to the city j. If there is no flight from the city i to the city j, flights[i][j] == 0; Otherwise, flights[i][j] == 1. Also, flights[i][i] == 0 for all i.\n\tYou totally have k weeks (each week has seven days) to travel. You can only take flights at most once per day and can only take flights on each week's Monday morning. Since flight time is so short, we do not consider the impact of flight time.\n\tFor each city, you can only have restricted vacation days in different weeks, given an n x k matrix called days representing this relationship. For the value of days[i][j], it represents the maximum days you could take a vacation in the city i in the week j.\n\tYou could stay in a city beyond the number of vacation days, but you should work on the extra days, which will not be counted as vacation days.\n\tIf you fly from city A to city B and take the vacation on that day, the deduction towards vacation days will count towards the vacation days of city B in that week.\n\tWe do not consider the impact of flight hours on the calculation of vacation days.\nGiven the two matrices flights and days, return the maximum vacation days you could take during k weeks.", "tags": ["Array", "DP", "Matrix"], "input": {"flights": [[0, 1, 0, 0, 1, 1, 1, 1], [1, 0, 0, 0, 1, 1, 0, 1], [0, 1, 0, 0, 0, 0, 0, 1], [0, 1, 0, 0, 1, 0, 1, 1], [1, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0], [0, 0, 1, 1, 0, 0, 0, 0], [1, 1, 0, 0, 0, 1, 0, 0]], "days": [[6, 2, 2, 5, 3, 5, 4, 6, 3, 2, 2, 7, 1, 3, 2, 0, 3, 7, 1, 3, 7, 1, 3, 7, 3, 0, 0, 6, 1, 5, 2, 6, 2, 4, 3, 6, 3, 4, 2, 3], [6, 4, 1, 0, 7, 6, 4, 1, 3, 7, 3, 2, 7, 2, 0, 4, 6, 2, 2, 5, 0, 1, 6, 6, 0, 1, 0, 6, 4, 7, 0, 1, 1, 5, 0, 0, 5, 7, 7, 4], [5, 3, 7, 7, 5, 6, 0, 6, 5, 7, 2, 3, 5, 4, 3, 4, 3, 5, 2, 1, 6, 5, 2, 6, 2, 4, 7, 6, 2, 2, 3, 4, 7, 2, 0, 2, 6, 3, 3, 1], [2, 4, 4, 0, 5, 3, 2, 4, 7, 6, 5, 7, 5, 6, 0, 6, 1, 0, 2, 4, 0, 0, 5, 5, 5, 4, 0, 3, 4, 0, 7, 6, 1, 1, 6, 0, 3, 3, 6, 4], [0, 4, 7, 6, 3, 3, 3, 3, 0, 2, 1, 4, 5, 6, 4, 0, 5, 6, 0, 0, 2, 0, 3, 4, 5, 0, 6, 6, 0, 1, 0, 4, 2, 2, 0, 6, 7, 1, 4, 1], [4, 3, 5, 1, 5, 1, 7, 5, 5, 3, 3, 6, 3, 5, 1, 5, 2, 2, 2, 7, 6, 2, 0, 1, 2, 3, 3, 2, 3, 3, 4, 6, 7, 2, 7, 4, 4, 0, 6, 1], [1, 7, 0, 3, 0, 4, 1, 5, 5, 2, 4, 2, 0, 6, 7, 7, 3, 5, 5, 5, 5, 5, 7, 5, 4, 1, 5, 0, 5, 2, 1, 6, 5, 6, 5, 2, 7, 0, 4, 5], [7, 7, 2, 4, 1, 3, 6, 1, 1, 4, 1, 0, 3, 0, 7, 0, 4, 0, 1, 3, 0, 1, 6, 5, 0, 3, 7, 5, 6, 7, 3, 3, 7, 4, 2, 6, 1, 3, 3, 6]]}, "output": 245, "input_len": 1161, "line": 7619}
{"problem": "LeetCode wants to give one of its best employees the option to travel among n cities to collect algorithm problems. But all work and no play makes Jack a dull boy, you could take vacations in some particular cities and weeks. Your job is to schedule the traveling to maximize the number of vacation days you could take, but there are certain rules and restrictions you need to follow.\nRules and restrictions:\n\tYou can only travel among n cities, represented by indexes from 0 to n - 1. Initially, you are in the city indexed 0 on Monday.\n\tThe cities are connected by flights. The flights are represented as an n x n matrix (not necessarily symmetrical), called flights representing the airline status from the city i to the city j. If there is no flight from the city i to the city j, flights[i][j] == 0; Otherwise, flights[i][j] == 1. Also, flights[i][i] == 0 for all i.\n\tYou totally have k weeks (each week has seven days) to travel. You can only take flights at most once per day and can only take flights on each week's Monday morning. Since flight time is so short, we do not consider the impact of flight time.\n\tFor each city, you can only have restricted vacation days in different weeks, given an n x k matrix called days representing this relationship. For the value of days[i][j], it represents the maximum days you could take a vacation in the city i in the week j.\n\tYou could stay in a city beyond the number of vacation days, but you should work on the extra days, which will not be counted as vacation days.\n\tIf you fly from city A to city B and take the vacation on that day, the deduction towards vacation days will count towards the vacation days of city B in that week.\n\tWe do not consider the impact of flight hours on the calculation of vacation days.\nGiven the two matrices flights and days, return the maximum vacation days you could take during k weeks.", "tags": ["Array", "DP", "Matrix"], "input": {"flights": [[0, 0, 1], [0, 0, 0], [0, 0, 0]], "days": [[6, 7, 6, 6], [0, 4, 3, 4], [2, 0, 5, 7]]}, "output": 26, "input_len": 72, "line": 150}
{"problem": "There is an m x n grid with a ball. The ball is initially at the position [startRow, startColumn]. You are allowed to move the ball to one of the four adjacent cells in the grid (possibly out of the grid crossing the grid boundary). You can apply at most maxMove moves to the ball.\nGiven the five integers m, n, maxMove, startRow, startColumn, return the number of paths to move the ball out of the grid boundary. Since the answer can be very large, return it modulo 10^9 + 7.", "tags": ["DP"], "input": {"m": 2, "n": 26, "maxMove": 21, "startRow": 1, "startColumn": 14}, "output": 230998111, "input_len": 37, "line": 8778}
{"problem": "There is an m x n grid with a ball. The ball is initially at the position [startRow, startColumn]. You are allowed to move the ball to one of the four adjacent cells in the grid (possibly out of the grid crossing the grid boundary). You can apply at most maxMove moves to the ball.\nGiven the five integers m, n, maxMove, startRow, startColumn, return the number of paths to move the ball out of the grid boundary. Since the answer can be very large, return it modulo 10^9 + 7.", "tags": ["DP"], "input": {"m": 39, "n": 10, "maxMove": 10, "startRow": 31, "startColumn": 2}, "output": 31993, "input_len": 38, "line": 6509}
{"problem": "For an integer array nums, an inverse pair is a pair of integers [i, j] where 0 <= i < j < nums.length and nums[i] > nums[j].\nGiven two integers n and k, return the number of different arrays consisting of numbers from 1 to n such that there are exactly k inverse pairs. Since the answer can be huge, return it modulo 10^9 + 7.", "tags": ["DP"], "input": {"n": 10, "k": 33}, "output": 47043, "input_len": 15, "line": 1377}
{"problem": "In combinatorial mathematics, a derangement is a permutation of the elements of a set, such that no element appears in its original position.\nYou are given an integer n. There is originally an array consisting of n integers from 1 to n in ascending order, return the number of derangements it can generate. Since the answer may be huge, return it modulo 10^9 + 7.", "tags": ["Math", "DP"], "input": {"n": 127}, "output": 78927835, "input_len": 9, "line": 258}
{"problem": "In combinatorial mathematics, a derangement is a permutation of the elements of a set, such that no element appears in its original position.\nYou are given an integer n. There is originally an array consisting of n integers from 1 to n in ascending order, return the number of derangements it can generate. Since the answer may be huge, return it modulo 10^9 + 7.", "tags": ["Math", "DP"], "input": {"n": 359}, "output": 40855137, "input_len": 9, "line": 722}
{"problem": "An image smoother is a filter of the size 3 x 3 that can be applied to each cell of an image by rounding down the average of the cell and the eight surrounding cells (i.e., the average of the nine cells in the blue smoother). If one or more of the surrounding cells of a cell is not present, we do not consider it in the average (i.e., the average of the four cells in the red smoother).\nGiven an m x n integer matrix img representing the grayscale of an image, return the image after applying the smoother on each cell of it.", "tags": ["Array", "Matrix"], "input": {"img": [[36, 227, 46], [221, 163, 249]]}, "output": [[161, 157, 171], [161, 157, 171]], "input_len": 33, "line": 237}
{"problem": "There is a strange printer with the following two special properties:\n\tThe printer can only print a sequence of the same character each time.\n\tAt each turn, the printer can print new characters starting from and ending at any place and will cover the original existing characters.\nGiven a string s, return the minimum number of turns the printer needed to print it.", "tags": ["String", "DP"], "input": {"s": "jnvtoc"}, "output": 6, "input_len": 9, "line": 146}
{"problem": "There is a strange printer with the following two special properties:\n\tThe printer can only print a sequence of the same character each time.\n\tAt each turn, the printer can print new characters starting from and ending at any place and will cover the original existing characters.\nGiven a string s, return the minimum number of turns the printer needed to print it.", "tags": ["String", "DP"], "input": {"s": "spynennqkoo"}, "output": 8, "input_len": 12, "line": 642}
{"problem": "Nearly everyone has used the Multiplication Table. The multiplication table of size m x n is an integer matrix mat where mat[i][j] == i * j (1-indexed).\nGiven three integers m, n, and k, return the kth smallest element in the m x n multiplication table.", "tags": ["Math", "Binary Search"], "input": {"m": 157, "n": 509, "k": 15665}, "output": 4000, "input_len": 27, "line": 5125}
{"problem": "Given an integer array\u00a0nums, return the number of longest increasing subsequences.\nNotice that the sequence has to be strictly increasing.", "tags": ["Fenwick Tree", "Segment Tree", "Array", "DP"], "input": {"nums": [-198253, 864711, 573081, -458945, -65776, -417011, 526765, -927079, -79525]}, "output": 4, "input_len": 74, "line": 161}
{"problem": "Given two strings s1 and\u00a0s2, return the lowest ASCII sum of deleted characters to make two strings equal.", "tags": ["String", "DP"], "input": {"s1": "iicqtrwsgbvotudbjjpmzglxpvaecqzzaxoyfswgsqkgclhuurb", "s2": "z"}, "output": 5478, "input_len": 43, "line": 516}
{"problem": "Given two strings s1 and\u00a0s2, return the lowest ASCII sum of deleted characters to make two strings equal.", "tags": ["String", "DP"], "input": {"s1": "zovkfghriatddmbabiprndatpxxrhxocwuvyxudrhooowoxjjapocoiizmthuajkvuqmhdrsxhnijhmadhdpybrwznozzodgexdevwcgldcehxvwzcfihwdgntvmeltojbwmddfxhdkrbkyuoyvbkgznrelifygrarpacxlgnrbydcycjazyrzxrgehamamndempalwklfitjgfvgqxmffshwfplfxlxaoodloxshjmlwzcvzseoxoryzybsbkkhlgosxcqvsuamkfhqvmwbehoguhtlopokaragnyrdbitehpyjxhlmwafjhglmctkpfvctbsjwekraftuukxkoeabonqknuiqxkavxtiyyilknjleddeigkkkufvsehhudlptifixnopyriclilbjpydaelcddypppbuqhtdwzvwmwqmdyqzbgxvaleiipwpwkvrwezzynpqqwyxcbpbmweazdmtrjpnicseggbmzgzzueaowmcnrhofwbwfbmcochmiktjxaqpvjrbsyitcgaksbnjxrlbdthfyuxlrrhczfsndfzawnkubcsbzbltutbvludhrvzovkisntrpfueipobdgyvjxzvepptvsvxldsbaliuwkheinimtyjwrti", "s2": "c"}, "output": 69709, "input_len": 365, "line": 6358}
{"problem": "Given two integer arrays nums1 and nums2, return the maximum length of a subarray that appears in both arrays.", "tags": ["Array", "Binary Search", "DP", "Sliding Window", "Hash Function", "Rolling Hash"], "input": {"nums1": [33, 89, 80, 42, 28, 66, 62, 63, 56, 99, 45, 4, 46, 88, 13, 97, 97, 63, 77, 54, 56, 85, 30, 48, 71, 55, 12, 0, 46, 0, 3, 44, 95, 4, 66, 62, 54, 1, 52, 96, 32, 34, 83, 54, 45, 24, 87, 56, 15, 79, 81, 43, 3, 7, 9, 50, 99, 67, 83, 60, 0, 98, 33, 26, 82, 1, 86, 73, 76, 69, 63, 38, 82, 100, 52, 66, 72, 17, 98, 100, 2, 69, 22, 99, 40, 11, 9, 46, 16, 54, 93, 42, 99, 0, 53, 85, 38, 87, 43, 95, 6, 88, 97, 93, 70, 76, 3, 5, 35, 84, 93, 90, 74, 72, 3, 95, 72, 20, 39, 24, 29, 58, 92, 62, 69, 55, 6, 10, 14, 4, 36, 61, 70, 17, 21, 6, 27, 58, 33, 87, 77, 71, 14, 20, 6, 23, 76, 99, 88, 93, 32, 46, 62, 72, 64, 95, 29, 26, 82, 90, 4, 92, 8, 51, 8, 84, 3, 12, 15, 0, 81, 17, 20, 16, 68, 19, 17, 95, 51, 72, 78, 41, 36, 33, 35, 73, 74, 77, 47, 40, 72, 27, 76, 20, 33, 3, 19, 30, 5, 96, 73, 13], "nums2": [23, 21, 39, 4, 68, 40, 95, 0, 82, 99, 81, 46, 71, 34, 1]}, "output": 1, "input_len": 847, "line": 6753}
{"problem": "Given two integer arrays nums1 and nums2, return the maximum length of a subarray that appears in both arrays.", "tags": ["Array", "Binary Search", "DP", "Sliding Window", "Hash Function", "Rolling Hash"], "input": {"nums1": [27, 25, 30, 4, 15, 49, 41, 70, 70, 53, 90, 17, 72, 72, 41, 92, 71, 10, 31, 49, 21, 46, 2, 55, 35, 35, 72, 76, 46, 12, 2, 60, 22, 75, 25, 11, 36, 63, 19, 4, 81, 82, 16, 5, 51, 71, 82, 14, 22, 83, 71, 10, 44, 51, 34, 20, 57, 26, 36, 56, 31, 80, 16, 7, 7, 39, 44, 85, 82, 53, 79, 45, 88, 32, 14, 29, 4, 30, 66, 15, 87, 35, 67, 44, 35, 3, 7, 80, 15, 22, 61, 83, 84, 72, 9, 53, 61, 8, 98, 57, 3, 9, 36, 81, 41, 80, 45, 32, 35, 22, 14, 10, 83, 12, 94, 60, 91, 66, 68, 22, 15, 34, 49, 100, 72, 43, 75, 69, 52, 56, 4, 88, 44, 84, 13, 76, 39, 8, 6, 51, 6, 8, 57, 15, 94, 89], "nums2": [99, 52, 73, 12, 14, 58, 62, 4, 74, 14, 77, 26, 80]}, "output": 1, "input_len": 626, "line": 4277}
{"problem": "The distance of a pair of integers a and b is defined as the absolute difference between a and b.\nGiven an integer array nums and an integer k, return the kth smallest distance among all the pairs nums[i] and nums[j] where 0 <= i < j < nums.length.", "tags": ["Array", "Two Pointers", "Binary Search", "Sorting"], "input": {"nums": [181294, 237222, 501421, 728028, 291266, 368407, 253047, 9304, 426004, 259756, 398572, 469790, 848727, 726624, 617509, 514387, 96672, 352068, 862852, 223404, 175826, 829654, 849180, 173690, 315320, 643361, 399009, 748754, 505828, 813284, 761878, 46425, 155280, 828140, 390510, 847962, 709372, 310273, 557506, 626449, 470550, 775458, 282065, 602751, 650045, 962763, 799783, 21531, 182262, 682562, 236224, 142612, 353404, 306432], "k": 1430}, "output": 941232, "input_len": 440, "line": 4385}
{"problem": "Given strings s1 and s2, return the minimum contiguous\u00a0substring part of s1, so that s2 is a subsequence of the part.\nIf there is no such window in s1 that covers all characters in s2, return the empty string \"\". If there are multiple such minimum-length windows, return the one with the left-most starting index.", "tags": ["String", "DP", "Sliding Window"], "input": {"s1": "guilmjwijms", "s2": "j"}, "output": "j", "input_len": 19, "line": 104}
{"problem": "Given strings s1 and s2, return the minimum contiguous\u00a0substring part of s1, so that s2 is a subsequence of the part.\nIf there is no such window in s1 that covers all characters in s2, return the empty string \"\". If there are multiple such minimum-length windows, return the one with the left-most starting index.", "tags": ["String", "DP", "Sliding Window"], "input": {"s1": "fienkxfideo", "s2": "ienkxfideo"}, "output": "ienkxfideo", "input_len": 22, "line": 399}
{"problem": "Given a string s, return the number of different non-empty palindromic subsequences in s. Since the answer may be very large, return it modulo 10^9 + 7.\nA subsequence of a string is obtained by deleting zero or more characters from the string.\nA sequence is palindromic if it is equal to the sequence reversed.\nTwo sequences a1, a2, ... and b1, b2, ... are different if there is some i for which ai != bi.", "tags": ["String", "DP"], "input": {"s": "dabdbadbbcbdaaa"}, "output": 83, "input_len": 14, "line": 3026}
{"problem": "You are given an n x n grid representing a field of cherries, each cell is one of three possible integers.\n\t0 means the cell is empty, so you can pass through,\n\t1 means the cell contains a cherry that you can pick up and pass through, or\n\t-1 means the cell contains a thorn that blocks your way.\nReturn the maximum number of cherries you can collect by following the rules below:\n\tStarting at the position (0, 0) and reaching (n - 1, n - 1) by moving right or down through valid path cells (cells with value 0 or 1).\n\tAfter reaching (n - 1, n - 1), returning to (0, 0) by moving left or up through valid path cells.\n\tWhen passing through a path cell containing a cherry, you pick it up, and the cell becomes an empty cell 0.\n\tIf there is no valid path between (0, 0) and (n - 1, n - 1), then no cherries can be collected.", "tags": ["Array", "DP", "Matrix"], "input": {"grid": [[1, 1], [1, 1]]}, "output": 4, "input_len": 17, "line": 165}
{"problem": "You are given an n x n grid representing a field of cherries, each cell is one of three possible integers.\n\t0 means the cell is empty, so you can pass through,\n\t1 means the cell contains a cherry that you can pick up and pass through, or\n\t-1 means the cell contains a thorn that blocks your way.\nReturn the maximum number of cherries you can collect by following the rules below:\n\tStarting at the position (0, 0) and reaching (n - 1, n - 1) by moving right or down through valid path cells (cells with value 0 or 1).\n\tAfter reaching (n - 1, n - 1), returning to (0, 0) by moving left or up through valid path cells.\n\tWhen passing through a path cell containing a cherry, you pick it up, and the cell becomes an empty cell 0.\n\tIf there is no valid path between (0, 0) and (n - 1, n - 1), then no cherries can be collected.", "tags": ["Array", "DP", "Matrix"], "input": {"grid": [[1, -1, 1, 0, 1], [1, -1, 0, 0, 1], [1, 0, 0, 1, 1], [0, -1, 1, 0, 0], [-1, -1, 0, 0, 1]]}, "output": 7, "input_len": 80, "line": 2191}
{"problem": "Given an m x n integer matrix grid where each entry is only 0 or 1, return the number of corner rectangles.\nA corner rectangle is four distinct 1's on the grid that forms an axis-aligned rectangle. Note that only the corners need to have the value 1. Also, all four 1's used must be distinct.", "tags": ["Array", "Math", "DP", "Matrix"], "input": {"grid": [[0, 0, 1, 1, 1, 1], [1, 1, 1, 1, 0, 0], [0, 0, 1, 1, 1, 0], [0, 0, 0, 0, 0, 1], [0, 1, 0, 0, 1, 1], [1, 0, 1, 0, 0, 1]]}, "output": 8, "input_len": 113, "line": 261}
{"problem": "Given an m x n integer matrix grid where each entry is only 0 or 1, return the number of corner rectangles.\nA corner rectangle is four distinct 1's on the grid that forms an axis-aligned rectangle. Note that only the corners need to have the value 1. Also, all four 1's used must be distinct.", "tags": ["Array", "Math", "DP", "Matrix"], "input": {"grid": [[0, 1], [0, 0], [1, 1], [0, 0], [1, 1], [0, 0], [1, 0], [1, 0], [1, 0], [1, 1], [0, 0], [0, 1], [1, 1], [1, 1], [1, 1], [1, 1], [0, 0], [0, 0], [0, 0], [0, 0], [1, 1], [1, 0], [1, 1], [0, 1], [0, 0], [0, 0], [1, 0], [0, 0], [0, 1], [0, 0], [1, 0], [0, 0]]}, "output": 36, "input_len": 197, "line": 281}
{"problem": "You are given an integer n. You have an n x n binary grid grid with all values initially 1's except for some indices given in the array mines. The ith element of the array mines is defined as mines[i] = [xi, yi] where grid[xi][yi] == 0.\nReturn the order of the largest axis-aligned plus sign of 1's contained in grid. If there is none, return 0.\nAn axis-aligned plus sign of 1's of order k has some center grid[r][c] == 1 along with four arms of length k - 1 going up, down, left, and right, and made of 1's. Note that there could be 0's or 1's beyond the arms of the plus sign, only the relevant area of the plus sign is checked for 1's.", "tags": ["Array", "DP"], "input": {"n": 6, "mines": [[0, 5], [2, 5], [2, 3], [5, 0], [3, 1], [2, 4], [5, 4], [3, 5], [2, 2], [3, 2], [3, 4], [1, 5], [1, 2], [1, 1], [1, 3], [0, 1], [0, 2], [0, 0], [5, 2], [5, 1], [4, 0], [3, 0], [4, 4], [2, 1], [0, 4], [4, 1], [5, 5], [0, 3], [4, 5], [4, 3], [1, 4], [5, 3], [4, 2], [1, 0], [3, 3]]}, "output": 1, "input_len": 222, "line": 432}
{"problem": "You are given an integer n. You have an n x n binary grid grid with all values initially 1's except for some indices given in the array mines. The ith element of the array mines is defined as mines[i] = [xi, yi] where grid[xi][yi] == 0.\nReturn the order of the largest axis-aligned plus sign of 1's contained in grid. If there is none, return 0.\nAn axis-aligned plus sign of 1's of order k has some center grid[r][c] == 1 along with four arms of length k - 1 going up, down, left, and right, and made of 1's. Note that there could be 0's or 1's beyond the arms of the plus sign, only the relevant area of the plus sign is checked for 1's.", "tags": ["Array", "DP"], "input": {"n": 23, "mines": [[1, 13], [5, 19], [9, 1], [5, 6], [0, 11], [12, 1], [18, 11], [7, 10], [10, 8]]}, "output": 11, "input_len": 75, "line": 4902}
{"problem": "An integer x is a good if after rotating each digit individually by 180 degrees, we get a valid number that is different from x. Each digit must be rotated - we cannot choose to leave it alone.\nA number is valid if each digit remains a digit after rotation. For example:\n\t0, 1, and 8 rotate to themselves,\n\t2 and 5 rotate to each other (in this case they are rotated in a different direction, in other words, 2 or 5 gets mirrored),\n\t6 and 9 rotate to each other, and\n\tthe rest of the numbers do not rotate to any other number and become invalid.\nGiven an integer n, return the number of good integers in the range [1, n].", "tags": ["Math", "DP"], "input": {"n": 461}, "output": 129, "input_len": 9, "line": 6781}
{"problem": "An integer x is a good if after rotating each digit individually by 180 degrees, we get a valid number that is different from x. Each digit must be rotated - we cannot choose to leave it alone.\nA number is valid if each digit remains a digit after rotation. For example:\n\t0, 1, and 8 rotate to themselves,\n\t2 and 5 rotate to each other (in this case they are rotated in a different direction, in other words, 2 or 5 gets mirrored),\n\t6 and 9 rotate to each other, and\n\tthe rest of the numbers do not rotate to any other number and become invalid.\nGiven an integer n, return the number of good integers in the range [1, n].", "tags": ["Math", "DP"], "input": {"n": 366}, "output": 129, "input_len": 9, "line": 5438}
{"problem": "Your car starts at position 0 and speed +1 on an infinite number line. Your car can go into negative positions. Your car drives automatically according to a sequence of instructions 'A' (accelerate) and 'R' (reverse):\n\tWhen you get an instruction 'A', your car does the following:\n    \tposition += speed\n    \tspeed *= 2\n    When you get an instruction 'R', your car does the following:\n    \tIf your speed is positive then speed = -1\n    \totherwise speed = 1\n    Your position stays the same.\nFor example, after commands \"AAR\", your car goes to positions 0 --> 1 --> 3 --> 3, and your speed goes to 1 --> 2 --> 4 --> -1.\nGiven a target position target, return the length of the shortest sequence of instructions to get there.", "tags": ["DP"], "input": {"target": 145}, "output": 17, "input_len": 9, "line": 2224}
{"problem": "Given an array of unique integers, arr, where each integer arr[i] is strictly greater than 1.\nWe make a binary tree using these integers, and each number may be used for any number of times. Each non-leaf node's value should be equal to the product of the values of its children.\nReturn the number of binary trees we can make. The answer may be too large so return the answer modulo 10^9 + 7.", "tags": ["Array", "Hash Table", "DP", "Sorting"], "input": {"arr": [200094962, 273596766, 785074728, 48234174, 649958204, 856495969, 889363943, 919223843, 654065143, 521800681, 167340154, 536838292, 638550687, 272291169, 455130319, 197104544, 89469838, 813950193, 116821424, 872977488, 170027571, 278023662, 695915365, 176732716, 571790413, 213743619, 266855213, 842809108, 888781162, 267485625, 769810272, 5514142, 135155326, 389804635, 939049143, 165419845, 79790687, 797912202, 56488072, 683803955, 47552766, 378582153, 526803296, 83850422, 405564885, 680376869, 564090111, 937775340, 752015080, 92794795, 629827215, 717567140, 216244330, 520193219, 675154864, 29901083, 966836184, 47775555, 19788877, 881031164, 251443618, 562032952, 215130019, 916196579, 625433209, 912816769, 623013651, 492714908, 318103094, 300015813, 172332250, 87938504, 493557395, 472039797, 485445305, 220637969, 699159934]}, "output": 77, "input_len": 838, "line": 9019}
{"problem": "Given an array of unique integers, arr, where each integer arr[i] is strictly greater than 1.\nWe make a binary tree using these integers, and each number may be used for any number of times. Each non-leaf node's value should be equal to the product of the values of its children.\nReturn the number of binary trees we can make. The answer may be too large so return the answer modulo 10^9 + 7.", "tags": ["Array", "Hash Table", "DP", "Sorting"], "input": {"arr": [578347142, 504304241, 896371263, 150457898, 336669609, 223800356, 158533911, 276653249, 454383672, 339309381, 532063158, 162342080, 488948526, 272229586, 455143500, 303440968, 664136651, 327992984, 604330067, 747155865]}, "output": 20, "input_len": 224, "line": 640}
{"problem": "Let's define a function countUniqueChars(s) that returns the number of unique characters in\u00a0s.\n\tFor example, calling countUniqueChars(s) if s = \"LEETCODE\" then \"L\", \"T\", \"C\", \"O\", \"D\" are the unique characters since they appear only once in s, therefore countUniqueChars(s) = 5.\nGiven a string s, return the sum of countUniqueChars(t) where t is a substring of s. The test cases are generated such that the answer fits in a 32-bit integer.\nNotice that some substrings can be repeated so in this case you have to count the repeated ones too.", "tags": ["Hash Table", "String", "DP"], "input": {"s": "ZCSCYHJQDKSPHPKFZXPCTZJWLHPCWQFBYCUHPEOLMJVWESEKOBHYGWKBHJGRGZTEFWSTBFIWEMSCZCVSQLIDODBLBHOGCVSQZWMNIHIDNEUHVYNWQKCOITQMRPMLSJLMPRFHPAZFDVTKPXCZFHOITUXJVFBDPDAYESNEZOFXHSSWFOLLYCAMJPZHVCMGZPISGTOGIFYCOSALFZRQBFUFAYGMNHDXQMIQKCKULAODAYDIVMMLMYKRBFAPCEDSGMCRUGFMGUANMYNYPPLPFCNJLGUDHANZZGXXTMIMZASRNNJBRPQFZGFEGBGVQIWXRHROOGGSRTUZWRHWALEJECSSCINZMQWKWYRMSRFNDXIJNEUKNIWQZAQYUSGDKYNKTKJALSKORGCTDSOLJRWVBBCQMWIXFOOEAWJVFZSHLUPLKGSRXWAWQJTUZEDDPKISGVJENTIHMNWVYBTOYRVWSJFFMTIBOBZEZTYDPSNOWIODWMQOIZBIXGBFFJSFJKFPWRSLMYNBZIQJMTKSPVOCRHOLBRQPXNUEZCRYOQFMSALQFPSAVODQEGPIUCUGUSEQMNTNCSZUBGMUCCWIMMUEBKEKJYAZCMDKDSGYSUVOAVLKCJEVSXSQIRQRDKTVYCXMYFHCFIRKJADMCOYHIJUBYAATMQHYSOPEXTZBWKKXAXUBWEIHTWEIVMECSAMTHKMNUIXYZAZHYLSGRTQDJOTTZRQYBKKIWLFTSVBQIJWAYDCWWJTLYJLNYYDAFQPSYMPFLDSFVWCTAKOQVRJKYBFTSUNGDUXGEDUUHIIAEKTBTIFRADLLWDIYEGEVMGNTMYXEKXDQENZYAOADFRBUBTLEHWCTBMDYOGEZATCDYNUENSLRLNQAOIVCBTCCYARPMQSTHBTIMEMIGFPMBEBHCAYUZMHOYUUFNIWWFIVYYEANMFGEROBUKGNXKCEVGYBBLXIWEXUDHSBBFZRZKTIOWTLBSQLUEUYRVUKZTNPUGQTO"}, "output": 622082, "input_len": 593, "line": 4069}
{"problem": "Let's define a function countUniqueChars(s) that returns the number of unique characters in\u00a0s.\n\tFor example, calling countUniqueChars(s) if s = \"LEETCODE\" then \"L\", \"T\", \"C\", \"O\", \"D\" are the unique characters since they appear only once in s, therefore countUniqueChars(s) = 5.\nGiven a string s, return the sum of countUniqueChars(t) where t is a substring of s. The test cases are generated such that the answer fits in a 32-bit integer.\nNotice that some substrings can be repeated so in this case you have to count the repeated ones too.", "tags": ["Hash Table", "String", "DP"], "input": {"s": "RYXSRJQCXRUVSJITKDHWBKDDQRQCKUKNOHIKSGWSLYAURCCMQANCJJQFRTIFRWTDCVJPPPOQBXFJQLMIGGUVXYPTKFIFZKEEDPMMHTJLLQREVVHUABMMRQELUTYBCFHDIOIURSQUHBXRNJEINKCREUCWENRNNOSZNLDILWCDABNNQXZPFYDULWGFLNQPDVBYMRUVKEFTNYIDYMRFBHNZKWVTAOLCXKGVSGYPBJNRZQFWAOHLUOFJULFPYVTWFCUCVHBCYJYIIHPXUOJYRSBPZMKKLKNNXFWDLWMTOQOKGRULFCWMBXEOMVWXTLOAGDLUINCUXULHRYPORYFDTKYCINPZYSTBEBXJGDUMZGHYSTJAUAYFUCLPLKKWWQQILAGLGBWKHAPDSASSXIUQVOOMZKZZCUUIEPSRLHAGPPFZVDOHVWJATYXUYPNATXNAPQIULJHWDVOGQBAFOXTGYHCXFQFIEQJBDQOTPECLFLCLVMOQVZYKTBTKAWYAYUUBJXCWOKUYEJTTEHXJIZAEKCRATHNTIWUOLUAOTVBNLNMAAKPAQIQBHEVWZOSBPQQXJSWRXPEYJGHFKZKULFBQZFLZFKVSMWHBCAPPSNEMEPMQXFXKNKQRNFDDHGNZSGUUPTJRYZKWFBDNDRBSFVSPJDHZVNVCQNTFLJENYHDUYYIEDYFCAMYSFYFRUHZSJHDAQPN"}, "output": 428981, "input_len": 427, "line": 2897}
{"problem": "You are given two images, img1 and img2, represented as binary, square matrices of size n x n. A binary matrix has only 0s and 1s as values.\nWe translate one image however we choose by sliding all the 1 bits left, right, up, and/or down any number of units. We then place it on top of the other image. We can then calculate the overlap by counting the number of positions that have a 1 in both images.\nNote also that a translation does not include any kind of rotation. Any 1 bits that are translated outside of the matrix borders are erased.\nReturn the largest possible overlap.", "tags": ["Array", "Matrix"], "input": {"img1": [[0, 0, 0, 1], [1, 1, 1, 1], [0, 1, 1, 1], [0, 0, 0, 1]], "img2": [[1, 1, 0, 1], [1, 1, 0, 1], [1, 0, 1, 0], [0, 1, 1, 1]]}, "output": 6, "input_len": 106, "line": 557}
{"problem": "A robot on an infinite XY-plane starts at point (0, 0) facing north. The robot receives an array of integers commands, which represents a sequence of moves that it needs to execute. There are only three possible types of instructions the robot can receive:\n\t-2: Turn left 90 degrees.\n\t-1: Turn right 90 degrees.\n\t1 <= k <= 9: Move forward k units, one unit at a time.\nSome of the grid squares are obstacles. The ith obstacle is at grid point obstacles[i] = (xi, yi). If the robot runs into an obstacle, it will stay in its current location (on the block adjacent to the obstacle) and move onto the next command.\nReturn the maximum squared Euclidean distance that the robot reaches at any point in its path (i.e. if the distance is 5, return 25).\nNote:\n\tThere can be an obstacle at (0, 0). If this happens, the robot will ignore the obstacle until it has moved off the origin. However, it will be unable to return to (0, 0) due to the obstacle.\n\tNorth means +Y direction.\n\tEast means +X direction.\n\tSouth means -Y direction.\n\tWest means -X direction.", "tags": ["Array", "Hash Table", "Simulation"], "input": {"commands": [4, 8, -1, -2, 4, 8, 8, 2, -1, 8], "obstacles": [[29050, -3937]]}, "output": 1220, "input_len": 52, "line": 259}
{"problem": "You are given a string s of length n where s[i] is either:\n\t'D' means decreasing, or\n\t'I' means increasing.\nA permutation perm of n + 1 integers of all the integers in the range [0, n] is called a valid permutation if for all valid i:\n\tIf s[i] == 'D', then perm[i] > perm[i + 1], and\n\tIf s[i] == 'I', then perm[i] < perm[i + 1].\nReturn the number of valid permutations perm. Since the answer may be large, return it modulo 10^9 + 7.", "tags": ["String", "DP", "Prefix Sum"], "input": {"s": "DDDIDDII"}, "output": 728, "input_len": 9, "line": 380}
{"problem": "You are given a string s of length n where s[i] is either:\n\t'D' means decreasing, or\n\t'I' means increasing.\nA permutation perm of n + 1 integers of all the integers in the range [0, n] is called a valid permutation if for all valid i:\n\tIf s[i] == 'D', then perm[i] > perm[i + 1], and\n\tIf s[i] == 'I', then perm[i] < perm[i + 1].\nReturn the number of valid permutations perm. Since the answer may be large, return it modulo 10^9 + 7.", "tags": ["String", "DP", "Prefix Sum"], "input": {"s": "IDIDIIID"}, "output": 2312, "input_len": 10, "line": 380}
{"problem": "Given an array of integers nums, sort the array in ascending order and return it.\nYou must solve the problem without using any built-in functions in O(nlog(n)) time complexity and with the smallest space complexity possible.", "tags": ["Array", "Divide & Conquer", "Bucket Sort", "Counting Sort", "Radix Sort", "Sorting", "Heap", "Merge Sort"], "input": {"nums": [27051, -45008, -38078, -33506, -27918, 9718, 46406, 5033, 24673, 23818, -37766, -14215, -47841, -34256, -35824, 23284, -20020, -21821, -9052, 42375, 40804, -47473, 41694, -10609, -17801, 21678, 49278, 38015, -22167, -43267, -18300, -27347, -7711, -2753, 38592, -12046, 43619, -3051, -36262, -14055, 26167, 28475, 25782, 32416, 21180, 203, 39693, -23209, -15901, -7916, -25547, 13904, -11763, 41449, 12943, -705, -39123, 32489, -43871, -38695, -41170, 28141, -38486, -14616, 39121, -49253, -30278]}, "output": [-49253, -47841, -47473, -45008, -43871, -43267, -41170, -39123, -38695, -38486, -38078, -37766, -36262, -35824, -34256, -33506, -30278, -27918, -27347, -25547, -23209, -22167, -21821, -20020, -18300, -17801, -15901, -14616, -14215, -14055, -12046, -11763, -10609, -9052, -7916, -7711, -3051, -2753, -705, 203, 5033, 9718, 12943, 13904, 21180, 21678, 23284, 23818, 24673, 25782, 26167, 27051, 28141, 28475, 32416, 32489, 38015, 38592, 39121, 39693, 40804, 41449, 41694, 42375, 43619, 46406, 49278], "input_len": 462, "line": 3077}
{"problem": "Given an integer array arr, and an integer target, return the number of tuples i, j, k such that i < j < k and arr[i] + arr[j] + arr[k] == target.\nAs the answer can be very large, return it modulo 10^9 + 7.", "tags": ["Array", "Hash Table", "Two Pointers", "Counting", "Sorting"], "input": {"arr": [84, 62, 78, 7, 41, 76, 76, 34, 79, 58, 17, 67, 61, 84, 97, 1, 10, 25, 68, 87, 29, 26, 9, 69, 16, 54, 21, 31, 20, 42, 81, 79, 41, 12, 99, 51, 35, 76, 66, 65, 33, 0, 34, 31, 85, 29, 10, 71, 43, 14, 58, 14, 77, 16, 48, 65, 53, 22, 37, 74, 82, 50, 11, 97, 90], "target": 122}, "output": 319, "input_len": 268, "line": 7764}
{"problem": "Given a string s, return the number of distinct non-empty subsequences of s. Since the answer may be very large, return it modulo 10^9 + 7.\nA subsequence of a string is a new string that is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (i.e., \"ace\" is a subsequence of \"abcde\" while \"aec\" is not.", "tags": ["String", "DP"], "input": {"s": "rnezhgzgvcnobrysszfdsrxhzihbqlezvtklcacygqa"}, "output": 692755427, "input_len": 27, "line": 3535}
{"problem": "Given a string s, return the number of distinct non-empty subsequences of s. Since the answer may be very large, return it modulo 10^9 + 7.\nA subsequence of a string is a new string that is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (i.e., \"ace\" is a subsequence of \"abcde\" while \"aec\" is not.", "tags": ["String", "DP"], "input": {"s": "eactleydru"}, "output": 1007, "input_len": 11, "line": 829}
{"problem": "A permutation perm of n + 1 integers of all the integers in the range [0, n] can be represented as a string s of length n where:\n\ts[i] == 'I' if perm[i] < perm[i + 1], and\n\ts[i] == 'D' if perm[i] > perm[i + 1].\nGiven a string s, reconstruct the permutation perm and return it. If there are multiple valid permutations perm, return any of them.", "tags": ["Greedy", "Array", "Two Pointers", "String"], "input": {"s}, "output": [0, 1, 635, 634, 633, 2, 632, 3, 4, 631, 630, 5, 629, 628, 627, 6, 7, 626, 625, 624, 623, 8, 622, 621, 620, 619, 618, 617, 616, 9, 615, 614, 10, 613, 612, 11, 12, 611, 610, 609, 13, 14, 15, 608, 16, 607, 606, 605, 604, 603, 17, 602, 18, 601, 19, 20, 21, 600, 599, 22, 598, 23, 24, 597, 596, 25, 595, 594, 26, 27, 28, 29, 30, 31, 593, 32, 592, 33, 34, 591, 590, 589, 35, 588, 36, 37, 587, 586, 38, 585, 39, 40, 41, 42, 43, 584, 583, 44, 582, 45, 581, 580, 579, 46, 578, 47, 48, 49, 577, 576, 575, 50, 574, 51, 573, 572, 52, 53, 571, 570, 54, 569, 568, 55, 567, 56, 566, 57, 58, 59, 565, 60, 564, 563, 562, 561, 560, 61, 62, 63, 64, 65, 559, 66, 67, 558, 68, 69, 557, 556, 70, 71, 72, 555, 73, 554, 553, 552, 74, 551, 75, 550, 76, 549, 77, 78, 548, 547, 546, 79, 545, 544, 80, 81, 543, 542, 82, 83, 541, 540, 84, 539, 538, 537, 536, 535, 85, 534, 86, 87, 533, 532, 531, 88, 530, 89, 529, 528, 90, 527, 526, 91, 525, 524, 523, 522, 92, 93, 94, 521, 95, 520, 519, 518, 517, 96, 97, 516, 515, 514, 513, 512, 511, 98, 510, 509, 99, 508, 507, 100, 101, 102, 506, 103, 505, 104, 105, 106, 504, 107, 503, 108, 109, 502, 501, 110, 111, 500, 499, 498, 112, 497, 113, 496, 114, 495, 115, 116, 494, 117, 493, 492, 491, 490, 118, 119, 489, 120, 488, 487, 121, 122, 123, 486, 485, 124, 125, 484, 483, 482, 481, 126, 480, 127, 128, 479, 478, 129, 477, 476, 475, 474, 473, 130, 131, 472, 132, 133, 134, 471, 135, 470, 469, 468, 467, 136, 466, 137, 465, 464, 463, 138, 462, 139, 140, 461, 141, 460, 142, 143, 144, 459, 458, 145, 146, 147, 148, 149, 457, 150, 151, 152, 153, 456, 455, 454, 154, 155, 453, 452, 156, 157, 451, 158, 159, 160, 161, 162, 163, 164, 450, 165, 166, 449, 167, 448, 447, 446, 168, 169, 445, 444, 170, 443, 442, 171, 441, 172, 173, 174, 175, 440, 176, 177, 439, 178, 179, 438, 437, 436, 180, 181, 435, 434, 433, 182, 183, 184, 432, 185, 186, 431, 187, 188, 430, 189, 190, 191, 192, 193, 429, 194, 195, 428, 427, 426, 196, 425, 197, 424, 198, 423, 422, 199, 421, 200, 201, 420, 419, 418, 202, 417, 416, 203, 204, 415, 414, 205, 206, 413, 412, 411, 207, 410, 208, 409, 209, 408, 210, 407, 211, 406, 405, 404, 403, 402, 212, 401, 213, 214, 215, 400, 216, 399, 217, 218, 219, 398, 220, 221, 222, 223, 224, 397, 396, 225, 395, 226, 227, 228, 394, 393, 392, 229, 391, 390, 389, 230, 388, 387, 386, 385, 231, 384, 232, 233, 234, 235, 383, 382, 236, 381, 237, 238, 239, 240, 241, 380, 379, 242, 243, 378, 244, 377, 245, 246, 376, 375, 247, 374, 373, 372, 371, 248, 249, 370, 250, 369, 251, 252, 253, 368, 367, 366, 365, 254, 255, 364, 256, 363, 257, 362, 361, 360, 258, 259, 359, 260, 261, 262, 263, 358, 264, 357, 265, 266, 267, 356, 355, 354, 268, 269, 270, 271, 353, 352, 351, 272, 273, 274, 275, 350, 349, 276, 348, 347, 346, 277, 345, 278, 279, 344, 280, 343, 281, 282, 342, 341, 283, 340, 284, 339, 338, 285, 337, 286, 287, 336, 288, 289, 335, 290, 334, 333, 291, 332, 331, 330, 292, 293, 294, 295, 329, 328, 327, 326, 296, 297, 325, 324, 298, 299, 300, 301, 323, 302, 322, 303, 321, 320, 319, 318, 304, 305, 306, 317, 307, 308, 309, 316, 310, 315, 314, 313, 311, 312], "input_len": 287, "line": 2547}
{"problem": "Given an integer array nums, return the number of AND triples.\nAn AND triple is a triple of indices (i, j, k) such that:\n\t0 <= i < nums.length\n\t0 <= j < nums.length\n\t0 <= k < nums.length\n\tnums[i] & nums[j] & nums[k] == 0, where & represents the bitwise-AND operator.", "tags": ["Bit Manipulation", "Array", "Hash Table"], "input": {"nums": [16008, 32421, 36238, 12779, 42129, 58469, 2646, 21228, 26879, 22535, 46055, 60975]}, "output": 120, "input_len": 87, "line": 1131}
{"problem": "A conveyor belt has packages that must be shipped from one port to another within days days.\nThe ith package on the conveyor belt has a weight of weights[i]. Each day, we load the ship with packages on the conveyor belt (in the order given by weights). We may not load more weight than the maximum weight capacity of the ship.\nReturn the least weight capacity of the ship that will result in all the packages on the conveyor belt being shipped within days days.", "tags": ["Array", "Binary Search"], "input": {"weights": [391, 113, 85, 457, 51, 267, 206, 19, 250, 166, 90, 138, 488, 359, 101], "days": 14}, "output": 488, "input_len": 82, "line": 715}
{"problem": "Given an integer n, return the number of positive integers in the range [1, n] that have at least one repeated digit.", "tags": ["Math", "DP"], "input": {"n": 51}, "output": 4, "input_len": 8, "line": 386}
{"problem": "Given an integer n, return the number of positive integers in the range [1, n] that have at least one repeated digit.", "tags": ["Math", "DP"], "input": {"n": 1472}, "output": 529, "input_len": 10, "line": 4576}
{"problem": "A valid parentheses string is either empty \"\", \"(\" + A + \")\", or A + B, where A and B are valid parentheses strings, and + represents string concatenation.\n\tFor example, \"\", \"()\", \"(())()\", and \"(()(()))\" are all valid parentheses strings.\nA valid parentheses string s is primitive if it is nonempty, and there does not exist a way to split it into s = A + B, with A and B nonempty valid parentheses strings.\nGiven a valid parentheses string s, consider its primitive decomposition: s = P1 + P2 + ... + Pk, where Pi are primitive valid parentheses strings.\nReturn s after removing the outermost parentheses of every primitive string in the primitive decomposition of s.", "tags": ["Stack", "String"], "input": {"s": "()((()())()()()((())())()((((((())()))())(())((()()))))()()()(()()))()(()(()())()())()(())()()(()()((())))()()((()(())))()(())(()()())()(()((((()()()())))(()())(())(())))((()())(())()(())(((()())(())()())(((()(())()()(((()()()))(()))))(()(()))(()(())))((((()()(((((((()))(((()((())()))(())()(())))))(((()((())((())()()()()()(())())))))()))))()(())())))))()((((((()()(()((()))()()))))()(()(()(()())()))()())(((()(((()())(()(()((())((())()))()(()))))()()()(((())(())()(()))((()()()))(())()))())(())()))))()()()()()(())(()(()((())()(((()))))((()()((()))())))((()(())())()((((()((()()((())((((())))(()((()(()()()(((()))())(((()())(((((()()()()()(((()(((((())())()))))))))(()()()(())))()(()()()))())((()((()))))))))())()(()))(())))()))(((()(()((((()()(()(((())(())))))))))(()(()(()()()))))((()((((()((()))))()))()))((((()))(()())(((())(()(())())((())((((()(((()()())()(((())))())()((((((((()(((()))((()()))()))))(())))))((()((())()(()()((((((((()(()())()(())))()))))(())()()()(())((((())()()((((()((())()))())()())()()((((())((((()))()))(((()))((())))()(((((((()(())((()())(()())(()))))(()(((())(()((((()()()()))))()))))(()())(((())()))(((())()()((()(()(()))(()(()()()))))))(())((()(((((()(())))()()))))))))))))))))))))))))))))))))))))))))))"}, "outputinput_len": 460, "line": 6132}
{"problem": "Given an array nums of integers, return the length of the longest arithmetic subsequence in nums.\nNote that:\n\tA subsequence is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.\n\tA sequence seq is arithmetic if seq[i + 1] - seq[i] are all the same value (for 0 <= i < seq.length - 1).", "tags": ["Array", "Hash Table", "Binary Search", "DP"], "input": {"nums": [216, 492, 128, 247, 263, 228, 173, 357, 170, 61, 202, 267, 13, 391, 302, 65, 283, 25, 45, 493, 272, 69, 51, 199, 10, 111, 417, 52, 422, 285, 8, 87, 97, 9, 426, 200, 458, 340, 324, 41, 208, 350, 151, 470, 148, 406, 237, 197, 370, 192, 99, 132, 132, 236, 79, 157, 416, 394, 361, 66, 390, 462, 94, 173, 372, 78, 34]}, "output": 4, "input_len": 317, "line": 9051}
{"problem": "Given an array nums of integers, return the length of the longest arithmetic subsequence in nums.\nNote that:\n\tA subsequence is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.\n\tA sequence seq is arithmetic if seq[i + 1] - seq[i] are all the same value (for 0 <= i < seq.length - 1).", "tags": ["Array", "Hash Table", "Binary Search", "DP"], "input": {"nums": [379, 364, 468, 205, 202, 154, 335, 403, 472, 248, 491, 461, 227, 131, 449, 425, 5, 32, 52, 58, 456, 41, 1, 485, 22, 10, 252, 21, 273, 206, 215]}, "output": 3, "input_len": 148, "line": 1959}
{"problem": "You are given two integer arrays nums1 and nums2. We write the integers of nums1 and nums2 (in the order they are given) on two separate horizontal lines.\nWe may draw connecting lines: a straight line connecting two numbers nums1[i] and nums2[j] such that:\n\tnums1[i] == nums2[j], and\n\tthe line we draw does not intersect any other connecting (non-horizontal) line.\nNote that a connecting line cannot intersect even at the endpoints (i.e., each number can only belong to one connecting line).\nReturn the maximum number of connecting lines we can draw in this way.", "tags": ["Array", "DP"], "input": {"nums1": [175, 316, 1675, 759, 560, 536, 1408, 372, 437, 1023, 1923, 224, 1038, 52, 1346, 1815, 1206, 373, 989, 138, 1206, 121, 1413, 572, 1871, 676, 371, 1579, 1494, 126, 1436, 903, 623, 1162, 478, 260, 1328, 1314, 1802, 1882, 185, 516, 1790, 137, 370, 1350, 607, 40, 381, 127, 309, 1974, 472, 1923, 458, 459, 467, 463, 1420, 1189, 1360, 1691, 30, 1916, 201, 1445, 1380, 704, 768, 1286, 91, 968, 1527, 848, 417, 579, 25, 924, 458, 10, 867, 240, 520, 1487, 1382, 105, 1068, 687, 741, 1775, 347, 1915, 1046, 804, 1018, 1426, 411, 1980, 1983, 398, 1936, 1561, 255, 1056, 186, 1537, 323, 566, 1168, 1409, 545, 372, 164, 780, 326, 1969, 480, 1649, 1947, 320, 546, 1273, 301, 320, 26, 1825, 1017, 1285, 1048, 467, 1411, 1669, 344, 1049, 198, 709, 879, 1922, 396, 1064, 1214, 543, 1958, 776, 435, 1267, 1686, 898, 40, 1009, 1333, 1944, 1410, 1294], "nums2": [1775]}, "output": 1, "input_len": 847, "line": 932}
{"problem": "You are given two integer arrays nums1 and nums2. We write the integers of nums1 and nums2 (in the order they are given) on two separate horizontal lines.\nWe may draw connecting lines: a straight line connecting two numbers nums1[i] and nums2[j] such that:\n\tnums1[i] == nums2[j], and\n\tthe line we draw does not intersect any other connecting (non-horizontal) line.\nNote that a connecting line cannot intersect even at the endpoints (i.e., each number can only belong to one connecting line).\nReturn the maximum number of connecting lines we can draw in this way.", "tags": ["Array", "DP"], "input": {"nums1": [964, 246, 1094, 1457, 968, 1791, 1883, 1021, 917, 650, 456, 676, 187, 234, 1095, 1211, 1943, 1665, 219, 1914, 229, 45, 1577, 1855, 561, 76, 1847, 526, 603, 593, 1381, 1857, 1566, 1875, 19, 1172, 1372, 287, 12, 1441, 1716, 259, 1557, 1559, 1110, 175, 1185, 1562, 112, 1178, 1855, 1266, 1921, 1722, 688, 1362, 287, 385, 267, 256, 797, 1774, 1272, 1242, 470, 539, 145, 727, 1473, 655, 1237, 1989, 1461, 676, 763, 912, 62, 550, 1753, 92, 137, 728, 104, 1565, 1495, 101, 1681, 212, 838, 1702, 1910, 906, 92, 354, 1358, 116, 389, 1807, 759, 635, 1087, 1953, 640, 89, 1770, 1197, 56, 1596, 749, 1816, 509, 472, 1323, 863, 1792, 379, 291, 1546, 1437, 1347, 857, 1864, 633, 1855, 63, 288, 243, 1727, 1832, 538, 1337, 1851, 1861, 147, 1651, 1185, 152, 859, 1992, 1358, 777, 208, 1172, 1857, 1818, 1583, 1840, 190, 1278, 627, 1681, 440, 1240, 1908, 1089, 485, 793, 295, 1868, 827, 580, 1478, 1926, 359, 868, 536, 819, 1559, 1212, 1238, 523, 364, 1444, 622, 670, 1851, 421, 1566, 1944, 1470, 1616, 1062, 826, 793, 258, 1647, 1042, 369, 748, 1381, 1500, 1380, 1555, 1331, 1093, 1279, 1286, 1491, 983, 1144, 568, 1654, 1907, 245, 234, 648, 1950, 1884, 622, 546, 1633, 1198, 1914, 872, 1288, 1436, 775, 468, 717, 143, 1728, 3, 532, 285, 921, 1673, 649, 455, 1863, 125, 165, 705, 526, 1913, 1168, 1210, 175, 1688, 1569, 1997, 357, 764, 1492, 1949, 262, 1858, 1424, 1801, 1371, 937, 267, 1676, 278, 279, 684, 1515, 1582, 617, 1649, 1006, 892, 1605, 1143, 741, 77, 1744, 1306, 35, 1634, 1437, 558, 874, 1946, 464, 412, 1513, 140, 1011, 1940, 1043, 365, 1046, 627, 1139, 950, 665, 1129, 696, 262, 722, 520, 1733, 316, 1862, 682, 1252, 200, 1924, 1777, 851, 274, 183, 1182, 1103, 773, 1522, 1252, 1730, 803, 364, 260, 1905, 1116, 1464, 938, 1496, 1646, 1428, 1926, 1581, 971, 1359, 959, 448, 474, 536, 1219, 899, 10, 1579, 245, 1866, 1542, 1480, 1316, 1901, 468, 1922, 910, 386, 898, 1110, 868, 592, 1169, 9, 1681, 713, 1684, 1983, 1475, 669, 795, 325, 1757, 237, 1401, 222, 820, 1664, 339, 1244, 1135, 37, 1197, 1280, 307, 1013, 1963, 1302, 1337, 1042, 893, 1868, 680, 740, 1791, 326, 704, 1648, 1188, 156, 711, 678, 646, 1805, 1294, 612, 1214, 499, 1288, 5, 713, 569, 1892, 1262, 1615, 927, 972, 1779, 1191, 1832, 1265, 1394, 377, 350, 1366, 1567, 1242, 1995, 923, 28, 399, 1179, 848, 1865, 275, 1982, 364, 1267, 1682, 690, 44, 1092, 891, 674, 1918, 1034, 1204, 454, 515, 386, 1313, 609, 844, 1756, 207, 813, 253, 1517, 1607, 1568, 1535, 244, 1369, 557, 1726, 1606, 1385, 1119, 1403, 1888, 380, 1947, 1301, 623, 643, 1877, 142, 628, 136, 590, 67, 1971, 214, 212, 815, 1346, 226, 805, 1128, 1031, 480, 1591, 1176, 1132, 475, 1336, 257, 806, 967, 393, 46, 1092, 840, 364, 532, 1265, 315, 814, 1242, 436, 477, 1159, 742], "nums2": [773, 503, 909]}, "output": 1, "input_len": 2724, "line": 5948}
{"problem": "You are given a string s consisting of lowercase English letters. A duplicate removal consists of choosing two adjacent and equal letters and removing them.\nWe repeatedly make duplicate removals on s until we no longer can.\nReturn the final string after all such duplicate removals have been made. It can be proven that the answer is unique.", "tags": ["Stack", "String"], "input": {"s": "jmpgcxftcdakrxfgjnzzjmvtkomgbgjgugnlbtpqcjywsxqtnwxcknapypkxgwixchvnopcmtfwxbxvcryauahypislfvzdzidmphomibyykipzfoxhsoiptxlihjmgtjysaueggqkwugcfetsdgsvoxgdfakopsiijzxrpvfevrgnctexuzykzrzyvkzpvefzjdfshlxecapkmathnbtkwisuthgkesnslqrdcbywsyjoeimzxgkxgzzmispmqbyolfghuheikbciewnrfjodlmznixsgwvtpnxfsctinywwevcesvcchroiazcnoutkvfpqfdsufwbmvfcihviwkxmkofjxhtfrykbulrhxnpegeguzmgaofgnkmtbhrlfakcnblfxkspsobrdusimvvgerqdzlhjnrcbtcesoevhkbdzprwnryaayxwagnxpnngxvyvqqmmcjoqmwtakvlcgbqqemcptuqyjjvwlbvhrqfcivcrvhrftdjztbcnhbcrhxmgkcejdwhnkfbgltrkqebqnpxdxvgparevvtwukaucgdzqviotdqflnhfahfowvpnsjqluckarhqfwdspmhsymahfcmjrokfamstktykggzljxmzqqqwaxgyxqnscajtwslebeunrcylnqycayazacaaaxyoloyegnfooiypqugkfqlhvxuanctvqlumjrjcqvhqmultzfgwniysimbugwbswrejdrkhdudxaklabvuvbncrkefahsjuiedynajpwxhrcolqzxtrefxixtdyrawkmlrluhxkbalkeibdciicfzgqeagkxegjjysfcoojhwiqkyypjlmridlkycleonjwzodkqvoazkpbaiumozqfgxhoijfdynjixkotdjxfpmtynqyitquaycjxrfpbcgfonysyshdliathicpcgwwwmcneqeaaredndxaxssubipnzgwvatfhctqbpshhfoatekzawsbdcbqvlvpgpgtusiggkggwzosstkocejlpynwlvsjhlxnlnijbkcmjezfuctzbucmlmrbhmdafqktsbhdtkgnwnlnusxdznmumqizebpafqwodoepxldicurosfoxecnlesgwgozisnaknwhybtwmkvxmxpdidfeqqfujwdakguqkfgwpsqthnadguegahdmrevmvehbkzytrkktdgluzmgvgjtbmgpccntwhfgmpibxrtlwvdvtdnecafkjaawsjjdnafgzjgercmtuqyofetzbmywdwijgzgllxjlbhxcxrmpvhnopyukontaabncnfqdjefbchliplbwhzmvnjonzchwjpweixxaiewfvoojwaxdhkyxiafpfjfepfadnmlyagxyvlfdbradkbhodyoxctmfsnogjzdysphqocohinagqyneqlruwkghofgzeiioneshohqoizlgpjsmhcmrtkclpyu"}, "output": "jmpgcxftcdakrxfgjnjmvtkomgbgjgugnlbtpqcjywsxqtnwxcknapypkxgwixchvnopcmtfwxbxvcryauahypislfvzdzidmphomibkipzfoxhsoiptxlihjmgtjysaueqkwugcfetsdgsvoxgdfakopsjzxrpvfevrgnctexuzykzrzyvkzpvefzjdfshlxecapkmathnbtkwisuthgkesnslqrdcbywsyjoeimzxgkxgmispmqbyolfghuheikbciewnrfjodlmznixsgwvtpnxfsctinyevcesvhroiazcnoutkvfpqfdsufwbmvfcihviwkxmkofjxhtfrykbulrhxnpegeguzmgaofgnkmtbhrlfakcnblfxkspsobrdusimgerqdzlhjnrcbtcesoevhkbdzprwnrxwagnxpgxvyvcjoqmwtakvlcgbemcptuqyvwlbvhrqfcivcrvhrftdjztbcnhbcrhxmgkcejdwhnkfbgltrkqebqnpxdxvgparetwukaucgdzqviotdqflnhfahfowvpnsjqluckarhqfwdspmhsymahfcmjrokfamstktykzljxmzqwaxgyxqnscajtwslebeunrcylnqycayazacaxyoloyegnfiypqugkfqlhvxuanctvqlumjrjcqvhqmultzfgwniysimbugwbswrejdrkhdudxaklabvuvbncrkefahsjuiedynajpwxhrcolqzxtrefxixtdyrawkmlrluhxkbalkeibdfzgqeagkxegysfcjhwiqkpjlmridlkycleonjwzodkqvoazkpbaiumozqfgxhoijfdynjixkotdjxfpmtynqyitquaycjxrfpbcgfonysyshdliathicpcgwmcneqeredndxaxubipnzgwvatfhctqbpsfoatekzawsbdcbqvlvpgpgtusikwzotkocejlpynwlvsjhlxnlnijbkcmjezfuctzbucmlmrbhmdafqktsbhdtkgnwnlnusxdznmumqizebpafqwodoepxldicurosfoxecnlesgwgozisnaknwhybtwmkvxmxpdidfefujwdakguqkfgwpsqthnadguegahdmrevmvehbkzytrtdgluzmgvgjtbmgpntwhfgmpibxrtlwvdvtdnecafkjwsdnafgzjgercmtuqyofetzbmywdwijgzgxjlbhxcxrmpvhnopyukontbncnfqdjefbchliplbwhzmvnjonzchwjpweiaiewfvjwaxdhkyxiafpfjfepfadnmlyagxyvlfdbradkbhodyoxctmfsnogjzdysphqocohinagqyneqlruwkghofgzeoneshohqoizlgpjsmhcmrtkclpyu", "input_len": 800, "line": 4418}
{"problem": "You are given an array of words where each word consists of lowercase English letters.\nwordA is a predecessor of wordB if and only if we can insert exactly one letter anywhere in wordA without changing the order of the other characters to make it equal to wordB.\n\tFor example, \"abc\" is a predecessor of \"abac\", while \"cba\" is not a predecessor of \"bcad\".\nA word chain is a sequence of words [word1, word2, ..., wordk] with k >= 1, where word1 is a predecessor of word2, word2 is a predecessor of word3, and so on. A single word is trivially a word chain with k == 1.\nReturn the length of the longest possible word chain with words chosen from the given list of words.", "tags": ["Array", "Hash Table", "Two Pointers", "String", "DP", "Sorting"], "input": {"words": ["kxvhzdqbn", "iehmstqm", "xlftsrxprug", "q", "qk", "ikqi", "gycsl", "moyvxa", "q", "jg", "sqg", "lrs", "dilaejrfwkko", "eimrnuxhibfeag", "k", "c", "poxu", "su", "o", "njd", "e"]}, "output": 2, "input_len": 104, "line": 1497}
{"problem": "You are given an array of words where each word consists of lowercase English letters.\nwordA is a predecessor of wordB if and only if we can insert exactly one letter anywhere in wordA without changing the order of the other characters to make it equal to wordB.\n\tFor example, \"abc\" is a predecessor of \"abac\", while \"cba\" is not a predecessor of \"bcad\".\nA word chain is a sequence of words [word1, word2, ..., wordk] with k >= 1, where word1 is a predecessor of word2, word2 is a predecessor of word3, and so on. A single word is trivially a word chain with k == 1.\nReturn the length of the longest possible word chain with words chosen from the given list of words.", "tags": ["Array", "Hash Table", "Two Pointers", "String", "DP", "Sorting"], "input": {"words": ["p", "ypn", "akfjnfmqqarbkr", "ijfluoyri", "fvuv", "u", "nqw", "byvmfbo", "ssurczvxdyd", "mdvolbaq", "wpxfzuu", "q", "ptqgwrzwq", "uuswmozs", "ck", "bmcusbfenun", "vn", "kzmz", "ofrctsietjaj", "umzyedalkeqlv", "itrqpwumt", "w", "a", "jmrkctmgek", "kstawtvqvcpvzj", "oml", "gnbal", "zr", "bmqcvemigmf", "meesrdbcxpuiadf", "imj"]}, "output": 1, "input_len": 183, "line": 3568}
{"problem": "On a campus represented as a 2D grid, there are n workers and m bikes, with n <= m. Each worker and bike is a 2D coordinate on this grid.\nWe assign one unique bike to each worker so that the sum of the Manhattan distances between each worker and their assigned bike is minimized.\nReturn the minimum possible sum of Manhattan distances between each worker and their assigned bike.\nThe Manhattan distance between two points p1 and p2 is Manhattan(p1, p2) = |p1.x - p2.x| + |p1.y - p2.y|.", "tags": ["Bit Manipulation", "Array", "DP", "Backtracking", "Bitmask DP"], "input": {"workers": [[820, 214], [107, 380], [785, 433]], "bikes": [[549, 116], [603, 296], [510, 918], [65, 106], [911, 486]]}, "output": 794, "input_len": 88, "line": 2130}
{"problem": "On a campus represented as a 2D grid, there are n workers and m bikes, with n <= m. Each worker and bike is a 2D coordinate on this grid.\nWe assign one unique bike to each worker so that the sum of the Manhattan distances between each worker and their assigned bike is minimized.\nReturn the minimum possible sum of Manhattan distances between each worker and their assigned bike.\nThe Manhattan distance between two points p1 and p2 is Manhattan(p1, p2) = |p1.x - p2.x| + |p1.y - p2.y|.", "tags": ["Bit Manipulation", "Array", "DP", "Backtracking", "Bitmask DP"], "input": {"workers": [[854, 129], [402, 51]], "bikes": [[294, 709], [610, 316], [746, 271], [722, 34], [371, 55], [925, 63], [359, 354]]}, "output": 172, "input_len": 95, "line": 7695}
{"problem": "On a campus represented as a 2D grid, there are n workers and m bikes, with n <= m. Each worker and bike is a 2D coordinate on this grid.\nWe assign one unique bike to each worker so that the sum of the Manhattan distances between each worker and their assigned bike is minimized.\nReturn the minimum possible sum of Manhattan distances between each worker and their assigned bike.\nThe Manhattan distance between two points p1 and p2 is Manhattan(p1, p2) = |p1.x - p2.x| + |p1.y - p2.y|.", "tags": ["Bit Manipulation", "Array", "DP", "Backtracking", "Bitmask DP"], "input": {"workers": [[934, 932], [63, 623], [542, 749]], "bikes": [[451, 196], [934, 705], [276, 248], [733, 532]]}, "output": 1223, "input_len": 78, "line": 882}
{"problem": "On a campus represented as a 2D grid, there are n workers and m bikes, with n <= m. Each worker and bike is a 2D coordinate on this grid.\nWe assign one unique bike to each worker so that the sum of the Manhattan distances between each worker and their assigned bike is minimized.\nReturn the minimum possible sum of Manhattan distances between each worker and their assigned bike.\nThe Manhattan distance between two points p1 and p2 is Manhattan(p1, p2) = |p1.x - p2.x| + |p1.y - p2.y|.", "tags": ["Bit Manipulation", "Array", "DP", "Backtracking", "Bitmask DP"], "input": {"workers": [[939, 961], [629, 620], [346, 332]], "bikes": [[97, 119], [509, 401], [579, 936], [644, 631], [568, 384], [544, 107]]}, "output": 643, "input_len": 98, "line": 5010}
{"problem": "On a campus represented as a 2D grid, there are n workers and m bikes, with n <= m. Each worker and bike is a 2D coordinate on this grid.\nWe assign one unique bike to each worker so that the sum of the Manhattan distances between each worker and their assigned bike is minimized.\nReturn the minimum possible sum of Manhattan distances between each worker and their assigned bike.\nThe Manhattan distance between two points p1 and p2 is Manhattan(p1, p2) = |p1.x - p2.x| + |p1.y - p2.y|.", "tags": ["Bit Manipulation", "Array", "DP", "Backtracking", "Bitmask DP"], "input": {"workers": [[532, 680], [690, 57]], "bikes": [[413, 854], [263, 470], [247, 522]]}, "output": 1133, "input_len": 58, "line": 239}
{"problem": "On a campus represented as a 2D grid, there are n workers and m bikes, with n <= m. Each worker and bike is a 2D coordinate on this grid.\nWe assign one unique bike to each worker so that the sum of the Manhattan distances between each worker and their assigned bike is minimized.\nReturn the minimum possible sum of Manhattan distances between each worker and their assigned bike.\nThe Manhattan distance between two points p1 and p2 is Manhattan(p1, p2) = |p1.x - p2.x| + |p1.y - p2.y|.", "tags": ["Bit Manipulation", "Array", "DP", "Backtracking", "Bitmask DP"], "input": {"workers": [[784, 812], [454, 897], [21, 223]], "bikes": [[676, 968], [999, 809], [865, 929], [426, 106], [471, 455], [936, 582]]}, "output": 1013, "input_len": 98, "line": 5010}
{"problem": "A confusing number is a number that when rotated 180 degrees becomes a different number with each digit valid.\nWe can rotate digits of a number by 180 degrees to form new digits.\n\tWhen 0, 1, 6, 8, and 9 are rotated 180 degrees, they become 0, 1, 9, 8, and 6 respectively.\n\tWhen 2, 3, 4, 5, and 7 are rotated 180 degrees, they become invalid.\nNote that after rotating a number, we can ignore leading zeros.\n\tFor example, after rotating 8000, we have 0008 which is considered as just 8.\nGiven an integer n, return the number of confusing numbers in the inclusive range [1, n].", "tags": ["Math", "Backtracking"], "input": {"n": 14}, "output": 3, "input_len": 8, "line": 124}
{"problem": "A confusing number is a number that when rotated 180 degrees becomes a different number with each digit valid.\nWe can rotate digits of a number by 180 degrees to form new digits.\n\tWhen 0, 1, 6, 8, and 9 are rotated 180 degrees, they become 0, 1, 9, 8, and 6 respectively.\n\tWhen 2, 3, 4, 5, and 7 are rotated 180 degrees, they become invalid.\nNote that after rotating a number, we can ignore leading zeros.\n\tFor example, after rotating 8000, we have 0008 which is considered as just 8.\nGiven an integer n, return the number of confusing numbers in the inclusive range [1, n].", "tags": ["Math", "Backtracking"], "input": {"n": 6565}, "output": 274, "input_len": 10, "line": 6900}
{"problem": "A confusing number is a number that when rotated 180 degrees becomes a different number with each digit valid.\nWe can rotate digits of a number by 180 degrees to form new digits.\n\tWhen 0, 1, 6, 8, and 9 are rotated 180 degrees, they become 0, 1, 9, 8, and 6 respectively.\n\tWhen 2, 3, 4, 5, and 7 are rotated 180 degrees, they become invalid.\nNote that after rotating a number, we can ignore leading zeros.\n\tFor example, after rotating 8000, we have 0008 which is considered as just 8.\nGiven an integer n, return the number of confusing numbers in the inclusive range [1, n].", "tags": ["Math", "Backtracking"], "input": {"n": 131}, "output": 26, "input_len": 9, "line": 670}
{"problem": "A confusing number is a number that when rotated 180 degrees becomes a different number with each digit valid.\nWe can rotate digits of a number by 180 degrees to form new digits.\n\tWhen 0, 1, 6, 8, and 9 are rotated 180 degrees, they become 0, 1, 9, 8, and 6 respectively.\n\tWhen 2, 3, 4, 5, and 7 are rotated 180 degrees, they become invalid.\nNote that after rotating a number, we can ignore leading zeros.\n\tFor example, after rotating 8000, we have 0008 which is considered as just 8.\nGiven an integer n, return the number of confusing numbers in the inclusive range [1, n].", "tags": ["Math", "Backtracking"], "input": {"n": 5029}, "output": 226, "input_len": 10, "line": 5668}
{"problem": "A confusing number is a number that when rotated 180 degrees becomes a different number with each digit valid.\nWe can rotate digits of a number by 180 degrees to form new digits.\n\tWhen 0, 1, 6, 8, and 9 are rotated 180 degrees, they become 0, 1, 9, 8, and 6 respectively.\n\tWhen 2, 3, 4, 5, and 7 are rotated 180 degrees, they become invalid.\nNote that after rotating a number, we can ignore leading zeros.\n\tFor example, after rotating 8000, we have 0008 which is considered as just 8.\nGiven an integer n, return the number of confusing numbers in the inclusive range [1, n].", "tags": ["Math", "Backtracking"], "input": {"n": 54}, "output": 6, "input_len": 8, "line": 178}
{"problem": "A confusing number is a number that when rotated 180 degrees becomes a different number with each digit valid.\nWe can rotate digits of a number by 180 degrees to form new digits.\n\tWhen 0, 1, 6, 8, and 9 are rotated 180 degrees, they become 0, 1, 9, 8, and 6 respectively.\n\tWhen 2, 3, 4, 5, and 7 are rotated 180 degrees, they become invalid.\nNote that after rotating a number, we can ignore leading zeros.\n\tFor example, after rotating 8000, we have 0008 which is considered as just 8.\nGiven an integer n, return the number of confusing numbers in the inclusive range [1, n].", "tags": ["Math", "Backtracking"], "input": {"n": 1253}, "output": 154, "input_len": 10, "line": 3828}
{"problem": "A confusing number is a number that when rotated 180 degrees becomes a different number with each digit valid.\nWe can rotate digits of a number by 180 degrees to form new digits.\n\tWhen 0, 1, 6, 8, and 9 are rotated 180 degrees, they become 0, 1, 9, 8, and 6 respectively.\n\tWhen 2, 3, 4, 5, and 7 are rotated 180 degrees, they become invalid.\nNote that after rotating a number, we can ignore leading zeros.\n\tFor example, after rotating 8000, we have 0008 which is considered as just 8.\nGiven an integer n, return the number of confusing numbers in the inclusive range [1, n].", "tags": ["Math", "Backtracking"], "input": {"n": 289}, "output": 40, "input_len": 9, "line": 987}
{"problem": "A confusing number is a number that when rotated 180 degrees becomes a different number with each digit valid.\nWe can rotate digits of a number by 180 degrees to form new digits.\n\tWhen 0, 1, 6, 8, and 9 are rotated 180 degrees, they become 0, 1, 9, 8, and 6 respectively.\n\tWhen 2, 3, 4, 5, and 7 are rotated 180 degrees, they become invalid.\nNote that after rotating a number, we can ignore leading zeros.\n\tFor example, after rotating 8000, we have 0008 which is considered as just 8.\nGiven an integer n, return the number of confusing numbers in the inclusive range [1, n].", "tags": ["Math", "Backtracking"], "input": {"n": 39}, "output": 6, "input_len": 8, "line": 174}
{"problem": "Given two strings str1 and str2, return the shortest string that has both str1 and str2 as subsequences. If there are multiple valid strings, return any of them.\nA string s is a subsequence of string t if deleting some number of characters from t (possibly 0) results in the string s.", "tags": ["String", "DP"], "input": {"str1": "ctrpnh", "str2": "vhuccqnopuemhzjmmdjdsjzjlkqvxelppouyrdepkjaufrckebsoxfkwckgvjuoocziuukwaeswspzsbixbedsfygccomwpfwzdblaonmqfdcqnhsbcohrxsqjpdkebhmxonwnogwmnokocnspqiwkwbmiwizybzsryrdwqtqllpcgtretzbfukxhnveqczbaymphpetwcfhzkskrhicdvylrduhvhxvqnwdwxwlehhvyogkvssrtrxrqxyhxzyhmyirugpezviaqjhtcsgkjexlolcffespbncqtpmttwmjuqeiheozumgjaydoitgioxtgzhgegzthbekyazcjwamgrbtzvqabgcmrmfpsxwl"}, "output": "vhuccqnopuemhzjmmdjdsjzjlkqvxelppouyrdepkjaufrckebsoxfkwckgvjuoocziuukwaeswspzsbixbedsfygccomwpfwzdblaonmqfdcqnhsbcohrxsqjpdkebhmxonwnogwmnokocnspqiwkwbmiwizybzsryrdwqtqllpcgtretzbfukxhnveqczbaymphpetwcfhzkskrhicdvylrduhvhxvqnwdwxwlehhvyogkvssrtrxrqxyhxzyhmyirugpezviaqjhtcsgkjexlolcffespbncqtpmttwmjuqeiheozumgjaydoitgioxtgzhgegzthbekyazcjwamgrbtzvqabgcmrmfpsxwl", "input_len": 213, "line": 9095}
{"problem": "Given two strings str1 and str2, return the shortest string that has both str1 and str2 as subsequences. If there are multiple valid strings, return any of them.\nA string s is a subsequence of string t if deleting some number of characters from t (possibly 0) results in the string s.", "tags": ["String", "DP"], "input": {"str1": "frnwuhabfngqazkcasdxufmrchffsfspfareqfjnarhfrvmctqgzakonuyyoxccnempcswpwwslzknrdkftcnzfrcnryhowbjhv", "str2": "ioxgz"}, "output": "iofrnwuhabfngqazkcasdxufmrchffsfspfareqfjnarhfrvmctqgzakonuyyoxccnempcswpwwslzknrdkftcnzfrcnryhowbjhv", "input_len": 69, "line": 2398}
{"problem": "Given a 2D grid of 0s and 1s, return the number of elements in\u00a0the largest square\u00a0subgrid that has all 1s on its border, or 0 if such a subgrid\u00a0doesn't exist in the grid.", "tags": ["Array", "DP", "Matrix"], "input": {"grid": [[1, 0], [1, 0], [0, 1], [0, 1], [0, 0], [1, 0], [0, 0], [1, 0], [0, 0], [0, 1], [0, 1], [0, 0], [1, 0], [1, 1], [1, 1], [0, 0], [1, 1], [0, 1], [1, 1], [0, 1], [1, 0], [1, 1], [0, 1], [0, 1], [1, 0], [0, 0], [0, 0], [1, 1], [0, 1], [1, 1], [1, 1], [1, 1], [1, 0], [0, 0], [0, 1], [0, 0], [1, 0], [1, 1], [1, 1], [1, 0], [0, 1], [0, 1], [1, 0]]}, "output": 4, "input_len": 263, "line": 504}
{"problem": "Given two strings text1 and text2, return the length of their longest common subsequence. If there is no common subsequence, return 0.\nA subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.\n\tFor example, \"ace\" is a subsequence of \"abcde\".\nA common subsequence of two strings is a subsequence that is common to both strings.", "tags": ["String", "DP"], "input": {"text1": "h", "text2": "kvnlbvkvmjjpzefeqjzsigzvvtkxkmtnyeezsnwmiabvnjzgcvxawtaytzmmpvlnnwrxjhdvqtkmpbjvnvsudzecfacjzefwrefjsuteutruqeuzsiavutoilkrvcdbihfursfbmvubpmvvdzytfolaybpfotykovfzwdoennyxhpllrzzqsniaofvcicpkrcdilexifvspyeiccpipizfakzaxqgvpanpubshmvnhwkcdzfbbxghfvtvhvqegdwohralglkwmyoatfpovmxkodllqtvmkhyrkkxotnxbxuiozkpviaivtgxdaoafdnsunvmwgjeojcjrzvrsmjpvwngkezbptrffcznhmdfqxnzqiwhsaiybrnlwksnlcffosegenwugyavikfyboaatxeufqmkgjbwfeksxgraythqoxatrarimvqriwdombblqenyhyfnwgjxyamloyacmrndulugzsgomciynwyephmxnbgcfqtbjwxjicratdpqonkrljsvmhncebalctrwovwgfmucdgxwpyeufsiyqodlbffggtysmwutzenbtnhbmxjtzmrxmnigiqwrsryniyyfpevxxtqskpybngyhimslfwccrjguppqdjnz"}, "output": 1, "input_len": 357, "line": 1916}
{"problem": "Given two strings text1 and text2, return the length of their longest common subsequence. If there is no common subsequence, return 0.\nA subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.\n\tFor example, \"ace\" is a subsequence of \"abcde\".\nA common subsequence of two strings is a subsequence that is common to both strings.", "tags": ["String", "DP"], "input": {"text1": "h", "text2": "kfvqbupxdnmwpsgfneubigpcagecsxbjqpeyqiptgmfdpuoxdwagcpeabnkgzgjdslumgrbwzzakeefteswoobdgdgrsvxmuxjgfeywtrupvlmazlguamugjflspllitxkntwlykjxxxtqzghtqbvqtnvdhfjszzejslrqdxxybgzwfbbncyntiqfibwpjczfdfwzdpnccbrhjocfjnxfiwfoacyldudfjetnhhkkeiyffswqdqpxnbbmpxedgmivhonfpwpozpavitgkqgsxjylvfmnorbrbdvpjocvrfmpytrqrmziwqldkmipygemefybimlczcmpqffwxvbjwgotxutvemwmysetahungobxtxrtgbrrorrvczkvehzlpgtfghbzavudaqbhbultofvuroeeuiommfzbnyfnyljgcdzyjtifenmnorpoyvvgdqblpnpskjcwehbpfqglheyoiehmrnonrtcaohcowjjzprasqqkuodisinxszputnosmpoexptyqxvuxydrugkvhxbzfavbrmsllfxndfhfblotoygorebbpwfotsudbhmxmimbntbsgfzbxydfolzcrrhetyjllkftxwqqdlfmxwtnrildagsuvzhmckapcqzdkjqmywprycmosbqkpjkwayeztdazobkvjaxkqedqgnpaqqrecuuanwsjgvnjchppghwpalvvcpijtwfcwuapkdioxheqkuddthljrhbnhhddwwketeigjdveeeznclkjlucmztoxbcwursmndcjqwheiknwmqpghqpzyxxincxwlcwqnbnzkmqgslzqjbkcipatdjahzsmhvstowzmdsyqzlbukkppfkvomfszfnzooucodccwumszfnlgacibuulgedwndtcaxpxihbbjxkfnzbbswhjpgiytgnlrzdkjeuknyxkxabvq"}, "output": 1, "input_len": 517, "line": 2870}
{"problem": "You are given a string text. You can swap two of the characters in the text.\nReturn the length of the longest substring with repeated characters.", "tags": ["Hash Table", "String", "Sliding Window"], "input": {"text": "lcpalntrwtqzztbwwnstuzksttttklxumqaebvicsoawtxidqkbqvdhbbwzmkeztiedc"}, "output": 5, "input_len": 43, "line": 708}
{"problem": "Given a string s, return the last substring of s in lexicographical order.", "tags": ["Two Pointers", "String"], "input": {"s": "glswdmcijqxycylrtivaxgxprkpmqnxiigoxmelixltwxdzehqarxqxjllgvdfpojayrwowxbkpixobgqfomggtdumarxcssmcepmwhozniwhfszlwwvieowkxperqlhkilxrueoxhpohvaxuntqfikmlwzkhab"}, "output": "zniwhfszlwwvieowkxperqlhkilxrueoxhpohvaxuntqfikmlwzkhab", "input_len": 90, "line": 1377}
{"problem": "You are given a string s, and an array of pairs of indices in the string\u00a0pairs\u00a0where\u00a0pairs[i] =\u00a0[a, b]\u00a0indicates 2 indices(0-indexed) of the string.\nYou can\u00a0swap the characters at any pair of indices in the given\u00a0pairs\u00a0any number of times.\nReturn the\u00a0lexicographically smallest string that s\u00a0can be changed to after using the swaps.", "tags": ["DFS", "BFS", "Union Find", "Array", "Hash Table", "String", "Sorting"], "input": {"s": "ps", "pairs": [[1, 0], [0, 0], [1, 0], [0, 0], [1, 0], [1, 1], [1, 1], [0, 0], [1, 0], [1, 0], [0, 0], [0, 0], [1, 0], [0, 0], [0, 1], [1, 0], [0, 1], [1, 0], [1, 1], [1, 0], [0, 1], [1, 1], [0, 0], [0, 1], [1, 0], [0, 1], [0, 0], [1, 0], [0, 0], [1, 0], [0, 1], [1, 0], [1, 0], [1, 1], [0, 0], [0, 1], [0, 1], [0, 1], [1, 1], [1, 0], [1, 0], [0, 1], [1, 0]]}, "output": "ps", "input_len": 269, "line": 405}
{"problem": "You are given a string s, and an array of pairs of indices in the string\u00a0pairs\u00a0where\u00a0pairs[i] =\u00a0[a, b]\u00a0indicates 2 indices(0-indexed) of the string.\nYou can\u00a0swap the characters at any pair of indices in the given\u00a0pairs\u00a0any number of times.\nReturn the\u00a0lexicographically smallest string that s\u00a0can be changed to after using the swaps.", "tags": ["DFS", "BFS", "Union Find", "Array", "Hash Table", "String", "Sorting"], "input": {"s": "potujxe", "pairs": [[3, 2], [5, 2], [1, 6], [3, 2], [3, 2], [3, 4], [6, 2], [3, 0], [1, 6], [4, 2], [0, 1], [6, 6], [2, 3], [4, 6], [1, 4], [5, 3], [0, 0], [4, 1], [2, 3], [6, 6], [3, 2], [1, 1], [2, 4], [1, 6], [6, 2], [4, 2], [6, 6], [5, 4], [2, 0], [5, 6], [1, 2], [6, 1], [0, 5], [6, 1], [6, 6], [5, 1], [2, 0], [6, 3], [1, 5], [5, 6], [6, 0], [1, 6], [6, 3], [4, 5], [0, 3], [2, 6], [0, 0], [1, 2], [3, 2], [4, 0], [5, 3], [3, 6], [6, 3], [6, 6], [6, 0], [3, 0], [6, 2], [5, 0], [3, 0], [1, 2], [2, 4], [1, 4], [1, 2], [4, 3], [2, 0], [1, 3], [3, 2], [3, 1], [4, 5], [0, 1], [0, 2], [2, 1], [0, 4], [3, 4], [4, 3], [5, 0], [4, 2], [1, 2], [6, 0], [0, 6], [3, 2], [2, 1], [6, 5], [5, 0], [5, 5], [1, 2], [3, 3], [4, 1], [5, 6], [1, 5], [6, 1], [2, 6], [2, 5], [4, 2], [4, 0], [3, 3], [1, 4], [0, 1], [3, 1], [0, 1], [5, 0], [1, 4], [3, 6], [1, 0], [2, 0], [2, 1], [6, 3], [3, 6], [4, 1], [2, 5], [5, 5], [6, 4], [1, 6], [5, 2], [0, 5], [1, 1], [2, 3], [2, 5], [3, 6], [2, 2], [3, 1], [0, 3], [6, 4], [3, 3], [6, 3], [3, 0], [4, 1], [6, 0], [1, 0], [5, 1], [0, 5], [4, 4], [0, 5], [4, 5], [1, 5], [1, 4], [3, 3], [3, 1], [3, 1], [3, 6], [6, 5], [2, 2], [1, 0], [6, 0], [3, 3], [3, 4], [4, 3], [0, 1], [1, 0], [1, 2], [4, 1], [3, 6], [3, 6], [1, 5], [4, 4], [2, 6], [0, 1], [4, 4], [0, 1], [2, 4]]}, "output": "ejoptux", "input_len": 973, "line": 1877}
{"problem": "You are given a string s, and an array of pairs of indices in the string\u00a0pairs\u00a0where\u00a0pairs[i] =\u00a0[a, b]\u00a0indicates 2 indices(0-indexed) of the string.\nYou can\u00a0swap the characters at any pair of indices in the given\u00a0pairs\u00a0any number of times.\nReturn the\u00a0lexicographically smallest string that s\u00a0can be changed to after using the swaps.", "tags": ["DFS", "BFS", "Union Find", "Array", "Hash Table", "String", "Sorting"], "input": {"s": "ybqfhlgqhqhisedyg", "pairs": [[12, 3], [13, 14], [9, 2], [2, 10], [1, 13], [3, 0], [0, 12], [8, 3], [0, 7], [5, 15], [3, 2], [7, 14], [10, 4], [1, 13], [15, 3], [13, 2], [0, 8], [0, 14], [8, 16], [11, 5], [2, 7], [6, 0], [13, 14], [14, 11], [3, 1], [11, 16], [9, 8], [10, 15], [6, 12], [0, 4], [2, 5], [7, 6], [14, 14], [3, 8], [14, 3], [3, 14], [4, 4], [8, 0], [6, 13], [11, 7], [5, 9], [5, 11], [10, 0], [5, 11], [15, 2], [4, 7], [15, 8], [12, 4], [11, 16], [10, 10], [2, 11], [11, 10], [2, 9], [6, 14], [11, 11], [10, 0], [16, 16], [16, 0], [14, 5], [12, 12], [11, 14], [4, 8], [12, 5], [9, 8], [12, 0], [11, 15], [14, 14], [2, 16], [8, 9], [8, 12], [3, 1], [13, 8], [12, 2], [12, 2], [4, 16], [13, 8], [9, 13], [4, 4], [15, 16], [13, 8], [2, 14], [7, 12], [4, 6], [7, 7], [9, 10], [8, 8], [11, 6], [8, 8], [8, 2], [10, 16], [5, 6], [4, 6], [15, 3], [14, 8], [11, 10], [15, 14], [12, 13], [8, 5], [13, 7], [12, 6], [14, 10], [15, 9], [6, 13], [6, 8], [11, 13], [7, 5], [1, 5], [9, 3], [7, 0], [4, 16], [0, 5], [0, 0], [14, 10], [15, 1], [0, 13], [16, 8], [9, 0], [10, 1], [16, 1], [4, 7], [15, 11], [15, 10], [1, 11], [16, 1], [7, 11], [10, 5], [11, 10], [3, 4], [7, 1], [15, 14], [13, 12], [14, 9], [5, 7], [15, 12], [14, 10], [0, 9], [10, 16], [11, 12], [13, 10], [7, 10], [10, 15], [2, 3], [2, 11], [1, 9], [11, 2], [15, 8], [7, 0], [13, 6], [10, 12], [1, 7], [8, 9], [3, 12], [11, 14], [8, 4], [4, 6], [15, 10], [9, 9], [13, 9], [12, 8], [8, 7], [3, 0], [3, 8], [3, 16], [2, 7], [11, 16], [3, 0], [13, 8], [6, 7], [1, 13], [2, 8], [8, 9], [12, 3], [10, 1], [14, 7], [15, 10], [15, 13], [3, 6], [5, 7], [3, 9], [9, 16], [13, 15], [12, 5], [0, 9], [13, 3], [4, 11], [2, 1], [15, 4], [0, 6], [8, 15], [6, 8], [4, 2], [6, 6], [0, 6], [6, 15], [0, 15], [15, 0], [4, 10], [11, 12], [4, 8], [15, 2], [7, 8], [2, 1], [6, 3], [5, 2], [1, 4], [7, 6], [13, 14], [12, 0], [8, 7], [13, 0], [13, 3], [9, 3], [16, 6], [9, 5], [12, 15], [7, 14], [0, 14], [8, 7], [14, 14], [8, 10], [15, 10], [13, 7], [9, 6], [13, 7], [10, 3], [9, 14], [1, 13], [7, 1], [3, 3], [13, 12], [9, 4], [8, 4], [8, 11], [6, 8], [6, 14], [3, 14], [16, 6], [0, 9], [2, 12], [1, 14], [5, 8], [14, 8], [15, 14], [8, 3], [1, 16], [10, 4], [9, 3], [15, 4], [1, 6], [10, 0], [4, 0], [2, 9], [7, 13], [0, 11], [9, 5], [0, 7], [9, 10], [10, 1], [0, 0], [12, 10], [9, 15], [4, 1], [15, 2], [16, 4], [11, 11], [10, 6], [9, 10], [8, 2], [0, 10], [2, 11], [6, 2], [8, 14], [5, 8], [2, 3], [13, 8], [8, 13], [16, 0], [3, 12]]}, "output": "bdefgghhhilqqqsyy", "input_len": 1912, "line": 3498}
{"problem": "You are given a string s, and an array of pairs of indices in the string\u00a0pairs\u00a0where\u00a0pairs[i] =\u00a0[a, b]\u00a0indicates 2 indices(0-indexed) of the string.\nYou can\u00a0swap the characters at any pair of indices in the given\u00a0pairs\u00a0any number of times.\nReturn the\u00a0lexicographically smallest string that s\u00a0can be changed to after using the swaps.", "tags": ["DFS", "BFS", "Union Find", "Array", "Hash Table", "String", "Sorting"], "input": {"s": "vmgajtabefzhdxwrvlnviqmvbvdqnjycwtddmanfrdnvhsblpmhydtlynbdyduyrolvsjzdgbaxkuadasvetjdzbccsuknohtwjsqlzujcjhfpftkfvwxxwxydeuzcqiaznvuomztvsqfwsppcqclkhbwihoxkrrjmrmcwvxgmyvnalmscoscxgqhhktczkytpmgmzbcdojdquvuzupiuigsdrcdvvlbhtkysosicotnbvsocwoagugtwjiyqtwlvipijomsvqzsufowoiaxymkansssqtjpnwyhzfqnbroyzpphupfdhbryingrantldmcwenklqzurpknrfrzsmquhhxzqmybhanyqxmbodbscayixrmdyviatyywukbbndziqgfguuhliiifoccyscdnncohmhkmippaiusmiaqhokfcdrkxebdbtcplyixxelrholoihotnvodpdhyhfwemhfjowcucrmvvhqsgjymszednjzpvxvwzzvllxevsjdhzndbqjoknprtqftsgylgekidyebqavqxhkmwkqsrntydzjgcukceagtbnpzxjxaquypfahrvuxktjywstcrpatchhqgfodhpildxfjtgqdawyayfujjtiqujosgjawnumvjdsmwefcoetyzjzzheyyhgehwspvwbdm", "pairs": [[36, 311], [263, 453], [280, 483]]}, "output": "vmgajtabefzhdxwrvlnviqmvbvdqnjycwtddmanfrdnvhsblpmhydtlynbdyduyrolvsjzdgbaxkuadasvetjdzbccsuknohtwjsqlzujcjhfpftkfvwxxwxydeuzcqiaznvuomztvsqfwsppcqclkhbwihoxkrrjmrmcwvxgmyvnalmscoscxgqhhktczkytpmgmzbcdojdquvuzupiuigsdrcdvvlbhtkysosicotnbvsocwoagugtwjiyqtwlvipijomovqzsufowoiaxymkahsssqtjpnwyhzfqnbroyzpphupfdhbryingrantldmcwenklqzurpknrfrzsmquhhxzqmybhanyqxmbodbscayixrmdyviatyywukbbndziqgfguuhliiifoccyscdnncohmhkmippaiusmiaqhokfcdrkxebdbtcplyixxelrholsihotnvodpdhyhfwemhfjowcucrmvvnqsgjymszednjzpvxvwzzvllxevsjdhzndbqjoknprtqftsgylgekidyebqavqxhkmwkqsrntydzjgcukceagtbnpzxjxaquypfahrvuxktjywstcrpatchhqgfodhpildxfjtgqdawyayfujjtiqujosgjawnumvjdsmwefcoetyzjzzheyyhgehwspvwbdm", "input_len": 398, "line": 6125}
{"problem": "You are given a string s, and an array of pairs of indices in the string\u00a0pairs\u00a0where\u00a0pairs[i] =\u00a0[a, b]\u00a0indicates 2 indices(0-indexed) of the string.\nYou can\u00a0swap the characters at any pair of indices in the given\u00a0pairs\u00a0any number of times.\nReturn the\u00a0lexicographically smallest string that s\u00a0can be changed to after using the swaps.", "tags": ["DFS", "BFS", "Union Find", "Array", "Hash Table", "String", "Sorting"], "input": {"s": "gnerauniqmbfgauhfzafbzaaentunvboykhdesermeouvwygxmdvzkzxaqnxeecjdhlftstrtogvkergbxgixeiprtnstaegetyxglwrxglftujhjfgecpqapqplfsorvaxognzeutnjrrlvjafmhocbiyrgdfmxjzusstmmjiixbeyqmgwiajsxtpmxkdirilljhnmoatatsenbszcdmdwgoiultvyenydbxuqhabbebsaue", "pairs": [[240, 10], [118, 120], [184, 210], [183, 30], [181, 93], [152, 205], [159, 17], [128, 57], [128, 94], [232, 121], [162, 55], [203, 185], [233, 93], [146, 129], [59, 182], [166, 36], [56, 94], [66, 57], [97, 1], [125, 49], [157, 106], [18, 6], [31, 71], [232, 44], [7, 152], [31, 146], [13, 39], [149, 32], [20, 55], [221, 35], [201, 125], [18, 57], [83, 66], [203, 85], [10, 159], [88, 216], [201, 178], [127, 197], [1, 196], [98, 140], [173, 55], [230, 91], [40, 98], [202, 208], [142, 109], [88, 90], [175, 154], [211, 218], [24, 60], [137, 161], [34, 216], [171, 102], [160, 171], [103, 111], [176, 37]]}, "output": "gherauaeqmbfgauhfeafbzaaentunvbaokhdemermeouawygxmdvzkzeeinseecjdhlftstftogvkergbxgnxeipntoqtaqgenrxgljhxgfftljrjfgecppaqqplfsonvoxognzeutnjyruvjarmhycbiyqgdlmxwzusstmmjiixbxyrsgtiabxxcpmxkdirilljtrmoawatsinbsztdmdwgriultvyenydbxushvjbebsauz", "input_len": 631, "line": 2811}
{"problem": "You are given a string s, and an array of pairs of indices in the string\u00a0pairs\u00a0where\u00a0pairs[i] =\u00a0[a, b]\u00a0indicates 2 indices(0-indexed) of the string.\nYou can\u00a0swap the characters at any pair of indices in the given\u00a0pairs\u00a0any number of times.\nReturn the\u00a0lexicographically smallest string that s\u00a0can be changed to after using the swaps.", "tags": ["DFS", "BFS", "Union Find", "Array", "Hash Table", "String", "Sorting"], "input": {"s": "cheybkqubh", "pairs": [[9, 4]]}, "output": "cheybkqubh", "input_len": 22, "line": 111}
{"problem": "You are given a string s, and an array of pairs of indices in the string\u00a0pairs\u00a0where\u00a0pairs[i] =\u00a0[a, b]\u00a0indicates 2 indices(0-indexed) of the string.\nYou can\u00a0swap the characters at any pair of indices in the given\u00a0pairs\u00a0any number of times.\nReturn the\u00a0lexicographically smallest string that s\u00a0can be changed to after using the swaps.", "tags": ["DFS", "BFS", "Union Find", "Array", "Hash Table", "String", "Sorting"], "input": {"s": "wovayyugixbfsnlwbg", "pairs": [[17, 5], [9, 16], [8, 0], [9, 7], [1, 13], [1, 12], [16, 6], [9, 7], [12, 1], [4, 13], [11, 13], [8, 11], [12, 8], [0, 10], [1, 11], [8, 6], [15, 17], [9, 11], [3, 0], [1, 16], [6, 10], [2, 1], [4, 13], [16, 1], [11, 16], [16, 8], [10, 7], [5, 13], [1, 11], [10, 1], [13, 4], [3, 15], [14, 5], [8, 13], [7, 4], [4, 6], [4, 7], [11, 3], [14, 3], [2, 5], [14, 3]]}, "output": "abbfggilnosuvwwxyy", "input_len": 301, "line": 709}
{"problem": "You are given a string s, and an array of pairs of indices in the string\u00a0pairs\u00a0where\u00a0pairs[i] =\u00a0[a, b]\u00a0indicates 2 indices(0-indexed) of the string.\nYou can\u00a0swap the characters at any pair of indices in the given\u00a0pairs\u00a0any number of times.\nReturn the\u00a0lexicographically smallest string that s\u00a0can be changed to after using the swaps.", "tags": ["DFS", "BFS", "Union Find", "Array", "Hash Table", "String", "Sorting"], "input": {"s": "csteq", "pairs": [[3, 1], [1, 3], [2, 1], [0, 1], [0, 3], [2, 4], [4, 1], [0, 2], [4, 3], [3, 2], [1, 4], [3, 3], [2, 2], [3, 3], [2, 4], [0, 4], [3, 2], [3, 2], [4, 4], [2, 3], [3, 1], [2, 4], [2, 2], [0, 4], [2, 3], [0, 0], [3, 0], [2, 3], [2, 2], [1, 2], [4, 0], [4, 0], [1, 1], [0, 0], [0, 0], [2, 4], [3, 1], [1, 0], [0, 0], [0, 1], [3, 2], [1, 3], [4, 1], [4, 3], [1, 3], [2, 3], [2, 4], [1, 4], [1, 0], [3, 4], [3, 4], [3, 4], [2, 0], [0, 2], [3, 3], [2, 2], [3, 2], [4, 1], [1, 0], [4, 2], [2, 2], [1, 0], [0, 1], [3, 2], [2, 4], [2, 4], [1, 1], [3, 4], [0, 4], [3, 0], [1, 0], [0, 1], [1, 4], [0, 4], [0, 3], [3, 3], [4, 2], [1, 3], [2, 1], [1, 3], [2, 1], [0, 2], [3, 2], [0, 4], [0, 1], [3, 4], [3, 4], [3, 1], [1, 2], [1, 0], [2, 1], [0, 4], [4, 2], [0, 4], [2, 2], [0, 4], [4, 2], [3, 4], [0, 3], [2, 3], [2, 1], [1, 1], [1, 4], [1, 3], [1, 1], [2, 0], [0, 4], [1, 3], [0, 4], [2, 4], [4, 3], [1, 2], [4, 4], [4, 2], [4, 1], [3, 2], [3, 3], [1, 2], [0, 4], [1, 3], [3, 2], [3, 2], [3, 2], [4, 2], [3, 0], [0, 1], [0, 2], [1, 3], [0, 2], [0, 4]]}, "output": "ceqst", "input_len": 793, "line": 1470}
{"problem": "You are given a string s, and an array of pairs of indices in the string\u00a0pairs\u00a0where\u00a0pairs[i] =\u00a0[a, b]\u00a0indicates 2 indices(0-indexed) of the string.\nYou can\u00a0swap the characters at any pair of indices in the given\u00a0pairs\u00a0any number of times.\nReturn the\u00a0lexicographically smallest string that s\u00a0can be changed to after using the swaps.", "tags": ["DFS", "BFS", "Union Find", "Array", "Hash Table", "String", "Sorting"], "input": {"s": "o", "pairs}, "output": "o", "input_len": 1967, "line": 1976}
{"problem": "You are given two strings s and t of the same length and an integer maxCost.\nYou want to change s to t. Changing the ith character of s to ith character of t costs |s[i] - t[i]| (i.e., the absolute difference between the ASCII values of the characters).\nReturn the maximum length of a substring of s that can be changed to be the same as the corresponding substring of t with a cost less than or equal to maxCost. If there is no substring from s that can be changed to its corresponding substring from t, return 0.", "tags": ["String", "Binary Search", "Prefix Sum", "Sliding Window"], "input": {"s": "zrnlxylzpjhobuytnefmmdhiscljzyrrybzfaqxfcfzvfgtjcyfakzeipdjuqhxxphqtslgcmkeeqaokdnhortetjlbatftprepbrxxjahyopogepknifdgkzzcastofcfzutocdvhnmxicadxxpqjvdqqxmtraddhbzqffasdwmihxfpgfehoajdlaurxfeeebbfywjrbqjjglawtjhfzmgucxlhxlqtgssmgjwjyoouxxvhaxbnpfmqzqhdtafjpsjlcjcznmzkjswaykfzciivbdoteufskmmyrahabamnvoocgkbbqqappeojpymthmjzwrzpmtqfvvnhmgxqdgmvxvtgcjlnbdqhibhzsljlwbgvilcxvbhnklvbdmbnqarqstrjtfcvxxpnnbxpfvqehwnkzeavjycaudvwzvfjscpvpdvtuisnholjejipelxmpblvryhockzopcpdcrnmzrmpqyzdofkljmtjbiyoqetrediuzwrqjjlxlm", "t": "wghjwiynbcsdssiazcfmqxbciruqbuthwcqxsrjxdorvkstdgbbnlrgkyqjzhxtirbbzwrnpzoovdkyptcogogxamfazoyklowwqorzfoeechqvyaltecwrorhpfmzhcdvqqcpgvnynourhagituiohzfnsmaokiaixtbhjrbawjtofonxvjighxahizyggukgmvbdkqrozvyqzuzkvtchtgwotiyavufohiycnqezzkzlcszmrylckgvhnuvqsovzpjwangxirpffpourriwjzoopjeyxmhkbcrvyetcnkhxfoahvhjbcpzehgacsrxmrnlaqlcujexddeeemyfnybbsgqwwpbkdjericjufvyhczllnqrbsvpcbylsctioocvoyviutgkzspngkswxjpbbqevkyumgbtivtmzmnupfcuqpysxcpzillcwxyoqookslqlvkhyskqyjttaowiggqveympazampzuxvfsjgisgkdmwwghmichmxsphqs", "maxCost": 175864}, "output": 511, "input_len": 586, "line": 592}
{"problem": "In a gold mine grid of size m x n, each cell in this mine has an integer representing the amount of gold in that cell, 0 if it is empty.\nReturn the maximum amount of gold you can collect under the conditions:\n\tEvery time you are located in a cell you will collect all the gold in that cell.\n\tFrom your position, you can walk one step to the left, right, up, or down.\n\tYou can't visit the same cell more than once.\n\tNever visit a cell with 0 gold.\n\tYou can start and stop collecting gold from any position in the grid that has some gold.", "tags": ["Array", "Backtracking", "Matrix"], "input": {"grid": [[88, 7], [60, 43], [71, 66], [29, 76]]}, "output": 440, "input_len": 36, "line": 5135}
{"problem": "In a gold mine grid of size m x n, each cell in this mine has an integer representing the amount of gold in that cell, 0 if it is empty.\nReturn the maximum amount of gold you can collect under the conditions:\n\tEvery time you are located in a cell you will collect all the gold in that cell.\n\tFrom your position, you can walk one step to the left, right, up, or down.\n\tYou can't visit the same cell more than once.\n\tNever visit a cell with 0 gold.\n\tYou can start and stop collecting gold from any position in the grid that has some gold.", "tags": ["Array", "Backtracking", "Matrix"], "input": {"grid": [[50, 0, 0, 99, 17, 0, 81, 0], [0, 20, 42, 20, 0, 62, 36, 0], [88, 0, 0, 49, 0, 90, 86, 88], [80, 95, 95, 18, 30, 0, 0, 31], [98, 0, 0, 94, 28, 12, 0, 73]]}, "output": 571, "input_len": 150, "line": 8105}
{"problem": "In a gold mine grid of size m x n, each cell in this mine has an integer representing the amount of gold in that cell, 0 if it is empty.\nReturn the maximum amount of gold you can collect under the conditions:\n\tEvery time you are located in a cell you will collect all the gold in that cell.\n\tFrom your position, you can walk one step to the left, right, up, or down.\n\tYou can't visit the same cell more than once.\n\tNever visit a cell with 0 gold.\n\tYou can start and stop collecting gold from any position in the grid that has some gold.", "tags": ["Array", "Backtracking", "Matrix"], "input": {"grid": [[33, 26, 11], [29, 77, 44]]}, "output": 220, "input_len": 29, "line": 1795}
{"problem": "In a gold mine grid of size m x n, each cell in this mine has an integer representing the amount of gold in that cell, 0 if it is empty.\nReturn the maximum amount of gold you can collect under the conditions:\n\tEvery time you are located in a cell you will collect all the gold in that cell.\n\tFrom your position, you can walk one step to the left, right, up, or down.\n\tYou can't visit the same cell more than once.\n\tNever visit a cell with 0 gold.\n\tYou can start and stop collecting gold from any position in the grid that has some gold.", "tags": ["Array", "Backtracking", "Matrix"], "input": {"grid": [[47, 31, 0, 0, 0, 0, 4, 0, 0], [0, 0, 28, 0, 0, 0, 0, 0, 0], [0, 0, 45, 0, 0, 56, 0, 0, 15], [0, 0, 0, 85, 0, 0, 0, 0, 0], [0, 0, 0, 0, 61, 62, 0, 0, 0], [0, 68, 3, 0, 0, 0, 34, 27, 69], [0, 0, 96, 0, 0, 77, 0, 0, 0], [0, 0, 0, 48, 0, 0, 0, 0, 0], [0, 1, 20, 0, 0, 22, 0, 0, 0], [30, 37, 0, 0, 0, 35, 0, 0, 89]]}, "output": 167, "input_len": 297, "line": 1256}
{"problem": "In a gold mine grid of size m x n, each cell in this mine has an integer representing the amount of gold in that cell, 0 if it is empty.\nReturn the maximum amount of gold you can collect under the conditions:\n\tEvery time you are located in a cell you will collect all the gold in that cell.\n\tFrom your position, you can walk one step to the left, right, up, or down.\n\tYou can't visit the same cell more than once.\n\tNever visit a cell with 0 gold.\n\tYou can start and stop collecting gold from any position in the grid that has some gold.", "tags": ["Array", "Backtracking", "Matrix"], "input": {"grid": [[0, 0, 0, 100, 0, 0], [0, 0, 0, 72, 0, 0], [85, 0, 0, 95, 0, 0], [0, 0, 0, 62, 0, 25], [18, 68, 5, 16, 0, 0], [72, 4, 0, 0, 0, 0], [0, 0, 0, 0, 0, 74], [48, 0, 81, 42, 0, 15], [67, 0, 0, 0, 0, 61], [13, 0, 0, 59, 0, 0], [51, 0, 0, 89, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 23, 0, 0, 0], [59, 0, 0, 0, 0, 0]]}, "output": 512, "input_len": 281, "line": 3418}
{"problem": "In a gold mine grid of size m x n, each cell in this mine has an integer representing the amount of gold in that cell, 0 if it is empty.\nReturn the maximum amount of gold you can collect under the conditions:\n\tEvery time you are located in a cell you will collect all the gold in that cell.\n\tFrom your position, you can walk one step to the left, right, up, or down.\n\tYou can't visit the same cell more than once.\n\tNever visit a cell with 0 gold.\n\tYou can start and stop collecting gold from any position in the grid that has some gold.", "tags": ["Array", "Backtracking", "Matrix"], "input": {"grid": [[12, 58], [4, 31]]}, "output": 105, "input_len": 20, "line": 497}
{"problem": "In a gold mine grid of size m x n, each cell in this mine has an integer representing the amount of gold in that cell, 0 if it is empty.\nReturn the maximum amount of gold you can collect under the conditions:\n\tEvery time you are located in a cell you will collect all the gold in that cell.\n\tFrom your position, you can walk one step to the left, right, up, or down.\n\tYou can't visit the same cell more than once.\n\tNever visit a cell with 0 gold.\n\tYou can start and stop collecting gold from any position in the grid that has some gold.", "tags": ["Array", "Backtracking", "Matrix"], "input": {"grid": [[74], [16], [43], [22], [97], [56], [38], [14], [27], [80], [32], [84]]}, "output": 583, "input_len": 53, "line": 2503}
{"problem": "In a gold mine grid of size m x n, each cell in this mine has an integer representing the amount of gold in that cell, 0 if it is empty.\nReturn the maximum amount of gold you can collect under the conditions:\n\tEvery time you are located in a cell you will collect all the gold in that cell.\n\tFrom your position, you can walk one step to the left, right, up, or down.\n\tYou can't visit the same cell more than once.\n\tNever visit a cell with 0 gold.\n\tYou can start and stop collecting gold from any position in the grid that has some gold.", "tags": ["Array", "Backtracking", "Matrix"], "input": {"grid": [[46, 91, 27, 3], [24, 43, 0, 0], [75, 0, 0, 0], [46, 0, 0, 10], [0, 71, 11, 0], [0, 0, 0, 0], [53, 85, 12, 35], [0, 0, 93, 0], [89, 0, 32, 44], [0, 0, 0, 15], [0, 0, 0, 0], [97, 3, 0, 86], [52, 0, 0, 0], [0, 0, 0, 46]]}, "output": 334, "input_len": 196, "line": 3402}
{"problem": "In a gold mine grid of size m x n, each cell in this mine has an integer representing the amount of gold in that cell, 0 if it is empty.\nReturn the maximum amount of gold you can collect under the conditions:\n\tEvery time you are located in a cell you will collect all the gold in that cell.\n\tFrom your position, you can walk one step to the left, right, up, or down.\n\tYou can't visit the same cell more than once.\n\tNever visit a cell with 0 gold.\n\tYou can start and stop collecting gold from any position in the grid that has some gold.", "tags": ["Array", "Backtracking", "Matrix"], "input": {"grid": [[34], [84], [0], [27]]}, "output": 118, "input_len": 20, "line": 108}
{"problem": "You have one chocolate bar that consists of some chunks. Each chunk has its own sweetness given by the array\u00a0sweetness.\nYou want to share the chocolate with your k\u00a0friends so you start cutting the chocolate bar into k + 1\u00a0pieces using\u00a0k\u00a0cuts, each piece consists of some consecutive chunks.\nBeing generous, you will eat the piece with the minimum total sweetness and give the other pieces to your friends.\nFind the maximum total sweetness of the\u00a0piece you can get by cutting the chocolate bar optimally.", "tags": ["Array", "Binary Search"], "input": {"sweetness": [36120, 66907], "k": 1}, "output": 36120, "input_len": 25, "line": 275}
{"problem": "You are given a string s of length n containing only four kinds of characters: 'Q', 'W', 'E', and 'R'.\nA string is said to be balanced if each of its characters appears n / 4 times where n is the length of the string.\nReturn the minimum length of the substring that can be replaced with any other string of the same length to make s balanced. If s is already balanced, return 0.", "tags": ["String", "Sliding Window"], "input": {"s": "WRQREWQRRQERRQRR"}, "output": 5, "input_len": 14, "line": 205}
{"problem": "You are given an integer array arr.\nIn one move, you can select a palindromic subarray arr[i], arr[i + 1], ..., arr[j] where i <= j, and remove that subarray from the given array. Note that after removing a subarray, the elements on the left and on the right of that subarray move to fill the gap left by the removal.\nReturn the minimum number of moves needed to remove all numbers from the array.", "tags": ["Array", "DP"], "input": {"arr": [10, 18, 4, 20, 13, 17]}, "output": 6, "input_len": 27, "line": 161}
{"problem": "You are given an integer array arr.\nIn one move, you can select a palindromic subarray arr[i], arr[i + 1], ..., arr[j] where i <= j, and remove that subarray from the given array. Note that after removing a subarray, the elements on the left and on the right of that subarray move to fill the gap left by the removal.\nReturn the minimum number of moves needed to remove all numbers from the array.", "tags": ["Array", "DP"], "input": {"arr": [15, 20, 12, 11, 15, 20, 5, 12, 20, 15, 7]}, "output": 5, "input_len": 46, "line": 736}
{"problem": "You are given an even number of people numPeople that stand around a circle and each person shakes hands with someone else so that there are numPeople / 2 handshakes total.\nReturn the number of ways these handshakes could occur such that none of the handshakes cross.\nSince the answer could be very large, return it modulo 10^9 + 7.", "tags": ["Math", "DP"], "input": {"numPeople": 46}, "output": 59611249, "input_len": 9, "line": 1239}
{"problem": "You are given an even number of people numPeople that stand around a circle and each person shakes hands with someone else so that there are numPeople / 2 handshakes total.\nReturn the number of ways these handshakes could occur such that none of the handshakes cross.\nSince the answer could be very large, return it modulo 10^9 + 7.", "tags": ["Math", "DP"], "input": {"numPeople": 64}, "output": 488309750, "input_len": 9, "line": 2283}
{"problem": "You have a pointer at index 0 in an array of size arrLen. At each step, you can move 1 position to the left, 1 position to the right in the array, or stay in the same place (The pointer should not be placed outside the array at any time).\nGiven two integers steps and arrLen, return the number of ways such that your pointer is still at index 0 after exactly steps steps. Since the answer may be too large, return it modulo 10^9 + 7.", "tags": ["DP"], "input": {"steps": 4, "arrLen": 957}, "output": 9, "input_len": 16, "line": 172}
{"problem": "You have a pointer at index 0 in an array of size arrLen. At each step, you can move 1 position to the left, 1 position to the right in the array, or stay in the same place (The pointer should not be placed outside the array at any time).\nGiven two integers steps and arrLen, return the number of ways such that your pointer is still at index 0 after exactly steps steps. Since the answer may be too large, return it modulo 10^9 + 7.", "tags": ["DP"], "input": {"steps": 50, "arrLen": 340}, "output": 852867642, "input_len": 17, "line": 9694}
{"problem": "Given an n x n integer matrix grid, return the minimum sum of a falling path with non-zero shifts.\nA falling path with non-zero shifts is a choice of exactly one element from each row of grid such that no two elements chosen in adjacent rows are in the same column.", "tags": ["Array", "DP", "Matrix"], "input": {"grid": [[10, -83, -83, -85, 86, 92, 40, 43, 78, -27, 62, -96, -63, -50], [-40, -78, -73, 88, -70, 10, -17, 90, -95, -98, 42, 61, 32, -32], [-79, -90, 4, -7, -17, -95, 32, -76, -53, 71, -94, -31, 83, -51], [-63, -59, -34, -36, 24, -36, 58, -86, 38, 1, 3, 73, 22, -7], [69, 35, 66, 94, 64, -13, 64, 44, -49, 82, 40, -27, -62, -87], [-69, -59, -70, 65, -70, -62, -97, -49, -71, 97, -66, -97, -80, 23], [-64, 29, -90, 1, -7, 50, 63, 96, 85, 22, -36, -50, -88, -73], [-37, 80, -97, 56, 19, -83, 4, -7, 10, 13, -91, -58, 99, 64], [-29, 84, -10, -88, 59, 3, -98, 17, 97, 1, -69, -71, 41, -18], [-63, 9, 38, -37, 52, -24, -30, 91, 92, 91, 39, -46, 52, 65], [-73, 6, -49, -99, -66, -50, 4, -50, -80, -18, 8, -87, -8, 98], [-73, -74, 44, 72, -36, 96, -31, 29, 60, 6, 31, -27, 66, 48], [58, -80, 44, 10, 3, 60, -80, 18, 37, -63, -38, 7, -22, -22], [-99, 19, -5, -80, 43, 29, 42, 78, -85, 82, -65, 40, 4, -53]]}, "output": -1257, "input_len": 768, "line": 3578}
{"problem": "Given an n x n integer matrix grid, return the minimum sum of a falling path with non-zero shifts.\nA falling path with non-zero shifts is a choice of exactly one element from each row of grid such that no two elements chosen in adjacent rows are in the same column.", "tags": ["Array", "DP", "Matrix"], "input": {"grid": [[73, -40, 64, 86, -56, 71, 74, 33, 95, 19, -55, 85, 82, -56, 29, 16, 43, -99], [-12, -37, 96, -36, -51, -47, 62, -81, -36, -91, -84, 40, -72, -35, 89, -52, -14, -39], [-66, -64, 26, -2, -17, 34, 31, 24, -16, -28, 9, -42, -46, 87, 83, -44, 7, -89], [32, -63, 6, -70, 62, -99, 99, 18, -19, 78, 97, 88, 45, 6, 28, -66, -59, 81], [-74, -95, -42, -26, -27, 94, -53, -15, -66, -45, -53, 79, 96, 97, -61, 68, 18, -97], [22, 58, 94, -23, -54, -92, 21, 18, -34, -13, 7, 31, 99, 21, 46, 80, 13, -56], [28, -75, -64, -50, 99, -98, 5, 36, -68, 55, -33, -68, 27, 53, 78, 0, -4, -38], [-86, -44, 83, 23, -34, -46, -10, 46, 19, -1, -45, 94, 32, -49, -50, 71, -51, 22], [9, 38, 8, 92, -37, 46, -99, 39, -43, -45, -52, -70, 22, 3, 3, -57, 83, -30], [54, -98, -57, -47, -74, 67, 70, -15, -66, -43, 77, 94, 72, -16, -89, -70, 60, -58], [36, -80, 26, -5, -97, 34, 17, 35, 88, -1, -86, 81, 8, 44, 47, 50, -20, -10], [74, 82, 80, -82, -14, 79, 0, -78, 26, 7, 3, -10, -65, -54, 69, -54, -95, 35], [93, -8, 86, 76, -59, -20, 17, -88, 56, 29, -19, 0, 19, 83, -42, -12, -99, -28], [-40, 91, 59, -58, -41, 66, 84, -97, -59, -11, 41, -28, 98, -4, 34, -18, 12, 95], [-17, 72, 93, -74, -48, 3, 52, -82, -26, -25, 58, -26, -55, 43, 4, -68, -73, 77], [-24, 21, -73, 53, 48, 53, 99, 35, -91, -48, -96, 41, -40, -4, -5, 30, 51, -4], [64, -59, 0, -83, -45, 78, -30, 11, 0, -13, 39, 8, 90, 68, -7, -63, -78, 46], [42, -74, 91, -51, 52, 66, 69, -29, 47, -46, 73, 25, -25, 57, -49, 11, -26, -34]]}, "output": -1627, "input_len": 1269, "line": 7190}
{"problem": "Given a string s. In one step you can insert any character at any index of the string.\nReturn the minimum number of steps to make s\u00a0palindrome.\nA\u00a0Palindrome String\u00a0is one that reads the same backward as well as forward.", "tags": ["String", "DP"], "input": {"s": "dhwsariynptgwwqrrbijgrlcjuvnmxtiqhdpzoowfhjujapdkseaxjqmzxjjcjxqzyvnwb"}, "output": 47, "input_len": 44, "line": 6811}
{"problem": "Return the number of distinct non-empty substrings of text\u00a0that can be written as the concatenation of some string with itself (i.e. it can be written as a + a\u00a0where a is some string).", "tags": ["Trie", "String", "Hash Function", "Rolling Hash"], "input": {"text": "bjrcvffdlyfsyo"}, "output": 1, "input_len": 13, "line": 438}
{"problem": "You want to schedule a list of jobs in d days. Jobs are dependent (i.e To work on the ith job, you have to finish all the jobs j where 0 <= j < i).\nYou have to finish at least one task every day. The difficulty of a job schedule is the sum of difficulties of each day of the d days. The difficulty of a day is the maximum difficulty of a job done on that day.\nYou are given an integer array jobDifficulty and an integer d. The difficulty of the ith job is jobDifficulty[i].\nReturn the minimum difficulty of a job schedule. If you cannot find a schedule for the jobs return -1.", "tags": ["Array", "DP"], "input": {"jobDifficulty": [220, 32, 546, 609, 579, 712, 480, 949, 202, 577, 733, 541, 853, 898], "d": 8}, "output": 4033, "input_len": 80, "line": 2571}
{"problem": "You want to schedule a list of jobs in d days. Jobs are dependent (i.e To work on the ith job, you have to finish all the jobs j where 0 <= j < i).\nYou have to finish at least one task every day. The difficulty of a job schedule is the sum of difficulties of each day of the d days. The difficulty of a day is the maximum difficulty of a job done on that day.\nYou are given an integer array jobDifficulty and an integer d. The difficulty of the ith job is jobDifficulty[i].\nReturn the minimum difficulty of a job schedule. If you cannot find a schedule for the jobs return -1.", "tags": ["Array", "DP"], "input": {"jobDifficulty": [48, 270, 364, 672, 911, 802, 700, 699, 129, 183, 426, 711, 201, 791, 419, 534, 223, 228, 925, 703, 848, 69, 714, 281, 952, 564, 509, 569, 978, 893, 572, 308], "d": 5}, "output": 1968, "input_len": 169, "line": 8415}
{"problem": "Given a string s\u00a0consisting only of characters a, b and c.\nReturn the number of substrings containing at least\u00a0one occurrence of all these characters a, b and c.", "tags": ["Hash Table", "String", "Sliding Window"], "input": {"s": "aaaabbccaaabbbbaccaabbbbbaacacbcccbacacbbaaacbacaaabacaaaababbbaacacbccaacbaabababccccbbcccbabaccacacccaabaabcbcbacbccbabbcbbcaabbbccbccabccaaacacabccabcabbcabbbacabccaaabaacbbbbccccbcacccccaaabcbbabcbaccabbbcbcbaaacbcccbbbababcacaabcabcbbacabcbbbabbbccaaaabcaabbacabbbaababcbaacbbaacbcaaccbcacacabcbaabccacbbcbbbcbcbbbaabaabaabcbbbabcacaaacccaaaaacbbcccaabbccabbacbbaabaacaccccaaabccacacccbbaacabacaacabbcacbaaacbaaaacabaabbcabbcabacbccbcaccabbbbbabbbaabbcbacaaababbbcbacacbacbbcbaabbbcbcabacaccabacbacacaacbcaaabbbababcbcbcbcbccbabbbbbbaccbbacccaababbbccbaabcaaacaaccaaacbbabbbababaccbbaacbaaabbcaaaaaaabaabbbbccbccccbbbabaababcacbccbcaccccbbaabbbaaabaacacaacbcaabbbccbaabaabcccabaccbbccbcbbbacacccabcbaaabbaacbaabaabbbaaacbbbcaaabaaccacaacbbbbbbcbbcabcacaacabcbccbabbcacaaaacbacbcbbccccbcaabcbcaacababaaaaaccbbaabccabbaaabaaaaababbbbccaabccbbbcaabcacaccacbcacabbbbbbacbabbbbacccbcbcabbabcbcaacbcaaaabcccbcbcbcbcbcacbaabaacbababcccaaabbaaabbcbcacaabbacacacbbcabbcbabccacbabcaacbccbcbbcbaabcacbcacabcbcaaccacaaaaaaabbababbccaabaacaaabacbacbaacabbcbaacccbbaccbbaccbacaabacccbcbbcbcbaaaccaaacbababbbccabaca"}, "output": 605769, "input_len": 474, "line": 3321}
{"problem": "Given an array of digits digits, return the largest multiple of three that can be formed by concatenating some of the given digits in any order. If there is no answer return an empty string.\nSince the answer may not fit in an integer data type, return the answer as a string. Note that the returning answer must not contain unnecessary leading zeros.", "tags": ["Greedy", "Array", "DP"], "input": {"digits": [8, 8, 2, 0, 3, 6, 7, 9, 8, 5, 3, 4, 7, 6, 3, 2, 1, 9, 5, 8, 2, 3, 9, 2, 9, 3, 7, 9, 8, 1, 0, 7, 1, 1, 5, 5, 7, 4, 3, 5, 6]}, "output": "99999888887777766655555443333332222111100", "input_len": 127, "line": 590}
{"problem": "Given an array of digits digits, return the largest multiple of three that can be formed by concatenating some of the given digits in any order. If there is no answer return an empty string.\nSince the answer may not fit in an integer data type, return the answer as a string. Note that the returning answer must not contain unnecessary leading zeros.", "tags": ["Greedy", "Array", "DP"], "input": {"digits": [7, 1, 0, 5, 3, 9, 8, 1, 7, 6, 3, 9, 9, 7, 2, 3, 1, 2, 6, 7, 1, 7, 8, 4, 5, 9, 1, 2, 9, 4, 1, 5, 3, 3, 7, 6, 3, 6, 7, 7, 5, 6]}, "output": "99999887777777766666555544333333222111110", "input_len": 130, "line": 602}
{"problem": "Given an integer array nums, return the sum of divisors of the integers in that array that have exactly four divisors. If there is no such integer in the array, return 0.", "tags": ["Array", "Math"], "input": {"nums": [77221, 84348, 42665, 36894, 17824, 93183, 67503, 51283, 25555, 18842, 47494]}, "output": 189518, "input_len": 81, "line": 7540}
{"problem": "There are n soldiers standing in a line. Each soldier is assigned a unique rating value.\nYou have to form a team of 3 soldiers amongst them under the following rules:\n\tChoose 3 soldiers with index (i, j, k) with rating (rating[i], rating[j], rating[k]).\n\tA team is valid if: (rating[i] < rating[j] < rating[k]) or (rating[i] > rating[j] > rating[k]) where (0 <= i < j < k < n).\nReturn the number of teams you can form given the conditions. (soldiers can be part of multiple teams).", "tags": ["Fenwick Tree", "Segment Tree", "Array", "DP"], "input": {"rating": [24988, 24407, 62463, 32793, 35740, 39640, 27361, 18006, 72666, 97538, 78795, 32511, 14095, 33350, 54404, 55337, 7145, 39912, 40822, 90448, 93922, 6868, 94933, 61563, 9230, 65299, 23493, 36820, 36472, 39152, 65831, 83343, 71694, 28626, 44872, 65750, 38474, 11540, 70436, 53490, 3345]}, "output": 3385, "input_len": 287, "line": 1932}
{"problem": "There are n soldiers standing in a line. Each soldier is assigned a unique rating value.\nYou have to form a team of 3 soldiers amongst them under the following rules:\n\tChoose 3 soldiers with index (i, j, k) with rating (rating[i], rating[j], rating[k]).\n\tA team is valid if: (rating[i] < rating[j] < rating[k]) or (rating[i] > rating[j] > rating[k]) where (0 <= i < j < k < n).\nReturn the number of teams you can form given the conditions. (soldiers can be part of multiple teams).", "tags": ["Fenwick Tree", "Segment Tree", "Array", "DP"], "input": {"rating": [4130, 61242, 35825, 61889, 97190, 34751, 11328, 28202, 33006, 2693, 3785, 32810, 25277, 25078, 65516, 11252]}, "output": 206, "input_len": 113, "line": 357}
{"problem": "You are given three integers n, m and k. Consider the following algorithm to find the maximum element of an array of positive integers:\nYou should build the array arr which has the following properties:\n\tarr has exactly n integers.\n\t1 <= arr[i] <= m where (0 <= i < n).\n\tAfter applying the mentioned algorithm to arr, the value search_cost is equal to k.\nReturn the number of ways to build the array arr under the mentioned conditions. As the answer may grow large, the answer must be computed modulo 10^9 + 7.", "tags": ["DP", "Prefix Sum"], "input": {"n": 4, "m": 4, "k": 1}, "output": 100, "input_len": 19, "line": 153}
{"problem": "There are n people and 40 types of hats labeled from 1 to 40.\nGiven a 2D integer array hats, where hats[i] is a list of all hats preferred by the ith person.\nReturn the number of ways that the n people wear different hats to each other.\nSince the answer may be too large, return it modulo 10^9 + 7.", "tags": ["Bit Manipulation", "Array", "DP", "Bitmask DP"], "input": {"hats": [[13, 17, 19, 7], [39, 26, 22, 3, 30], [23, 39, 19, 35, 32, 28, 9, 16, 12, 7, 38, 20], [14, 16, 36]]}, "output": 658, "input_len": 98, "line": 3023}
{"problem": "There are n people and 40 types of hats labeled from 1 to 40.\nGiven a 2D integer array hats, where hats[i] is a list of all hats preferred by the ith person.\nReturn the number of ways that the n people wear different hats to each other.\nSince the answer may be too large, return it modulo 10^9 + 7.", "tags": ["Bit Manipulation", "Array", "DP", "Bitmask DP"], "input": {"hats": [[1], [11, 18, 21, 36, 19, 12, 14, 5, 9], [26, 23, 25, 5, 38, 19, 31, 40, 20, 16, 8, 35, 39, 15, 24, 6, 36, 22, 32, 18, 33, 9]]}, "output": 193, "input_len": 127, "line": 1807}
{"problem": "Given two arrays nums1\u00a0and nums2.\nReturn the maximum dot product\u00a0between\u00a0non-empty subsequences of nums1 and nums2 with the same length.\nA subsequence of a array is a new array which is formed from the original array by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (ie,\u00a0[2,3,5]\u00a0is a subsequence of\u00a0[1,2,3,4,5]\u00a0while [1,5,3]\u00a0is not).", "tags": ["Array", "DP"], "input": {"nums1": [-897, -815, -296, -654, 331, -410, 527], "nums2": [214, 600, -852, -151, -399, 605, -425, -363, -681, 476, 689, 399, 637, -277, -194, -545, 856, 532, 339, -220, 763, -23, -435, -502, -936, 259, -313, 878, -776, -970, -151, 479, -699, 514, -574, 465, -5, -843, -313, -569, 673, -750, 276, 799, -276, -969, -106, -6, 308, -4, -931, -857, 343, 122, 757, -650, -111, 190, 329, -497, -808, 63, -195, 529, -352, -949, 493, -248, -985, -941, 705, 225, 294, -764, -41, 183, -575, 14, -358, 401, -116, 982, -777, -366, 41, -334, 795, 99, -698, -717, 709, 189, -599, 48, 393, -171, 89, 428, -578, 727, 246, -153, -5, 391, 706, -668, -228, -866, -275, 23, 832, 958, 663, 710, -605, 441, -38, 604, -859, 441, 245]}, "output": 3769887, "input_len": 631, "line": 2570}
{"problem": "Given the array houses where houses[i] is the location of the ith house along a street and an integer k, allocate k mailboxes in the street.\nReturn the minimum total distance between each house and its nearest mailbox.\nThe test cases are generated so that the answer fits in a 32-bit integer.", "tags": ["Array", "Math", "DP", "Sorting"], "input": {"houses": [121, 832, 1117, 1326, 1609, 1833, 1957, 2205, 2271, 2290, 2846, 4099, 4666, 4786, 5177, 5291, 5342, 5815, 5848, 5881, 6025, 6080, 6207, 6653, 6981, 7147, 7262, 7499, 7615, 7808, 8110, 8368, 8735, 8852, 9075, 9089, 9442, 9603], "k": 1}, "output": 87001, "input_len": 236, "line": 1681}
{"problem": "Given an m x n binary matrix mat, return the number of submatrices that have all ones.", "tags": ["Stack", "Array", "DP", "Matrix", "Monotonic Stack"], "input": {"mat": [[0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0], [1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0]]}, "output": 381, "input_len": 689, "line": 3003}
{"problem": "Given an m x n binary matrix mat, return the number of submatrices that have all ones.", "tags": ["Stack", "Array", "DP", "Matrix", "Monotonic Stack"], "input": {"mat": [[1], [0], [0], [1], [1], [1], [1], [1], [0], [0], [1], [1], [1], [0], [1], [0], [0], [1], [1], [1], [0], [0], [1], [1], [0], [1], [1], [0], [0], [1], [0], [0], [0], [0], [0], [0], [0], [0], [1], [1], [0], [1], [0], [1], [0], [1], [1], [0], [1]]}, "output": 45, "input_len": 152, "line": 4199}
{"problem": "You are given a string s.\nA split is called good if you can split s into two non-empty strings sleft and sright where their concatenation is equal to s (i.e., sleft + sright = s) and the number of distinct letters in sleft and sright is the same.\nReturn the number of good splits you can make in s.", "tags": ["Bit Manipulation", "Hash Table", "String", "DP"], "input": {"s": "eqnealpdaassbwemzxvivshnfqcxmhxuoozbynulqwbsdkhqfvwhblrxrdefzjtrjqlkpyutlcuhpfwrztubejmliwunxsgmotsdwumkjygqdmbyzygbgutxwlgzozdz"}, "output": 1, "input_len": 77, "line": 680}
{"problem": "You are given a string s.\nA split is called good if you can split s into two non-empty strings sleft and sright where their concatenation is equal to s (i.e., sleft + sright = s) and the number of distinct letters in sleft and sright is the same.\nReturn the number of good splits you can make in s.", "tags": ["Bit Manipulation", "Hash Table", "String", "DP"], "input": {"s": "sgoqtnrcqksjsxvhskhxieacikcoisjrihlfczlubbtrujmgdhievnypaeevnnytqlbgxbuyutluhnmcltgcypqzkqenedyhgactdoxbvlgiwhiyduubgnxsvbwgwpccxehjhwhixqo"}, "output": 1, "input_len": 81, "line": 735}
{"problem": "Given an array of integers arr, and three integers\u00a0a,\u00a0b\u00a0and\u00a0c. You need to find the number of good triplets.\nA triplet (arr[i], arr[j], arr[k])\u00a0is good if the following conditions are true:\n    0 <= i < j < k <\u00a0arr.length\n    |arr[i] - arr[j]| <= a\n    |arr[j] - arr[k]| <= b\n    |arr[i] - arr[k]| <= c\nWhere |x| denotes the absolute value of x.\nReturn the number of good triplets.", "tags": ["Array", "Enumeration"], "input": {"arr": [441, 182, 496, 631, 109, 300, 704, 128, 103], "a": 902, "b": 561, "c": 258}, "output": 30, "input_len": 73, "line": 667}
{"problem": "Given a parentheses string s containing only the characters '(' and ')'. A parentheses string is balanced if:\n\tAny left parenthesis '(' must have a corresponding two consecutive right parenthesis '))'.\n\tLeft parenthesis '(' must go before the corresponding two consecutive right parenthesis '))'.\nIn other words, we treat '(' as an opening parenthesis and '))' as a closing parenthesis.\n\tFor example, \"())\", \"())(())))\" and \"(())())))\" are balanced, \")()\", \"()))\" and \"(()))\" are not balanced.\nYou can insert the characters '(' and ')' at any position of the string to balance it if needed.\nReturn the minimum number of insertions needed to make s balanced.", "tags": ["Stack", "Greedy", "String"], "input": {"s": "()()())(((()((((((()))()(()())()"}, "output": 25, "input_len": 18, "line": 153}
{"problem": "You are given a string s. An awesome substring is a non-empty substring of s such that we can make any number of swaps in order to make it a palindrome.\nReturn the length of the maximum length awesome substring of s.", "tags": ["Bit Manipulation", "Hash Table", "String"], "input": {"s": "528612920420155805399958862"}, "output": 5, "input_len": 33, "line": 741}
{"problem": "Given a wooden stick of length n units. The stick is labelled from 0 to n. For example, a stick of length 6 is labelled as follows:\nGiven an integer array cuts where cuts[i] denotes a position you should perform a cut at.\nYou should perform the cuts in order, you can change the order of the cuts as you wish.\nThe cost of one cut is the length of the stick to be cut, the total cost is the sum of costs of all cuts. When you cut a stick, it will be split into two smaller sticks (i.e. the sum of their lengths is the length of the stick before the cut). Please refer to the first example for a better explanation.\nReturn the minimum total cost of the cuts.", "tags": ["Array", "DP", "Sorting"], "input": {"n": 501939, "cuts": [369887, 125737, 94544, 51955, 239264, 262867, 7676, 389825, 492193, 413542, 303742, 363991, 495336, 30012, 80424, 443081, 327368, 300521, 145998, 154832, 33802, 363798, 454996, 251619, 36180, 282809, 485292]}, "output": 2242859, "input_len": 223, "line": 8912}
{"problem": "We have n cities and m bi-directional roads where roads[i] = [ai, bi] connects city ai with city bi. Each city has a name consisting of exactly three upper-case English letters given in the string array names. Starting at any city x, you can reach any city y where y != x (i.e., the cities and the roads are forming an undirected connected graph).\nYou will be given a string array targetPath. You should find a path in the graph of the same length and with the minimum edit distance to targetPath.\nYou need to return the order of the nodes in the path with the minimum edit distance. The\u00a0path should be of the same length of targetPath and should be valid (i.e., there should be a direct road between ans[i] and ans[i + 1]). If there are multiple answers return any one of them.\nThe edit distance is defined as follows:", "tags": ["Graph", "DP"], "input": {"n": 3, "roads": [[0, 1], [0, 2], [1, 2]], "names": ["FZF", "PLU", "TEP"], "targetPath": ["EQE", "KNC", "QPU", "GYP", "EYS", "QEQ", "IIX", "OCN", "SGP", "DTV", "OCM", "NVK", "WPC", "OOW", "PWI", "LBQ", "GWG", "LJQ", "JPP", "PJT", "KFK", "HYZ", "TKL", "QMZ", "ONY", "LZR", "CRX", "PZX", "QMM", "ZLK", "UVH", "IGR"]}, "output": [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0], "input_len": 174, "line": 1010}
{"problem": "We have n cities and m bi-directional roads where roads[i] = [ai, bi] connects city ai with city bi. Each city has a name consisting of exactly three upper-case English letters given in the string array names. Starting at any city x, you can reach any city y where y != x (i.e., the cities and the roads are forming an undirected connected graph).\nYou will be given a string array targetPath. You should find a path in the graph of the same length and with the minimum edit distance to targetPath.\nYou need to return the order of the nodes in the path with the minimum edit distance. The\u00a0path should be of the same length of targetPath and should be valid (i.e., there should be a direct road between ans[i] and ans[i + 1]). If there are multiple answers return any one of them.\nThe edit distance is defined as follows:", "tags": ["Graph", "DP"], "input": {"n": 4, "roads": [[0, 1], [1, 2], [0, 3], [2, 3], [0, 2], [1, 3]], "names": ["IIP", "QIC", "PNW", "WLJ"], "targetPath": ["MMS", "UKX"]}, "output": [1, 0], "input_len": 77, "line": 110}
{"problem": "Given a\u00a0directed acyclic graph,\u00a0with\u00a0n\u00a0vertices numbered from\u00a00\u00a0to\u00a0n-1,\u00a0and an array\u00a0edges\u00a0where\u00a0edges[i] = [fromi, toi]\u00a0represents a directed edge from node\u00a0fromi\u00a0to node\u00a0toi.\nFind the smallest set of vertices from which all nodes in the graph are reachable. It's guaranteed that a unique solution exists.\nNotice that you can return the vertices in any order.", "tags": ["Graph"], "input": {"n": 1212, "edges": [[302, 462], [1041, 801], [380, 1147], [1114, 32], [1179, 613], [297, 176], [1171, 712], [865, 441], [273, 1130], [177, 885], [742, 1081], [495, 557], [908, 1113], [203, 977], [204, 450], [723, 231], [886, 682], [950, 630], [184, 182], [395, 1021], [1025, 358], [88, 641], [365, 522], [1043, 650], [532, 1035], [816, 104], [936, 469], [340, 1176], [814, 461], [741, 455], [955, 683], [34, 645], [446, 1007], [649, 875], [289, 840], [62, 288], [316, 1098], [6, 1076], [994, 723], [748, 109], [789, 244], [464, 533], [926, 1198], [12, 607], [891, 520], [220, 883], [732, 420], [783, 914], [854, 846], [1206, 68], [900, 260], [699, 810], [224, 114], [598, 916], [309, 606], [631, 294], [569, 1136], [38, 45], [811, 425], [71, 60], [840, 13], [219, 1181], [212, 904], [7, 825], [398, 838], [259, 625], [660, 402], [1175, 304], [1011, 727], [455, 454], [859, 193], [94, 463], [118, 100], [214, 55], [58, 183], [579, 989], [226, 304], [310, 407], [805, 432], [290, 404], [1102, 1158], [781, 331], [353, 826], [135, 164], [927, 497], [603, 635], [958, 2], [527, 581], [1194, 267], [104, 225], [306, 1070], [87, 474], [897, 7], [205, 1177], [753, 426], [219, 211], [953, 307], [505, 1209], [932, 1080], [205, 987], [1033, 290], [74, 1052], [306, 544], [108, 880], [967, 656], [1147, 77], [1025, 960], [897, 494], [1116, 1163], [326, 1078], [815, 76], [1069, 322], [901, 155], [734, 588], [1208, 391], [1018, 914], [864, 746], [696, 588], [864, 1176], [90, 970]]}, "output": [0, 1, 3, 4, 5, 6, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 105, 106, 107, 108, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 177, 178, 179, 180, 181, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 291, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 403, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 422, 423, 424, 427, 428, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 442, 443, 444, 445, 446, 447, 448, 449, 451, 452, 453, 456, 457, 458, 459, 460, 464, 465, 466, 467, 468, 470, 471, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 495, 496, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 521, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 582, 583, 584, 585, 586, 587, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 631, 632, 633, 634, 636, 637, 638, 639, 640, 642, 643, 644, 646, 647, 648, 649, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 724, 725, 726, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 802, 803, 804, 805, 806, 807, 808, 809, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 841, 842, 843, 844, 845, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 876, 877, 878, 879, 881, 882, 884, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 909, 910, 911, 912, 913, 915, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 961, 962, 963, 964, 965, 966, 967, 968, 969, 971, 972, 973, 974, 975, 976, 978, 979, 980, 981, 982, 983, 984, 985, 986, 988, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1071, 1072, 1073, 1074, 1075, 1077, 1079, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1131, 1132, 1133, 1134, 1135, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1159, 1160, 1161, 1162, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1178, 1179, 1180, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1210, 1211], "input_len": 1227, "line": 2441}
{"problem": "There are several stones arranged in a row, and each stone has an associated value which is an integer given in the array stoneValue.\nIn each round of the game, Alice divides the row into two non-empty rows (i.e. left row and right row), then Bob calculates the value of each row which is the sum of the values of all the stones in this row. Bob throws away the row which has the maximum value, and Alice's score increases by the value of the remaining row. If the value of the two rows are equal, Bob lets Alice decide which row will be thrown away. The next round starts with the remaining row.\nThe game ends when there is only one stone remaining. Alice's is initially zero.\nReturn the maximum score that Alice can obtain.", "tags": ["Array", "Math", "DP", "Game Theory"], "input": {"stoneValue": [360485, 589406, 767852, 585599, 684493, 157461, 749246, 284019, 110871, 157505, 320487, 726755, 101593, 806688, 768477, 271376, 187809, 704796]}, "output": 7169229, "input_len": 149, "line": 628}
{"problem": "There are several stones arranged in a row, and each stone has an associated value which is an integer given in the array stoneValue.\nIn each round of the game, Alice divides the row into two non-empty rows (i.e. left row and right row), then Bob calculates the value of each row which is the sum of the values of all the stones in this row. Bob throws away the row which has the maximum value, and Alice's score increases by the value of the remaining row. If the value of the two rows are equal, Bob lets Alice decide which row will be thrown away. The next round starts with the remaining row.\nThe game ends when there is only one stone remaining. Alice's is initially zero.\nReturn the maximum score that Alice can obtain.", "tags": ["Array", "Math", "DP", "Game Theory"], "input": {"stoneValue": [566175, 789447, 823933, 212839, 519248, 587213, 971355, 964696, 339066, 798866, 316477, 83745, 94051, 681456, 217933, 235831, 754158, 954721, 201990, 341271, 618988, 391370, 629263, 661317, 177812, 193994, 527239, 557707, 114658, 416424, 875936, 946497, 839857, 329757, 769138, 450165, 43605, 516682, 47021, 381305, 494626, 285996, 674747, 915815]}, "output": 20608222, "input_len": 353, "line": 3669}
{"problem": "Given an array nums that represents a permutation of integers from 1 to n. We are going to construct a binary search tree (BST) by inserting the elements of nums in order into an initially empty BST. Find the number of different ways to reorder nums so that the constructed BST is identical to that formed from the original array nums.\n\tFor example, given nums = [2,1,3], we will have 2 as the root, 1 as a left child, and 3 as a right child. The array [2,3,1] also yields the same BST but [3,2,1] yields a different BST.\nReturn the number of ways to reorder nums such that the BST formed is identical to the original BST formed from nums.\nSince the answer may be very large, return it modulo 10^9 + 7.", "tags": ["Tree", "Union Find", "BST", "Memoization", "Array", "Math", "Divide & Conquer", "DP", "Binary Tree", "Combinatorics"], "input": {"nums": [3, 17, 8, 11, 15, 7, 9, 13, 21, 4, 1, 19, 5, 20, 6, 16, 24, 14, 25, 10, 12, 18, 23, 22, 2]}, "output": 351198315, "input_len": 95, "line": 1071}
{"problem": "Given an array nums that represents a permutation of integers from 1 to n. We are going to construct a binary search tree (BST) by inserting the elements of nums in order into an initially empty BST. Find the number of different ways to reorder nums so that the constructed BST is identical to that formed from the original array nums.\n\tFor example, given nums = [2,1,3], we will have 2 as the root, 1 as a left child, and 3 as a right child. The array [2,3,1] also yields the same BST but [3,2,1] yields a different BST.\nReturn the number of ways to reorder nums such that the BST formed is identical to the original BST formed from nums.\nSince the answer may be very large, return it modulo 10^9 + 7.", "tags": ["Tree", "Union Find", "BST", "Memoization", "Array", "Math", "Divide & Conquer", "DP", "Binary Tree", "Combinatorics"], "input": {"nums": [10, 1, 7, 4, 5, 3, 6, 8, 2, 9]}, "output": 125, "input_len": 35, "line": 285}
{"problem": "You are given an array points representing integer coordinates of some points on a 2D-plane, where points[i] = [xi, yi].\nThe cost of connecting two points [xi, yi] and [xj, yj] is the manhattan distance between them: |xi - xj| + |yi - yj|, where |val| denotes the absolute value of val.\nReturn the minimum cost to make all points connected. All points are connected if there is exactly one simple path between any two points.", "tags": ["Union Find", "Graph", "Array", "MST"], "input": {"points": [[-704431, 914500], [160238, 75821], [-940703, -487835], [206738, 207309], [-178283, 812018]]}, "output": 3434955, "input_len": 85, "line": 216}
{"problem": "There are n cities numbered from 1 to n. You are given an array edges of size n-1, where edges[i] = [ui, vi] represents a bidirectional edge between cities ui and vi. There exists a unique path between each pair of cities. In other words, the cities form a tree.\nA subtree is a subset of cities where every city is reachable from every other city in the subset, where the path between each pair passes through only the cities from the subset. Two subtrees are different if there is a city in one subtree that is not present in the other.\nFor each d from 1 to n-1, find the number of subtrees in which the maximum distance between any two cities in the subtree is equal to d.\nReturn an array of size n-1 where the dth element (1-indexed) is the number of subtrees in which the maximum distance between any two cities is equal to d.\nNotice\u00a0that\u00a0the distance between the two cities is the number of edges in the path between them.", "tags": ["Bit Manipulation", "Tree", "DP", "Bitmask DP", "Enumeration"], "input": {"n": 6, "edges": [[1, 5], [3, 4], [4, 1], [2, 4], [6, 1]]}, "output": [5, 8, 9, 0, 0], "input_len": 41, "line": 2038}
{"problem": "Given n points on a 1-D plane, where the ith point (from 0 to n-1) is at x = i, find the number of ways we can draw exactly k non-overlapping line segments such that each segment covers two or more points. The endpoints of each segment must have integral coordinates. The k line segments do not have to cover all n points, and they are allowed to share endpoints.\nReturn the number of ways we can draw k non-overlapping line segments. Since this number can be huge, return it modulo 10^9 + 7.", "tags": ["Math", "DP", "Combinatorics"], "input": {"n": 33, "k": 1}, "output": 528, "input_len": 14, "line": 526}
{"problem": "Given n points on a 1-D plane, where the ith point (from 0 to n-1) is at x = i, find the number of ways we can draw exactly k non-overlapping line segments such that each segment covers two or more points. The endpoints of each segment must have integral coordinates. The k line segments do not have to cover all n points, and they are allowed to share endpoints.\nReturn the number of ways we can draw k non-overlapping line segments. Since this number can be huge, return it modulo 10^9 + 7.", "tags": ["Math", "DP", "Combinatorics"], "input": {"n": 23, "k": 15}, "output": 10295472, "input_len": 15, "line": 2830}
{"problem": "You are given a string s of even length consisting of digits from 0 to 9, and two integers a and b.\nYou can apply either of the following two operations any number of times and in any order on s:\n\tAdd a to all odd indices of s (0-indexed). Digits post 9 are cycled back to 0. For example, if s = \"3456\" and a = 5, s becomes \"3951\".\n\tRotate s to the right by b positions. For example, if s = \"3456\" and b = 1, s becomes \"6345\".\nReturn the lexicographically smallest string you can obtain by applying the above operations any number of times on s.\nA string a is lexicographically smaller than a string b (of the same length) if in the first position where a and b differ, string a has a letter that appears earlier in the alphabet than the corresponding letter in b. For example, \"0158\" is lexicographically smaller than \"0190\" because the first position they differ is at the third letter, and '5' comes before '9'.", "tags": ["DFS", "BFS", "String", "Enumeration"], "input": {"s": "951705271890605164454636840053291400", "a": 2, "b": 28}, "output": "012314966657604142328006592510069113", "input_len": 55, "line": 2304}
{"problem": "You are given a string s of even length consisting of digits from 0 to 9, and two integers a and b.\nYou can apply either of the following two operations any number of times and in any order on s:\n\tAdd a to all odd indices of s (0-indexed). Digits post 9 are cycled back to 0. For example, if s = \"3456\" and a = 5, s becomes \"3951\".\n\tRotate s to the right by b positions. For example, if s = \"3456\" and b = 1, s becomes \"6345\".\nReturn the lexicographically smallest string you can obtain by applying the above operations any number of times on s.\nA string a is lexicographically smaller than a string b (of the same length) if in the first position where a and b differ, string a has a letter that appears earlier in the alphabet than the corresponding letter in b. For example, \"0158\" is lexicographically smaller than \"0190\" because the first position they differ is at the third letter, and '5' comes before '9'.", "tags": ["DFS", "BFS", "String", "Enumeration"], "input": {"s": "4072", "a": 6, "b": 1}, "output": "0032", "input_len": 22, "line": 1912}
{"problem": "You are given a string s of even length consisting of digits from 0 to 9, and two integers a and b.\nYou can apply either of the following two operations any number of times and in any order on s:\n\tAdd a to all odd indices of s (0-indexed). Digits post 9 are cycled back to 0. For example, if s = \"3456\" and a = 5, s becomes \"3951\".\n\tRotate s to the right by b positions. For example, if s = \"3456\" and b = 1, s becomes \"6345\".\nReturn the lexicographically smallest string you can obtain by applying the above operations any number of times on s.\nA string a is lexicographically smaller than a string b (of the same length) if in the first position where a and b differ, string a has a letter that appears earlier in the alphabet than the corresponding letter in b. For example, \"0158\" is lexicographically smaller than \"0190\" because the first position they differ is at the third letter, and '5' comes before '9'.", "tags": ["DFS", "BFS", "String", "Enumeration"], "input": {"s": "86283125", "a": 7, "b": 6}, "output": "20332788", "input_len": 26, "line": 930}
{"problem": "You are given a string s of even length consisting of digits from 0 to 9, and two integers a and b.\nYou can apply either of the following two operations any number of times and in any order on s:\n\tAdd a to all odd indices of s (0-indexed). Digits post 9 are cycled back to 0. For example, if s = \"3456\" and a = 5, s becomes \"3951\".\n\tRotate s to the right by b positions. For example, if s = \"3456\" and b = 1, s becomes \"6345\".\nReturn the lexicographically smallest string you can obtain by applying the above operations any number of times on s.\nA string a is lexicographically smaller than a string b (of the same length) if in the first position where a and b differ, string a has a letter that appears earlier in the alphabet than the corresponding letter in b. For example, \"0158\" is lexicographically smaller than \"0190\" because the first position they differ is at the third letter, and '5' comes before '9'.", "tags": ["DFS", "BFS", "String", "Enumeration"], "input": {"s": "20932611020954", "a": 7, "b": 7}, "output": "00108532992251", "input_len": 32, "line": 5808}
{"problem": "You are given a string s of even length consisting of digits from 0 to 9, and two integers a and b.\nYou can apply either of the following two operations any number of times and in any order on s:\n\tAdd a to all odd indices of s (0-indexed). Digits post 9 are cycled back to 0. For example, if s = \"3456\" and a = 5, s becomes \"3951\".\n\tRotate s to the right by b positions. For example, if s = \"3456\" and b = 1, s becomes \"6345\".\nReturn the lexicographically smallest string you can obtain by applying the above operations any number of times on s.\nA string a is lexicographically smaller than a string b (of the same length) if in the first position where a and b differ, string a has a letter that appears earlier in the alphabet than the corresponding letter in b. For example, \"0158\" is lexicographically smaller than \"0190\" because the first position they differ is at the third letter, and '5' comes before '9'.", "tags": ["DFS", "BFS", "String", "Enumeration"], "input": {"s": "998553", "a": 7, "b": 3}, "output": "008443", "input_len": 24, "line": 4214}
{"problem": "You are given a string s of even length consisting of digits from 0 to 9, and two integers a and b.\nYou can apply either of the following two operations any number of times and in any order on s:\n\tAdd a to all odd indices of s (0-indexed). Digits post 9 are cycled back to 0. For example, if s = \"3456\" and a = 5, s becomes \"3951\".\n\tRotate s to the right by b positions. For example, if s = \"3456\" and b = 1, s becomes \"6345\".\nReturn the lexicographically smallest string you can obtain by applying the above operations any number of times on s.\nA string a is lexicographically smaller than a string b (of the same length) if in the first position where a and b differ, string a has a letter that appears earlier in the alphabet than the corresponding letter in b. For example, \"0158\" is lexicographically smaller than \"0190\" because the first position they differ is at the third letter, and '5' comes before '9'.", "tags": ["DFS", "BFS", "String", "Enumeration"], "input": {"s": "8302286968566481400633398700", "a": 7, "b": 24}, "output": "2061605866834208353189028504", "input_len": 47, "line": 3020}
{"problem": "You are given a string s of even length consisting of digits from 0 to 9, and two integers a and b.\nYou can apply either of the following two operations any number of times and in any order on s:\n\tAdd a to all odd indices of s (0-indexed). Digits post 9 are cycled back to 0. For example, if s = \"3456\" and a = 5, s becomes \"3951\".\n\tRotate s to the right by b positions. For example, if s = \"3456\" and b = 1, s becomes \"6345\".\nReturn the lexicographically smallest string you can obtain by applying the above operations any number of times on s.\nA string a is lexicographically smaller than a string b (of the same length) if in the first position where a and b differ, string a has a letter that appears earlier in the alphabet than the corresponding letter in b. For example, \"0158\" is lexicographically smaller than \"0190\" because the first position they differ is at the third letter, and '5' comes before '9'.", "tags": ["DFS", "BFS", "String", "Enumeration"], "input": {"s": "5538", "a": 1, "b": 3}, "output": "0027", "input_len": 22, "line": 7612}
{"problem": "You are given a string s of even length consisting of digits from 0 to 9, and two integers a and b.\nYou can apply either of the following two operations any number of times and in any order on s:\n\tAdd a to all odd indices of s (0-indexed). Digits post 9 are cycled back to 0. For example, if s = \"3456\" and a = 5, s becomes \"3951\".\n\tRotate s to the right by b positions. For example, if s = \"3456\" and b = 1, s becomes \"6345\".\nReturn the lexicographically smallest string you can obtain by applying the above operations any number of times on s.\nA string a is lexicographically smaller than a string b (of the same length) if in the first position where a and b differ, string a has a letter that appears earlier in the alphabet than the corresponding letter in b. For example, \"0158\" is lexicographically smaller than \"0190\" because the first position they differ is at the third letter, and '5' comes before '9'.", "tags": ["DFS", "BFS", "String", "Enumeration"], "input": {"s": "4185", "a": 8, "b": 2}, "output": "4185", "input_len": 22, "line": 195}
{"problem": "You are given a string s of even length consisting of digits from 0 to 9, and two integers a and b.\nYou can apply either of the following two operations any number of times and in any order on s:\n\tAdd a to all odd indices of s (0-indexed). Digits post 9 are cycled back to 0. For example, if s = \"3456\" and a = 5, s becomes \"3951\".\n\tRotate s to the right by b positions. For example, if s = \"3456\" and b = 1, s becomes \"6345\".\nReturn the lexicographically smallest string you can obtain by applying the above operations any number of times on s.\nA string a is lexicographically smaller than a string b (of the same length) if in the first position where a and b differ, string a has a letter that appears earlier in the alphabet than the corresponding letter in b. For example, \"0158\" is lexicographically smaller than \"0190\" because the first position they differ is at the third letter, and '5' comes before '9'.", "tags": ["DFS", "BFS", "String", "Enumeration"], "input": {"s": "0454", "a": 5, "b": 1}, "output": "0454", "input_len": 22, "line": 157}
{"problem": "You are given a string s of even length consisting of digits from 0 to 9, and two integers a and b.\nYou can apply either of the following two operations any number of times and in any order on s:\n\tAdd a to all odd indices of s (0-indexed). Digits post 9 are cycled back to 0. For example, if s = \"3456\" and a = 5, s becomes \"3951\".\n\tRotate s to the right by b positions. For example, if s = \"3456\" and b = 1, s becomes \"6345\".\nReturn the lexicographically smallest string you can obtain by applying the above operations any number of times on s.\nA string a is lexicographically smaller than a string b (of the same length) if in the first position where a and b differ, string a has a letter that appears earlier in the alphabet than the corresponding letter in b. For example, \"0158\" is lexicographically smaller than \"0190\" because the first position they differ is at the third letter, and '5' comes before '9'.", "tags": ["DFS", "BFS", "String", "Enumeration"], "input": {"s": "93808667938256298718", "a": 3, "b": 2}, "output": "10958288699584582189", "input_len": 38, "line": 3508}
{"problem": "You are given a list of strings of the same length words and a string target.\nYour task is to form target using the given words under the following rules:\n\ttarget should be formed from left to right.\n\tTo form the ith character (0-indexed) of target, you can choose the kth character of the jth string in words if target[i] = words[j][k].\n\tOnce you use the kth character of the jth string of words, you can no longer use the xth character of any string in words where x <= k. In other words, all characters to the left of or at index k become unusuable for every string.\n\tRepeat the process until you form the string target.\nNotice that you can use multiple characters from the same string in words provided the conditions above are met.\nReturn the number of ways to form target from words. Since the answer may be too large, return it modulo 10^9 + 7.", "tags": ["Array", "String", "DP"], "input": {"words": ["glsqhfwziqffumuqljrhheeglklsziqskgkayj", "hjsvplmywnvldqbdwlnyueajrkvhvcylbiurxy", "hcqlcbnhdktyckvzjcszfproxlyeicrllouxrh"], "target": "oxrrx"}, "output": 1, "input_len": 82, "line": 1300}
{"problem": "You are given a string s consisting only of characters 'a' and 'b'\u200b\u200b\u200b\u200b.\nYou can delete any number of characters in s to make s balanced. s is balanced if there is no pair of indices (i,j) such that i < j and s[i] = 'b' and s[j]= 'a'.\nReturn the minimum number of deletions needed to make s balanced.", "tags": ["Stack", "String", "DP"], "input": {"s": "aaabbbaababaaaabababbbbabbbababababaabbababaabbabbbabbbbaaababbaaaabaabbbabbabaaaaaaaaabbaabbaaabbbbabbaa"}, "output": 48, "input_len": 50, "line": 373}
{"problem": "You may recall that an array arr is a mountain array if and only if:\n\tarr.length >= 3\n\tThere exists some index i (0-indexed) with 0 < i < arr.length - 1 such that:\n\t\tarr[0] < arr[1] < ... < arr[i - 1] < arr[i]\n\t\tarr[i] > arr[i + 1] > ... > arr[arr.length - 1]\nGiven an integer array nums\u200b\u200b\u200b, return the minimum number of elements to remove to make nums\u200b\u200b\u200b a mountain array.", "tags": ["Greedy", "Array", "Binary Search", "DP"], "input": {"nums": [632610291, 760205761, 512043466, 940360184, 239655847, 92207825, 652918698, 488666158, 273404141, 811908673, 202148948, 73371436, 72643065, 270253742, 707845719, 673068444, 102124008, 404590059, 748597492, 939460309, 480898983, 114028190, 508057528, 783115956, 698034144, 930956511, 920815269, 356703243, 313690477, 51592256, 168016282, 631808417, 766215104, 754658591, 976764947, 455769806, 708559265, 632190674, 52487989, 336951848, 139212442, 35037454]}, "output": 26, "input_len": 460, "line": 4520}
{"problem": "You may recall that an array arr is a mountain array if and only if:\n\tarr.length >= 3\n\tThere exists some index i (0-indexed) with 0 < i < arr.length - 1 such that:\n\t\tarr[0] < arr[1] < ... < arr[i - 1] < arr[i]\n\t\tarr[i] > arr[i + 1] > ... > arr[arr.length - 1]\nGiven an integer array nums\u200b\u200b\u200b, return the minimum number of elements to remove to make nums\u200b\u200b\u200b a mountain array.", "tags": ["Greedy", "Array", "Binary Search", "DP"], "input": {"nums": [19850596, 230410676, 881239153, 982512440, 1979016, 227710736, 785211381, 33957289, 87905022, 424785330, 809205440, 918402944, 962376916, 71002614, 933202888, 220196346, 998017497, 169799931, 519583458, 871804496, 626091630, 269471585]}, "output": 11, "input_len": 240, "line": 1270}
{"problem": "A subsequence of a string s is considered a good palindromic subsequence if:\n\tIt is a subsequence of s.\n\tIt is a palindrome (has the same value if reversed).\n\tIt has an even length.\n\tNo two consecutive characters are equal, except the two middle ones.\nFor example, if s = \"abcabcabb\", then \"abba\" is considered a good palindromic subsequence, while \"bcb\" (not even length) and \"bbbb\" (has equal consecutive characters) are not.\nGiven a string s, return the length of the longest good palindromic subsequence in s.", "tags": ["String", "DP"], "input": {"s": "mluhopmqms"}, "output": 2, "input_len": 11, "line": 251}
{"problem": "A subsequence of a string s is considered a good palindromic subsequence if:\n\tIt is a subsequence of s.\n\tIt is a palindrome (has the same value if reversed).\n\tIt has an even length.\n\tNo two consecutive characters are equal, except the two middle ones.\nFor example, if s = \"abcabcabb\", then \"abba\" is considered a good palindromic subsequence, while \"bcb\" (not even length) and \"bbbb\" (has equal consecutive characters) are not.\nGiven a string s, return the length of the longest good palindromic subsequence in s.", "tags": ["String", "DP"], "input": {"s": "wdvxjyjhxqnuvsdjnsnjicrmgxxbfcgtcbsklqygbeb"}, "output": 12, "input_len": 31, "line": 7968}
{"problem": "Alice and Bob take turns playing a game, with Alice starting first.\nThere are n stones arranged in a row. On each player's turn, they can remove either the leftmost stone or the rightmost stone from the row and receive points equal to the sum of the remaining stones' values in the row. The winner is the one with the higher score when there are no stones left to remove.\nBob found that he will always lose this game (poor Bob, he always loses), so he decided to minimize the score's difference. Alice's goal is to maximize the difference in the score.\nGiven an array of integers stones where stones[i] represents the value of the ith stone from the left, return the difference in Alice and Bob's score if they both play optimally.", "tags": ["Array", "Math", "DP", "Game Theory"], "input": {"stones": [462, 64, 906, 55, 278, 184, 158, 52, 446, 972, 415, 880, 161, 380, 486, 412, 257, 289, 734, 958, 3, 916, 531, 514, 186, 222, 262, 357, 445, 276, 490, 821, 544, 624, 123, 336, 777, 272, 333, 131, 596, 215, 276]}, "output": 7505, "input_len": 214, "line": 3915}
{"problem": "There are n unique candies (labeled 1 through n) and k bags. You are asked to distribute all the candies into the bags such that every bag has at least one candy.\nThere can be multiple ways to distribute the candies. Two ways are considered different if the candies in one bag in the first way are not all in the same bag in the second way. The order of the bags and the order of the candies within each bag do not matter.\nFor example, (1), (2,3) and (2), (1,3) are considered different because candies 2 and 3 in the bag (2,3) in the first way are not in the same bag in the second way (they are split between the bags (2) and (1,3)). However, (1), (2,3) and (3,2), (1) are considered the same because the candies in each bag are all in the same bags in both ways.\nGiven two integers, n and k, return the number of different ways to distribute the candies. As the answer may be too large, return it modulo 10^9 + 7.", "tags": ["DP"], "input": {"n": 70, "k": 62}, "output": 446565632, "input_len": 15, "line": 8899}
{"problem": "There are n unique candies (labeled 1 through n) and k bags. You are asked to distribute all the candies into the bags such that every bag has at least one candy.\nThere can be multiple ways to distribute the candies. Two ways are considered different if the candies in one bag in the first way are not all in the same bag in the second way. The order of the bags and the order of the candies within each bag do not matter.\nFor example, (1), (2,3) and (2), (1,3) are considered different because candies 2 and 3 in the bag (2,3) in the first way are not in the same bag in the second way (they are split between the bags (2) and (1,3)). However, (1), (2,3) and (3,2), (1) are considered the same because the candies in each bag are all in the same bags in both ways.\nGiven two integers, n and k, return the number of different ways to distribute the candies. As the answer may be too large, return it modulo 10^9 + 7.", "tags": ["DP"], "input": {"n": 21, "k": 10}, "output": 131792966, "input_len": 15, "line": 492}
{"problem": "You are working in a ball factory where you have n balls numbered from lowLimit up to highLimit inclusive (i.e., n == highLimit - lowLimit + 1), and an infinite number of boxes numbered from 1 to infinity.\nYour job at this factory is to put each ball in the box with a number equal to the sum of digits of the ball's number. For example, the ball number 321 will be put in the box number 3 + 2 + 1 = 6 and the ball number 10 will be put in the box number 1 + 0 = 1.\nGiven two integers lowLimit and highLimit, return the number of balls in the box with the most balls.", "tags": ["Hash Table", "Math", "Counting"], "input": {"lowLimit": 29, "highLimit": 173}, "output": 15, "input_len": 18, "line": 1677}
{"problem": "Given a string s, return the number of homogenous substrings of s. Since the answer may be too large, return it modulo 10^9 + 7.\nA string is homogenous if all the characters of the string are the same.\nA substring is a contiguous sequence of characters within a string.", "tags": ["Math", "String"], "input": {"s": "zhitblgivjppimmnncpwgkymzbtabjwlfwmjsthaizngqyghwyeomaetticbpwvdtsnwjsmikflqitjteyynqfcrzxqhjhkzyxoyigjgydroiyvouwgzropppyjnfvadyofvvrjjqzzfzlwlgwkqobywbosz"}, "output": 167, "input_len": 94, "line": 1341}
{"problem": "You are given an integer matrix isWater of size m x n that represents a map of land and water cells.\n\tIf isWater[i][j] == 0, cell (i, j) is a land cell.\n\tIf isWater[i][j] == 1, cell (i, j) is a water cell.\nYou must assign each cell a height in a way that follows these rules:\n\tThe height of each cell must be non-negative.\n\tIf the cell is a water cell, its height must be 0.\n\tAny two adjacent cells must have an absolute height difference of at most 1. A cell is adjacent to another cell if the former is directly north, east, south, or west of the latter (i.e., their sides are touching).\nFind an assignment of heights such that the maximum height in the matrix is maximized.\nReturn an integer matrix height of size m x n where height[i][j] is cell (i, j)'s height. If there are multiple solutions, return any of them.", "tags": ["BFS", "Array", "Matrix"], "input": {"isWater}, "outputinput_len": 738, "line": 5377}
{"problem": "You are given an integer matrix isWater of size m x n that represents a map of land and water cells.\n\tIf isWater[i][j] == 0, cell (i, j) is a land cell.\n\tIf isWater[i][j] == 1, cell (i, j) is a water cell.\nYou must assign each cell a height in a way that follows these rules:\n\tThe height of each cell must be non-negative.\n\tIf the cell is a water cell, its height must be 0.\n\tAny two adjacent cells must have an absolute height difference of at most 1. A cell is adjacent to another cell if the former is directly north, east, south, or west of the latter (i.e., their sides are touching).\nFind an assignment of heights such that the maximum height in the matrix is maximized.\nReturn an integer matrix height of size m x n where height[i][j] is cell (i, j)'s height. If there are multiple solutions, return any of them.", "tags": ["BFS", "Array", "Matrix"], "input": {"isWater": [[1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0], [1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0], [1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1], [1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0]]}, "output": [[0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 2, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 2, 2, 1, 0, 0, 0, 0, 1, 1, 2, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 2, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 2, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1], [0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 2, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 2, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0], [0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1], [1, 2, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 2, 1, 0, 1, 1, 0, 0, 1, 2]], "input_len": 1086, "line": 6864}
{"problem": "You are given an integer matrix isWater of size m x n that represents a map of land and water cells.\n\tIf isWater[i][j] == 0, cell (i, j) is a land cell.\n\tIf isWater[i][j] == 1, cell (i, j) is a water cell.\nYou must assign each cell a height in a way that follows these rules:\n\tThe height of each cell must be non-negative.\n\tIf the cell is a water cell, its height must be 0.\n\tAny two adjacent cells must have an absolute height difference of at most 1. A cell is adjacent to another cell if the former is directly north, east, south, or west of the latter (i.e., their sides are touching).\nFind an assignment of heights such that the maximum height in the matrix is maximized.\nReturn an integer matrix height of size m x n where height[i][j] is cell (i, j)'s height. If there are multiple solutions, return any of them.", "tags": ["BFS", "Array", "Matrix"], "input": {"isWater": [[0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0], [1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1]]}, "output": [[1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 2, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1], [0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 2, 1, 0, 0, 1, 0, 1, 0, 1, 2, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0]], "input_len": 246, "line": 1535}
{"problem": "You are given an integer matrix isWater of size m x n that represents a map of land and water cells.\n\tIf isWater[i][j] == 0, cell (i, j) is a land cell.\n\tIf isWater[i][j] == 1, cell (i, j) is a water cell.\nYou must assign each cell a height in a way that follows these rules:\n\tThe height of each cell must be non-negative.\n\tIf the cell is a water cell, its height must be 0.\n\tAny two adjacent cells must have an absolute height difference of at most 1. A cell is adjacent to another cell if the former is directly north, east, south, or west of the latter (i.e., their sides are touching).\nFind an assignment of heights such that the maximum height in the matrix is maximized.\nReturn an integer matrix height of size m x n where height[i][j] is cell (i, j)'s height. If there are multiple solutions, return any of them.", "tags": ["BFS", "Array", "Matrix"], "input": {"isWater": [[0, 1, 1, 0, 1, 1], [0, 0, 1, 0, 1, 1], [0, 1, 0, 0, 0, 1], [1, 0, 0, 1, 0, 0], [1, 1, 0, 0, 1, 1], [1, 1, 0, 1, 1, 0], [1, 1, 1, 1, 1, 0], [1, 0, 0, 0, 0, 0], [1, 1, 0, 0, 1, 0], [1, 1, 1, 1, 0, 1], [0, 0, 0, 1, 1, 1], [1, 0, 0, 0, 1, 1], [0, 0, 0, 1, 0, 0], [1, 1, 0, 0, 0, 1], [0, 1, 0, 1, 1, 1], [1, 1, 1, 1, 1, 0], [1, 0, 1, 0, 1, 0], [0, 0, 1, 0, 1, 0], [0, 1, 1, 0, 0, 0], [1, 0, 0, 0, 0, 0], [1, 0, 0, 1, 1, 0], [0, 1, 0, 1, 1, 1], [1, 1, 1, 0, 0, 1], [0, 1, 1, 0, 0, 1], [0, 0, 1, 1, 1, 0], [0, 1, 1, 1, 0, 0], [1, 1, 0, 1, 1, 1], [1, 1, 1, 1, 0, 0], [1, 0, 1, 1, 0, 0], [1, 0, 0, 0, 1, 1], [1, 1, 0, 0, 1, 1], [1, 0, 1, 0, 1, 0], [0, 1, 1, 1, 1, 0], [1, 1, 1, 1, 0, 0], [0, 0, 1, 0, 0, 0], [0, 1, 0, 1, 1, 1], [1, 0, 1, 0, 1, 0], [1, 1, 0, 1, 0, 0], [0, 0, 1, 0, 0, 0], [1, 0, 1, 1, 0, 0], [0, 0, 0, 1, 1, 0], [0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 1, 1], [0, 0, 1, 0, 0, 1], [0, 0, 0, 0, 1, 0], [0, 0, 1, 1, 0, 1]]}, "output": [[1, 0, 0, 1, 0, 0], [2, 1, 0, 1, 0, 0], [1, 0, 1, 1, 1, 0], [0, 1, 1, 0, 1, 1], [0, 0, 1, 1, 0, 0], [0, 0, 1, 0, 0, 1], [0, 0, 0, 0, 0, 1], [0, 1, 1, 1, 1, 2], [0, 0, 1, 1, 0, 1], [0, 0, 0, 0, 1, 0], [1, 1, 1, 0, 0, 0], [0, 1, 2, 1, 0, 0], [1, 1, 1, 0, 1, 1], [0, 0, 1, 1, 1, 0], [1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 1], [0, 1, 0, 1, 0, 1], [1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 1, 2], [0, 1, 1, 1, 1, 2], [0, 1, 1, 0, 0, 1], [1, 0, 1, 0, 0, 0], [0, 0, 0, 1, 1, 0], [1, 0, 0, 1, 1, 0], [2, 1, 0, 0, 0, 1], [1, 0, 0, 0, 1, 1], [0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 1], [0, 1, 0, 0, 1, 1], [0, 1, 1, 1, 0, 0], [0, 0, 1, 1, 0, 0], [0, 1, 0, 1, 0, 1], [1, 0, 0, 0, 0, 1], [0, 0, 0, 0, 1, 2], [1, 1, 0, 1, 1, 1], [1, 0, 1, 0, 0, 0], [0, 1, 0, 1, 0, 1], [0, 0, 1, 0, 1, 2], [1, 1, 0, 1, 2, 3], [0, 1, 0, 0, 1, 2], [1, 2, 1, 0, 0, 1], [1, 1, 0, 0, 1, 1], [0, 0, 0, 0, 0, 0], [1, 1, 0, 1, 1, 0], [2, 2, 1, 1, 0, 1], [2, 1, 0, 0, 1, 0]], "input_len": 834, "line": 5391}
{"problem": "You are given an integer matrix isWater of size m x n that represents a map of land and water cells.\n\tIf isWater[i][j] == 0, cell (i, j) is a land cell.\n\tIf isWater[i][j] == 1, cell (i, j) is a water cell.\nYou must assign each cell a height in a way that follows these rules:\n\tThe height of each cell must be non-negative.\n\tIf the cell is a water cell, its height must be 0.\n\tAny two adjacent cells must have an absolute height difference of at most 1. A cell is adjacent to another cell if the former is directly north, east, south, or west of the latter (i.e., their sides are touching).\nFind an assignment of heights such that the maximum height in the matrix is maximized.\nReturn an integer matrix height of size m x n where height[i][j] is cell (i, j)'s height. If there are multiple solutions, return any of them.", "tags": ["BFS", "Array", "Matrix"], "input": {"isWater": [[0, 1], [0, 0], [0, 0], [0, 1], [0, 1], [1, 1], [1, 0], [1, 1], [1, 0], [1, 0]]}, "output": [[1, 0], [2, 1], [2, 1], [1, 0], [1, 0], [0, 0], [0, 1], [0, 0], [0, 1], [0, 1]], "input_len": 66, "line": 419}
{"problem": "You are given an integer matrix isWater of size m x n that represents a map of land and water cells.\n\tIf isWater[i][j] == 0, cell (i, j) is a land cell.\n\tIf isWater[i][j] == 1, cell (i, j) is a water cell.\nYou must assign each cell a height in a way that follows these rules:\n\tThe height of each cell must be non-negative.\n\tIf the cell is a water cell, its height must be 0.\n\tAny two adjacent cells must have an absolute height difference of at most 1. A cell is adjacent to another cell if the former is directly north, east, south, or west of the latter (i.e., their sides are touching).\nFind an assignment of heights such that the maximum height in the matrix is maximized.\nReturn an integer matrix height of size m x n where height[i][j] is cell (i, j)'s height. If there are multiple solutions, return any of them.", "tags": ["BFS", "Array", "Matrix"], "input": {"isWater": [[1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0], [1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1], [0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0], [1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1], [1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1]]}, "output": [[0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 2, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0], [1, 1, 0, 0, 0, 1, 2, 1, 0, 1, 2, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1], [0, 1, 1, 0, 1, 2, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 2, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 2, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 2, 1, 0, 0, 1, 0, 0, 1, 1, 0], [1, 2, 1, 0, 1, 2, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0]], "input_len": 726, "line": 4587}
{"problem": "You are given an integer matrix isWater of size m x n that represents a map of land and water cells.\n\tIf isWater[i][j] == 0, cell (i, j) is a land cell.\n\tIf isWater[i][j] == 1, cell (i, j) is a water cell.\nYou must assign each cell a height in a way that follows these rules:\n\tThe height of each cell must be non-negative.\n\tIf the cell is a water cell, its height must be 0.\n\tAny two adjacent cells must have an absolute height difference of at most 1. A cell is adjacent to another cell if the former is directly north, east, south, or west of the latter (i.e., their sides are touching).\nFind an assignment of heights such that the maximum height in the matrix is maximized.\nReturn an integer matrix height of size m x n where height[i][j] is cell (i, j)'s height. If there are multiple solutions, return any of them.", "tags": ["BFS", "Array", "Matrix"], "input": {"isWater": [[0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0]]}, "output": [[2, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 2, 1, 0, 0, 0, 0, 1, 2, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 2, 1, 0, 1, 2, 2, 1, 0, 1, 2, 3, 2, 1, 0, 1, 2, 1, 0, 1, 2, 3, 2, 1, 0, 1, 2, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 2, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 2, 1, 0, 1, 0, 1, 2, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 2, 3, 2, 1, 0, 0, 1, 0, 1, 0, 1, 2, 3, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 2, 2, 1, 0, 1, 2, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 2, 1, 0, 0, 0, 1, 1, 0, 1, 2, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 2, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 2, 2, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1]], "input_len": 792, "line": 4990}
{"problem": "You are given an integer matrix isWater of size m x n that represents a map of land and water cells.\n\tIf isWater[i][j] == 0, cell (i, j) is a land cell.\n\tIf isWater[i][j] == 1, cell (i, j) is a water cell.\nYou must assign each cell a height in a way that follows these rules:\n\tThe height of each cell must be non-negative.\n\tIf the cell is a water cell, its height must be 0.\n\tAny two adjacent cells must have an absolute height difference of at most 1. A cell is adjacent to another cell if the former is directly north, east, south, or west of the latter (i.e., their sides are touching).\nFind an assignment of heights such that the maximum height in the matrix is maximized.\nReturn an integer matrix height of size m x n where height[i][j] is cell (i, j)'s height. If there are multiple solutions, return any of them.", "tags": ["BFS", "Array", "Matrix"], "input": {"isWater": [[1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1]]}, "output": [[0, 0, 0, 0, 0, 1, 0, 1, 2, 2, 1, 0, 0, 0, 1, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 2, 1, 0, 1, 2, 3, 3, 2, 1, 0, 0, 0, 1, 2, 1, 0, 0, 1, 2, 3, 2, 1, 0, 0, 1, 0, 0, 1, 2, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 2, 3, 3, 2, 1, 0, 1, 1, 0, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 2, 1, 0, 0, 1, 0, 0, 1, 2, 1, 0, 1, 2, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 2, 2, 1, 0, 1, 0, 0, 1, 2, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 2, 2, 1, 0, 0, 0, 0, 0, 1, 2, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 2, 2, 1, 0, 1, 2, 3, 2, 1, 0, 0, 0, 1, 2, 2, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 2, 1, 0, 0, 1, 1, 0, 1, 2, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 2, 1, 0, 0, 1, 2, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 2, 2, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 2, 2, 1, 0, 1, 0, 0, 1, 2, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 1, 0, 0, 0, 0, 1, 2, 1, 0, 1, 1, 0]], "input_len": 1044, "line": 6586}
{"problem": "You are given an integer matrix isWater of size m x n that represents a map of land and water cells.\n\tIf isWater[i][j] == 0, cell (i, j) is a land cell.\n\tIf isWater[i][j] == 1, cell (i, j) is a water cell.\nYou must assign each cell a height in a way that follows these rules:\n\tThe height of each cell must be non-negative.\n\tIf the cell is a water cell, its height must be 0.\n\tAny two adjacent cells must have an absolute height difference of at most 1. A cell is adjacent to another cell if the former is directly north, east, south, or west of the latter (i.e., their sides are touching).\nFind an assignment of heights such that the maximum height in the matrix is maximized.\nReturn an integer matrix height of size m x n where height[i][j] is cell (i, j)'s height. If there are multiple solutions, return any of them.", "tags": ["BFS", "Array", "Matrix"], "input": {"isWater": [[1], [0], [0], [1], [1], [1], [0], [1], [0], [0], [1], [1], [0], [0], [1], [0], [0], [0], [1], [0], [0], [0], [0], [1], [0], [1], [1], [0], [1], [1], [1], [0]]}, "output": [[0], [1], [1], [0], [0], [0], [1], [0], [1], [1], [0], [0], [1], [1], [0], [1], [2], [1], [0], [1], [2], [2], [1], [0], [1], [0], [0], [1], [0], [0], [0], [1]], "input_len": 102, "line": 713}
{"problem": "You are given an integer matrix isWater of size m x n that represents a map of land and water cells.\n\tIf isWater[i][j] == 0, cell (i, j) is a land cell.\n\tIf isWater[i][j] == 1, cell (i, j) is a water cell.\nYou must assign each cell a height in a way that follows these rules:\n\tThe height of each cell must be non-negative.\n\tIf the cell is a water cell, its height must be 0.\n\tAny two adjacent cells must have an absolute height difference of at most 1. A cell is adjacent to another cell if the former is directly north, east, south, or west of the latter (i.e., their sides are touching).\nFind an assignment of heights such that the maximum height in the matrix is maximized.\nReturn an integer matrix height of size m x n where height[i][j] is cell (i, j)'s height. If there are multiple solutions, return any of them.", "tags": ["BFS", "Array", "Matrix"], "input": {"isWater": [[1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0]]}, "output": [[0, 0, 0, 0, 1, 1, 2, 2, 1, 2, 3, 2, 3], [0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 2, 1, 2], [1, 0, 1, 0, 0, 0, 1, 0, 1, 2, 1, 0, 1]], "input_len": 123, "line": 759}
{"problem": "The beauty of a string is the difference in frequencies between the most frequent and least frequent characters.\n\tFor example, the beauty of \"abaacc\" is 3 - 1 = 2.\nGiven a string s, return the sum of beauty of all of its substrings.", "tags": ["Hash Table", "String", "Counting"], "input": {"s": "jqtxenjywdhrtcajkqbowoclulykonfrdrxncdlgynwkxlhlujmtdntfbgkgsegltpryulmmq"}, "output": 5951, "input_len": 44, "line": 9900}
{"problem": "You are given two strings firstString and secondString that are 0-indexed and consist only of lowercase English letters. Count the number of index quadruples (i,j,a,b) that satisfy the following conditions:\n\t0 <= i <= j < firstString.length\n\t0 <= a <= b < secondString.length\n\tThe substring of firstString that starts at the ith character and ends at the jth character (inclusive) is equal to the substring of secondString that starts at the ath character and ends at the bth character (inclusive).\n\tj - a is the minimum possible value among all quadruples that satisfy the previous conditions.\nReturn the number of such quadruples.", "tags": ["Greedy", "Hash Table", "String"], "input": {"firstString": "xeglancxnhxyjowewanmejonfvkdoxhxztbswubpuvcwoikrbdfgbaowiqdmpaqhbqbiukyptlwmkudmwbifbfepbekyauvtqjciyazhjoaswdauelqrekkhrtssdzbvdzdxhuuedvxsktklmcdcfeygveooazrqaozmocnyvzvqvtxkrhsizjfeoppeugoeprcbsolbmzvpijnqgbjaiorutsuzzcwbfsdomrzccctqoxftspeurfhsvsvxwqjrkwbqluugjnjzmeolcwgcmkwpemssumklfyidkkoubbbataciymszyolhbhpfhftzecfjdyzchfytyingzltjebbcjysdkgmjnzgozsllqbrqdcwszcpqutmemvrjeehmggorxbqdqangzeikqrrynbiulypbqygeibltpfccvatwnzibadhmlbtoasfbkwjcnjbwvmvthlnkasrojgxeqicuggbchbjgcijwnvsybiuypmojkdmqilcnvnxoizifnehowldxicwylxjotsrctuwbjmqbztyosbwozsdxwknyslfvlvqjwnbegkymeyeeozkldlpbkybnlsabcgmtqpmqzurkayyhnijghljxakbnhuwwzvpnbqvmxuzvsnijrkcxybxvhqbfjogcorfdfuqjywerrgytpfmcfvjtmtdsklfjdihoncvbdnqvijijqsmfroxerayngntbryjpsfzkxdipsocvhwkxwykupmfunhxztflkztsxhnnwhtpfldcrqrkmjbhlzzwmxoohahxtcyorsaquehhxaatgtieamimoseakqmbxnvxwrzuydkmlctqseyafcyjmkatayzfmhsqcvefrmqjurtvwtvwsthzusvcbcfhgaiuwxsnhdmasjctiwrzmshizamiabsabmxhxxfngcecsmpeoiyzqiirvsxhyyudukjufoqacwgfmomacnfrvoiwvykpzquujzunpykgajbupdpmwxaow", "secondString": "dahuwtmeutuficyrelisdiyquufxvbohpvxifwqvzokmibdjtnmcpjpxvbrunyqbbmrxyrgwzzzlnjjzcr"}, "output": 1, "input_len": 611, "line": 5113}
{"problem": "There is a 3 lane road of length n that consists of n + 1 points labeled from 0 to n. A frog starts at point 0 in the second lane and wants to jump to point n. However, there could be obstacles along the way.\nYou are given an array obstacles of length n + 1 where each obstacles[i] (ranging from 0 to 3) describes an obstacle on the lane obstacles[i] at point i. If obstacles[i] == 0, there are no obstacles at point i. There will be at most one obstacle in the 3 lanes at each point.\n\tFor example, if obstacles[2] == 1, then there is an obstacle on lane 1 at point 2.\nThe frog can only travel from point i to point i + 1 on the same lane if there is not an obstacle on the lane at point i + 1. To avoid obstacles, the frog can also perform a side jump to jump to another lane (even if they are not adjacent) at the same point if there is no obstacle on the new lane.\n\tFor example, the frog can jump from lane 3 at point 3 to lane 1 at point 3.\nReturn the minimum number of side jumps the frog needs to reach any lane at point n starting from lane 2 at point 0.\nNote: There will be no obstacles on points 0 and n.", "tags": ["Greedy", "Array", "DP"], "input": {"obstacles": [0, 2, 1, 3, 0, 2, 3, 2, 0, 1, 2, 0]}, "output": 4, "input_len": 41, "line": 198}
{"problem": "There is a 3 lane road of length n that consists of n + 1 points labeled from 0 to n. A frog starts at point 0 in the second lane and wants to jump to point n. However, there could be obstacles along the way.\nYou are given an array obstacles of length n + 1 where each obstacles[i] (ranging from 0 to 3) describes an obstacle on the lane obstacles[i] at point i. If obstacles[i] == 0, there are no obstacles at point i. There will be at most one obstacle in the 3 lanes at each point.\n\tFor example, if obstacles[2] == 1, then there is an obstacle on lane 1 at point 2.\nThe frog can only travel from point i to point i + 1 on the same lane if there is not an obstacle on the lane at point i + 1. To avoid obstacles, the frog can also perform a side jump to jump to another lane (even if they are not adjacent) at the same point if there is no obstacle on the new lane.\n\tFor example, the frog can jump from lane 3 at point 3 to lane 1 at point 3.\nReturn the minimum number of side jumps the frog needs to reach any lane at point n starting from lane 2 at point 0.\nNote: There will be no obstacles on points 0 and n.", "tags": ["Greedy", "Array", "DP"], "input": {"obstacles": [0, 1, 0, 3, 3, 1, 0, 3, 1, 2, 3, 1, 1, 0, 2, 1, 1, 2, 0, 1, 3, 3, 1, 2, 3, 3, 0, 3, 1, 2, 2, 0, 2, 2, 1, 3, 0, 3, 0, 3, 1, 3, 2, 2, 3, 2, 0, 0, 1, 2, 3, 0, 3, 1, 1, 0, 2, 2, 0, 2, 2, 2, 0, 3, 0, 3, 3, 1, 0, 1, 3, 3, 2, 1, 1, 1, 0, 3, 2, 3, 0, 0, 0, 3, 0, 1, 0, 2, 0, 0, 2, 3, 0, 1, 2, 2, 0]}, "output": 22, "input_len": 296, "line": 1695}
{"problem": "A string is considered beautiful if it satisfies the following conditions:\n\tEach of the 5 English vowels ('a', 'e', 'i', 'o', 'u') must appear at least once in it.\n\tThe letters must be sorted in alphabetical order (i.e. all 'a's before 'e's, all 'e's before 'i's, etc.).\nFor example, strings \"aeiou\" and \"aaaaaaeiiiioou\" are considered beautiful, but \"uaeio\", \"aeoiu\", and \"aaaeeeooo\" are not beautiful.\nGiven a string word consisting of English vowels, return the length of the longest beautiful substring of word. If no such substring exists, return 0.\nA substring is a contiguous sequence of characters in a string.", "tags": ["String", "Sliding Window"], "input": {"word": "aiiuauaaieaaaeuoeaieuiaiuioeoioiiuueaieeoeueeieuuuoieaeeaueouaoaeoouuuaiaiaaueaiouiaaoueeoaaiauoaauoiiuoooioeoeoeeoaioeaeauuuiieaeeoaeiaaiiueuouoeuooaeeuiuiaiaueeaoiaaueeuooeuuiaauoaeio"}, "output": 0, "input_len": 112, "line": 1551}
{"problem": "You are given a string num, representing a large integer, and an integer k.\nWe call some integer wonderful if it is a permutation of the digits in num and is greater in value than num. There can be many wonderful integers. However, we only care about the smallest-valued ones.\n\tFor example, when num = \"5489355142\":\n    \tThe 1st smallest wonderful integer is \"5489355214\".\n    \tThe 2nd smallest wonderful integer is \"5489355241\".\n    \tThe 3rd smallest wonderful integer is \"5489355412\".\n    \tThe 4th smallest wonderful integer is \"5489355421\".\nReturn the minimum number of adjacent digit swaps that needs to be applied to num to reach the kth smallest wonderful integer.\nThe tests are generated in such a way that kth\u00a0smallest wonderful integer exists.", "tags": ["Greedy", "Two Pointers", "String"], "input": {"num": "8222692682597685", "k": 92}, "output": 3, "input_len": 29, "line": 1524}
{"problem": "There is a directed graph of n colored nodes and m edges. The nodes are numbered from 0 to n - 1.\nYou are given a string colors where colors[i] is a lowercase English letter representing the color of the ith node in this graph (0-indexed). You are also given a 2D array edges where edges[j] = [aj, bj] indicates that there is a directed edge from node aj to node bj.\nA valid path in the graph is a sequence of nodes x1 -> x2 -> x3 -> ... -> xk such that there is a directed edge from xi to xi+1 for every 1 <= i < k. The color value of the path is the number of nodes that are colored the most frequently occurring color along that path.\nReturn the largest color value of any valid path in the given graph, or -1 if the graph contains a cycle.", "tags": ["Graph", "Topological Sort", "Memoization", "Hash Table", "DP", "Counting"], "input": {"colors": "pubchjrvbeuionieoluqceomkqylylquiddbvqdexpiayxmsxvgplnuyeddrwiqfqhxmsyurvnspkpazknopxfnxyyatjvtbqftjgkbsjfdybltvmfcwnvwsmafmzldivcxhyetfosuqgxhzxxmapzwbgazplcaayusaesotiieoyhxlbqbuviyfypcrnlstoormjfhrnkbogmbmbzgrcwlawdhjxcveungyu", "edges": [[65, 63], [74, 99], [39, 227], [80, 159], [19, 15], [58, 75], [38, 127], [49, 174], [173, 186], [78, 204], [150, 28], [2, 80], [225, 222], [152, 138], [71, 87], [104, 190], [27, 169], [36, 54], [109, 98], [224, 101], [148, 143]]}, "output": 1, "input_len": 321, "line": 4068}
{"problem": "There is a directed graph of n colored nodes and m edges. The nodes are numbered from 0 to n - 1.\nYou are given a string colors where colors[i] is a lowercase English letter representing the color of the ith node in this graph (0-indexed). You are also given a 2D array edges where edges[j] = [aj, bj] indicates that there is a directed edge from node aj to node bj.\nA valid path in the graph is a sequence of nodes x1 -> x2 -> x3 -> ... -> xk such that there is a directed edge from xi to xi+1 for every 1 <= i < k. The color value of the path is the number of nodes that are colored the most frequently occurring color along that path.\nReturn the largest color value of any valid path in the given graph, or -1 if the graph contains a cycle.", "tags": ["Graph", "Topological Sort", "Memoization", "Hash Table", "DP", "Counting"], "input": {"colors": "znidapzhuoqwpszkozyfohfcnqzoaexpkuklnejhvajqjbbwuopbtpuqzymgqiemkqixoyhsvxojemvhcgbymzjflzfmnljlofqqjnjjzqjjzutaegxzmnqzoqgrpgtxuvwrmlbxylrmfywjyfdilztrgmsirzejdrxvgllnelcquybzpmgdcwngbitrgsubckzgtonstihrntnfquwrpmikkdrqquruednalqbvhhwnksmlctywikbvmzepbsfvdzzkkaonrsxbjulxxgqpftamirsrdppesmxhtlaylipvlgmnujiwfhowmpiizubadiimvircrwqlkgmotkrntyhhinbneqavcgylidfxespvmkrsvfcbngqltvguzeyjdoobmqzwgbhckbotulffkran", "edges": [[69, 351], [295, 327], [192, 229], [382, 308], [386, 150], [237, 116], [211, 365], [310, 215], [16, 326], [111, 131], [372, 199]]}, "output": 1, "input_len": 336, "line": 5018}
{"problem": "You are given an m x n matrix of characters box representing a side-view of a box. Each cell of the box is one of the following:\n    A stone '#'\n    A stationary obstacle '*'\n    Empty '.'\nThe box is rotated 90 degrees clockwise, causing some of the stones to fall due to gravity. Each stone falls down until it lands on an obstacle, another stone, or the bottom of the box. Gravity does not affect the obstacles' positions, and the inertia from the box's rotation does not affect the stones' horizontal positions.\nIt is guaranteed that each stone in box rests on an obstacle, another stone, or the bottom of the box.\nReturn an n x m matrix representing the box after the rotation described above.", "tags": ["Array", "Two Pointers", "Matrix"], "input": {"box}, "output": [[".", "*", ".", ".", ".", ".", ".", "#", "#", "*", ".", ".", ".", "*", "*", ".", "#", "#", "#", "#", "*", ".", "#", ".", "*", "*", "*", "*", ".", "#", "*", ".", ".", "*", ".", "#", "*", "*", ".", ".", "*", ".", "."], ["#", "#", "*", "#", "#", ".", "#", "#", "*", ".", "#", "*", "*", ".", "*", "#", "*", "*", "*", "#", "#", ".", "*", "*", "*", "#", ".", ".", "*", "#", "*", ".", "#", "#", "#", "#", "#", ".", ".", "#", "*", "#", "#"]], "input_len": 177, "line": 728}
{"problem": "You are given two integer arrays nums1 and nums2 of length n.\nThe XOR sum of the two integer arrays is (nums1[0] XOR nums2[0]) + (nums1[1] XOR nums2[1]) + ... + (nums1[n - 1] XOR nums2[n - 1]) (0-indexed).\n\tFor example, the XOR sum of [1,2,3] and [3,2,1] is equal to (1 XOR 3) + (2 XOR 2) + (3 XOR 1) = 2 + 0 + 2 = 4.\nRearrange the elements of nums2 such that the resulting XOR sum is minimized.\nReturn the XOR sum after the rearrangement.", "tags": ["Bit Manipulation", "Array", "DP", "Bitmask DP"], "input": {"nums1": [8551560, 3941470, 5087749], "nums2": [772526, 4160144, 6542571]}, "output": 12290786, "input_len": 62, "line": 246}
{"problem": "A square triple (a,b,c) is a triple where a, b, and c are integers and a^2 + b^2 = c^2.\nGiven an integer n, return the number of square triples such that 1 <= a, b, c <= n.", "tags": ["Math", "Enumeration"], "input": {"n": 17}, "output": 10, "input_len": 8, "line": 1071}
{"problem": "You are given two integers m and n. Consider an m x n grid where each cell is initially white. You can paint each cell red, green, or blue. All cells must be painted.\nReturn the number of ways to color the grid with no two adjacent cells having the same color. Since the answer can be very large, return it modulo 10^9 + 7.", "tags": ["DP"], "input": {"m": 2, "n": 156}, "output": 880528050, "input_len": 15, "line": 8500}
{"problem": "You are given two integers m and n. Consider an m x n grid where each cell is initially white. You can paint each cell red, green, or blue. All cells must be painted.\nReturn the number of ways to color the grid with no two adjacent cells having the same color. Since the answer can be very large, return it modulo 10^9 + 7.", "tags": ["DP"], "input": {"m": 1, "n": 443}, "output": 119541691, "input_len": 15, "line": 9834}
{"problem": "You are currently designing a dynamic array. You are given a 0-indexed integer array nums, where nums[i] is the number of elements that will be in the array at time i. In addition, you are given an integer k, the maximum number of times you can resize the array (to any size).\nThe size of the array at time t, sizet, must be at least nums[t] because there needs to be enough space in the array to hold all the elements. The space wasted at\u00a0time t is defined as sizet - nums[t], and the total space wasted is the sum of the space wasted across every time t where 0 <= t < nums.length.\nReturn the minimum total space wasted if you can resize the array at most k times.\nNote: The array can have any size at the start and does not count towards the number of resizing operations.", "tags": ["Array", "DP"], "input": {"nums": [557501, 321536, 222910, 571353], "k": 0}, "output": 612112, "input_len": 42, "line": 109}
{"problem": "You are given a 0-indexed string s of even length n. The string consists of exactly n / 2 opening brackets '[' and n / 2 closing brackets ']'.\nA string is called balanced if and only if:\n\tIt is the empty string, or\n\tIt can be written as AB, where both A and B are balanced strings, or\n\tIt can be written as [C], where C is a balanced string.\nYou may swap the brackets at any two indices any number of times.\nReturn the minimum number of swaps to make s balanced.", "tags": ["Stack", "Greedy", "Two Pointers", "String"], "input": {"s": "]][][[[]]][[[][[[[[[[]]]][[][[]]][[][[[]]]]][][][]][][][][[[[[[[]][][]]][][][[][]]]][[[][[[]]]]][[[[]][][]]][][[[[[][]][[[[[]]]]]]][[][]]][]]]]][[]]][][[[[[]][]]][[[][]"}, "output": 2, "input_len": 81, "line": 590}
{"problem": "You wrote down many positive integers in a string called num. However, you realized that you forgot to add commas to seperate the different numbers. You remember that the list of integers was non-decreasing and that no integer had leading zeros.\nReturn the number of possible lists of integers that you could have written down to get the string num. Since the answer may be large, return it modulo 10^9 + 7.", "tags": ["String", "DP", "Suffix Array"], "input": {"num": "19689154285538236458694"}, "output": 221, "input_len": 29, "line": 3202}
{"problem": "Given a 0-indexed integer array nums, return the number of distinct quadruplets (a, b, c, d) such that:\n\tnums[a] + nums[b] + nums[c] == nums[d], and\n\ta < b < c < d", "tags": ["Array", "Hash Table", "Enumeration"], "input": {"nums": [37, 52, 46, 51, 56, 13, 89, 31, 50, 52, 28, 8, 88, 9, 41, 27, 48, 89]}, "output": 8, "input_len": 74, "line": 7763}
{"problem": "A teacher is writing a test with n true/false questions, with 'T' denoting true and 'F' denoting false. He wants to confuse the students by maximizing the number of consecutive questions with the same answer (multiple trues or multiple falses in a row).\nYou are given a string answerKey, where answerKey[i] is the original answer to the ith question. In addition, you are given an integer k, the maximum number of times you may perform the following operation:\n\tChange the answer key for any question to 'T' or 'F' (i.e., set answerKey[i] to 'T' or 'F').\nReturn the maximum number of consecutive 'T's or 'F's in the answer key after performing the operation at most k times.", "tags": ["String", "Binary Search", "Prefix Sum", "Sliding Window"], "input": {"answerKey": "TTTFFFFFTTFTTFFTFFFFFFTFF", "k": 9}, "output": 25, "input_len": 24, "line": 176}
{"problem": "You are given an integer array nums of 2 * n integers. You need to partition nums into two arrays of length n to minimize the absolute difference of the sums of the arrays. To partition nums, put each element of nums into one of the two arrays.\nReturn the minimum possible absolute difference.", "tags": ["Bit Manipulation", "Array", "Two Pointers", "Binary Search", "DP", "Bitmask DP", "Ordered Set"], "input": {"nums": [-4654019, -2036008, -6977979, 3773856]}, "output": 3485904, "input_len": 40, "line": 116}
{"problem": "You are given an integer array nums of 2 * n integers. You need to partition nums into two arrays of length n to minimize the absolute difference of the sums of the arrays. To partition nums, put each element of nums into one of the two arrays.\nReturn the minimum possible absolute difference.", "tags": ["Bit Manipulation", "Array", "Two Pointers", "Binary Search", "DP", "Bitmask DP", "Ordered Set"], "input": {"nums": [-9305607, -1840847, -3966864, -6018658]}, "output": 1160932, "input_len": 40, "line": 115}
{"problem": "Given two sorted 0-indexed integer arrays nums1 and nums2 as well as an integer k, return the kth (1-based) smallest product of nums1[i] \\* nums2[j] where 0 <= i < nums1.length and 0 <= j < nums2.length.", "tags": ["Array", "Binary Search"], "input": {"nums1": [-99381, -84605, -74446, -57352, -49417, -49080, -42103, -20380, -9428, 4584, 19596, 19916, 25911, 36150, 37999, 58392, 63278, 65600, 72887, 78661, 81965, 92834], "nums2": [-93650, -91237, -69221, -54152, -49157, -38195, -37327, -26256, -23842, -7961, -7389, 670, 3722, 17785, 18030, 20873, 24767, 25986, 33092, 35773, 41001, 46009, 50928, 57172, 58881, 64583, 72800, 74213, 79124, 81707, 89652, 91671, 98725], "k": 226}, "output": -1094088558, "input_len": 395, "line": 2691}
{"problem": "Given an integer array nums, find the maximum possible bitwise OR of a subset of nums and return the number of different non-empty subsets with the maximum bitwise OR.\nAn array a is a subset of an array b if a can be obtained from b by deleting some (possibly zero) elements of b. Two subsets are considered different if the indices of the elements chosen are different.\nThe bitwise OR of an array a is equal to a[0] OR a[1] OR ... OR a[a.length - 1] (0-indexed).", "tags": ["Bit Manipulation", "Array", "Backtracking", "Enumeration"], "input": {"nums": [29946, 5812, 33388, 47055, 58572, 14703, 94900]}, "output": 27, "input_len": 52, "line": 813}
{"problem": "Given an integer array nums, find the maximum possible bitwise OR of a subset of nums and return the number of different non-empty subsets with the maximum bitwise OR.\nAn array a is a subset of an array b if a can be obtained from b by deleting some (possibly zero) elements of b. Two subsets are considered different if the indices of the elements chosen are different.\nThe bitwise OR of an array a is equal to a[0] OR a[1] OR ... OR a[a.length - 1] (0-indexed).", "tags": ["Bit Manipulation", "Array", "Backtracking", "Enumeration"], "input": {"nums": [94622, 42486, 13643, 5991, 41973, 39160, 282, 78744]}, "output": 48, "input_len": 57, "line": 1604}
{"problem": "Given an integer array nums, find the maximum possible bitwise OR of a subset of nums and return the number of different non-empty subsets with the maximum bitwise OR.\nAn array a is a subset of an array b if a can be obtained from b by deleting some (possibly zero) elements of b. Two subsets are considered different if the indices of the elements chosen are different.\nThe bitwise OR of an array a is equal to a[0] OR a[1] OR ... OR a[a.length - 1] (0-indexed).", "tags": ["Bit Manipulation", "Array", "Backtracking", "Enumeration"], "input": {"nums": [1719, 30225, 56882, 10201, 75814]}, "output": 4, "input_len": 38, "line": 210}
{"problem": "An integer x is numerically balanced if for every digit d in the number x, there are exactly d occurrences of that digit in x.\nGiven an integer n, return the smallest numerically balanced number strictly greater than n.", "tags": ["Math", "Backtracking", "Enumeration"], "input": {"n": 48}, "output": 122, "input_len": 8, "line": 1219}
{"problem": "An integer x is numerically balanced if for every digit d in the number x, there are exactly d occurrences of that digit in x.\nGiven an integer n, return the smallest numerically balanced number strictly greater than n.", "tags": ["Math", "Backtracking", "Enumeration"], "input": {"n": 35}, "output": 122, "input_len": 8, "line": 1416}
{"problem": "An integer x is numerically balanced if for every digit d in the number x, there are exactly d occurrences of that digit in x.\nGiven an integer n, return the smallest numerically balanced number strictly greater than n.", "tags": ["Math", "Backtracking", "Enumeration"], "input": {"n": 14383}, "output": 14444, "input_len": 11, "line": 1394}
{"problem": "An integer x is numerically balanced if for every digit d in the number x, there are exactly d occurrences of that digit in x.\nGiven an integer n, return the smallest numerically balanced number strictly greater than n.", "tags": ["Math", "Backtracking", "Enumeration"], "input": {"n": 22975}, "output": 23233, "input_len": 11, "line": 5768}
{"problem": "An integer x is numerically balanced if for every digit d in the number x, there are exactly d occurrences of that digit in x.\nGiven an integer n, return the smallest numerically balanced number strictly greater than n.", "tags": ["Math", "Backtracking", "Enumeration"], "input": {"n": 253}, "output": 333, "input_len": 9, "line": 1367}
{"problem": "An integer x is numerically balanced if for every digit d in the number x, there are exactly d occurrences of that digit in x.\nGiven an integer n, return the smallest numerically balanced number strictly greater than n.", "tags": ["Math", "Backtracking", "Enumeration"], "input": {"n": 28}, "output": 122, "input_len": 8, "line": 1516}
{"problem": "An integer x is numerically balanced if for every digit d in the number x, there are exactly d occurrences of that digit in x.\nGiven an integer n, return the smallest numerically balanced number strictly greater than n.", "tags": ["Math", "Backtracking", "Enumeration"], "input": {"n": 58}, "output": 122, "input_len": 8, "line": 1061}
{"problem": "An integer x is numerically balanced if for every digit d in the number x, there are exactly d occurrences of that digit in x.\nGiven an integer n, return the smallest numerically balanced number strictly greater than n.", "tags": ["Math", "Backtracking", "Enumeration"], "input": {"n": 12}, "output": 22, "input_len": 8, "line": 177}
{"problem": "There is a long table with a line of plates and candles arranged on top of it. You are given a 0-indexed string s consisting of characters '*' and '|' only, where a '*' represents a plate and a '|' represents a candle.\nYou are also given a 0-indexed 2D integer array queries where queries[i] = [lefti, righti] denotes the substring s[lefti...righti] (inclusive). For each query, you need to find the number of plates between candles that are in the substring. A plate is considered between candles if there is at least one candle to its left and at least one candle to its right in the substring.\n\tFor example, s = \"||**||**|*\", and a query [3, 8] denotes the substring \"*||**|\". The number of plates between candles in this substring is 2, as each of the two plates has at least one candle in the substring to its left and right.\nReturn an integer array answer where answer[i] is the answer to the ith query.", "tags": ["Array", "String", "Binary Search", "Prefix Sum"], "input": {"s": "|||*|*", "queries": [[4, 4], [5, 5], [1, 5], [3, 3], [3, 3], [3, 3], [0, 2], [3, 4], [0, 1], [4, 4], [5, 5], [3, 5], [0, 5], [4, 4], [2, 3], [5, 5], [0, 3], [5, 5], [3, 4], [5, 5], [5, 5], [3, 3], [2, 3], [5, 5], [5, 5], [1, 4], [4, 5], [1, 5], [5, 5], [4, 4], [3, 3], [4, 4], [2, 4], [0, 1], [5, 5], [2, 5], [0, 2], [0, 5], [5, 5], [5, 5], [1, 5], [5, 5], [4, 4], [3, 5], [1, 5], [0, 0], [5, 5], [5, 5], [3, 5], [4, 4], [0, 1], [3, 5], [1, 3], [5, 5], [4, 5], [3, 3], [3, 5], [3, 5], [0, 1], [4, 5], [0, 5], [4, 4], [3, 5], [2, 5], [0, 1], [2, 3], [0, 4], [1, 2], [1, 5], [4, 4], [4, 5], [0, 3], [3, 5], [4, 5], [5, 5], [3, 5], [4, 4], [2, 4], [0, 4], [0, 1], [4, 5], [1, 4], [4, 4], [2, 4], [3, 5], [3, 5], [4, 5], [1, 3], [1, 2], [5, 5], [1, 2], [1, 1], [1, 2], [5, 5], [1, 4], [1, 2], [2, 4], [2, 4], [0, 4], [5, 5], [1, 5], [5, 5], [3, 5], [2, 3], [1, 2], [3, 3], [3, 4], [4, 5], [4, 5], [5, 5], [2, 2], [5, 5], [1, 3], [3, 3], [0, 2], [2, 3], [1, 5], [2, 2], [2, 3], [3, 3], [2, 3], [2, 3], [0, 0], [4, 4], [4, 5], [0, 5], [0, 3], [4, 5], [2, 4], [3, 5], [4, 5], [2, 2], [4, 5], [1, 1], [1, 2], [3, 3], [0, 5], [4, 5], [4, 5], [5, 5], [2, 2], [2, 2], [5, 5], [3, 3], [2, 3], [1, 4], [5, 5], [3, 4], [0, 1], [0, 1], [0, 0], [0, 4], [2, 4], [3, 3], [5, 5], [5, 5], [5, 5], [0, 2], [0, 0], [2, 5], [5, 5], [1, 5], [3, 3], [1, 3], [1, 2], [0, 2], [1, 5], [5, 5], [2, 4], [4, 4], [5, 5], [3, 3], [4, 4], [1, 4], [0, 1], [2, 2], [3, 3], [4, 4], [3, 5], [2, 3], [0, 5], [2, 5], [2, 3], [3, 3], [1, 3], [2, 4], [4, 4], [3, 4], [5, 5], [5, 5], [3, 3], [3, 5], [5, 5], [4, 5], [1, 2], [1, 4], [4, 4], [1, 5], [5, 5], [1, 4], [2, 5], [4, 4], [3, 5], [3, 5], [3, 4], [1, 4], [3, 4], [3, 5], [1, 4], [1, 2], [0, 0], [4, 4], [1, 3], [1, 3], [4, 5], [2, 4], [1, 3], [4, 5], [5, 5], [2, 3], [4, 4], [2, 2], [3, 3], [5, 5], [1, 1], [3, 5], [3, 3], [5, 5], [1, 2], [0, 1], [0, 5], [5, 5], [3, 5], [5, 5], [4, 4], [5, 5], [3, 4], [2, 2], [0, 3], [5, 5], [0, 1], [2, 3], [0, 0], [2, 3], [5, 5], [0, 4], [5, 5], [3, 4], [0, 4], [3, 5], [0, 3], [1, 2], [1, 1], [5, 5], [4, 5], [0, 2], [0, 2], [4, 4], [3, 3], [5, 5], [5, 5], [2, 3], [0, 3], [2, 4], [0, 2], [3, 3], [0, 4], [4, 4], [4, 4], [4, 5], [2, 2], [0, 3], [5, 5], [3, 4], [3, 4], [5, 5], [0, 5], [2, 4], [2, 5], [1, 3], [3, 3], [1, 1], [2, 2], [4, 5], [0, 2], [2, 2], [5, 5], [2, 4], [0, 1], [0, 0], [3, 5], [0, 3], [2, 5], [2, 5], [3, 4], [1, 2], [0, 3], [5, 5], [3, 4], [2, 4], [2, 3], [2, 5], [1, 5], [3, 4], [2, 3], [4, 5], [5, 5], [0, 0], [3, 5], [2, 4], [3, 5], [3, 4], [5, 5], [3, 5], [2, 3], [1, 1], [3, 5], [5, 5], [1, 2], [5, 5], [5, 5], [1, 2], [1, 5], [3, 5], [5, 5], [3, 5], [1, 5], [3, 3], [2, 3], [3, 3], [4, 4], [2, 2], [4, 4], [3, 3], [4, 5], [1, 1], [1, 3], [5, 5], [1, 5], [1, 5], [5, 5], [5, 5], [5, 5], [4, 4], [5, 5], [3, 3], [3, 3], [5, 5], [4, 5], [2, 2], [3, 3], [4, 5], [3, 4], [2, 4], [5, 5], [4, 5], [0, 3], [1, 2], [3, 3], [4, 4], [2, 5], [0, 5], [2, 2], [2, 2], [5, 5], [2, 5]]}, "output": [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1], "input_len": 2210, "line": 1290}
{"problem": "A string originalText is encoded using a slanted transposition cipher to a string encodedText with the help of a matrix having a fixed number of rows rows.\noriginalText is placed first in a top-left to bottom-right manner.\nThe blue cells are filled first, followed by the red cells, then the yellow cells, and so on, until we reach the end of originalText. The arrow indicates the order in which the cells are filled. All empty cells are filled with ' '. The number of columns is chosen such that the rightmost column will not be empty after filling in originalText.\nencodedText is then formed by appending all characters of the matrix in a row-wise fashion.\nThe characters in the blue cells are appended first to encodedText, then the red cells, and so on, and finally the yellow cells. The arrow indicates the order in which the cells are accessed.\nFor example, if originalText = \"cipher\" and rows = 3, then we encode it in the following manner:\nThe blue arrows depict how originalText is placed in the matrix, and the red arrows denote the order in which encodedText is formed. In the above example, encodedText = \"ch ie pr\".\nGiven the encoded string encodedText and number of rows rows, return the original string originalText.\nNote: originalText does not have any trailing spaces ' '. The test cases are generated such that there is only one possible originalText.", "tags": ["String", "Simulation"], "input": {"encodedText": "nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn ppppppppppppppppppppppppppppppppppppppppppppppppppppppppppp  pppppppppppppppppppppppppppppppppppppppppppppppppppppppppp   eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee    llllllllllllllllllllllllllllllllllllllllllllllllllllllll     ggggggggggggggggggggggggggggggggggggggggggggggggggggggg      eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee       aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa        wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww         kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk          uuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu           aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa            hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh             ggggggggggggggggggggggggggggggggggggggggggggggg              yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy               ppppppppppppppppppppppppppppppppppppppppppppp                tttttttttttttttttttttttttttttttttttttttttttt                 lllllllllllllllllllllllllllllllllllllllllll                  jjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjj                   nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn                    xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx                     bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb                      tttttttttttttttttttttttttttttttttttttt                       fffffffffffffffffffffffffffffffffffff                        eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee                         eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee                          kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk                           ddddddddddddddddddddddddddddddddd                            mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm                             eeeeeeeeeeeeeeeeeeeeeeeeeeeeeee                              llllllllllllllllllllllllllllll                               ooooooooooooooooooooooooooooo                                                                                             fffffffffffffffffffffffffff                                                                                               zzzzzzzzzzzzzzzzzzzzzzzzz                                    gggggggggggggggggggggggg                                     aaaaaaaaaaaaaaaaaaaaaaa                                      eeeeeeeeeeeeeeeeeeeeee                                       lllllllllllllllllllll                                        hhhhhhhhhhhhhhhhhhhh                                         aaaaaaaaaaaaaaaaaaa                                          vvvvvvvvvvvvvvvvvv                                           ooooooooooooooooo                                            jjjjjjjjjjjjjjjj                                                                                                          bbbbbbbbbbbbbb                                               aaaaaaaaaaaaa                                                vvvvvvvvvvvv                                                 ttttttttttt                                                  oooooooooo                                                   nnnnnnnnn                                                    eeeeeeee                                                     yyyyyyy                                                      tttttt                                                       zzzzz                                                        yyyy                                                         vvv                                                          aa                                                           vrows": 80}, "output": "nppelgeawkuahgyptljnxbtfeekdmelo f zgaelhavoj bavtoneytzyvavnppelgeawkuahgyptljnxbtfeekdmelo f zgaelhavoj bavtoneytzyvanppelgeawkuahgyptljnxbtfeekdmelo f zgaelhavoj bavtoneytzyvnppelgeawkuahgyptljnxbtfeekdmelo f zgaelhavoj bavtoneytzynppelgeawkuahgyptljnxbtfeekdmelo f zgaelhavoj bavtoneytznppelgeawkuahgyptljnxbtfeekdmelo f zgaelhavoj bavtoneytnppelgeawkuahgyptljnxbtfeekdmelo f zgaelhavoj bavtoneynppelgeawkuahgyptljnxbtfeekdmelo f zgaelhavoj bavtonenppelgeawkuahgyptljnxbtfeekdmelo f zgaelhavoj bavtonnppelgeawkuahgyptljnxbtfeekdmelo f zgaelhavoj bavtonppelgeawkuahgyptljnxbtfeekdmelo f zgaelhavoj bavtnppelgeawkuahgyptljnxbtfeekdmelo f zgaelhavoj bavnppelgeawkuahgyptljnxbtfeekdmelo f zgaelhavoj banppelgeawkuahgyptljnxbtfeekdmelo f zgaelhavoj bnppelgeawkuahgyptljnxbtfeekdmelo f zgaelhavoj nppelgeawkuahgyptljnxbtfeekdmelo f zgaelhavojnppelgeawkuahgyptljnxbtfeekdmelo f zgaelhavonppelgeawkuahgyptljnxbtfeekdmelo f zgaelhavnppelgeawkuahgyptljnxbtfeekdmelo f zgaelhanppelgeawkuahgyptljnxbtfeekdmelo f zgaelhnppelgeawkuahgyptljnxbtfeekdmelo f zgaelnppelgeawkuahgyptljnxbtfeekdmelo f zgaenppelgeawkuahgyptljnxbtfeekdmelo f zganppelgeawkuahgyptljnxbtfeekdmelo f zgnppelgeawkuahgyptljnxbtfeekdmelo f znppelgeawkuahgyptljnxbtfeekdmelo f nppelgeawkuahgyptljnxbtfeekdmelo fnppelgeawkuahgyptljnxbtfeekdmelo nppelgeawkuahgyptljnxbtfeekdmelonppelgeawkuahgyptljnxbtfeekdmelnppelgeawkuahgyptljnxbtfeekdmenppelgeawkuahgyptljnxbtfeekdmnppelgeawkuahgyptljnxbtfeekdnppelgeawkuahgyptljnxbtfeeknppelgeawkuahgyptljnxbtfeenppelgeawkuahgyptljnxbtfenppelgeawkuahgyptljnxbtfnppelgeawkuahgyptljnxbtnppelgeawkuahgyptljnxbnppelgeawkuahgyptljnxnppelgeawkuahgyptljnnppelgeawkuahgyptljnppelgeawkuahgyptlnppelgeawkuahgyptnppelgeawkuahgypnppelgeawkuahgynppelgeawkuahgnppelgeawkuahnppelgeawkuanppelgeawkunppelgeawknppelgeawnppelgeanppelgenppelgnppelnppenppnpn", "input_len": 795, "line": 5676}
{"problem": "You are given an integer n indicating the number of people in a network. Each person is labeled from 0 to n - 1.\nYou are also given a 0-indexed 2D integer array restrictions, where restrictions[i] = [xi, yi] means that person xi and person yi cannot become friends, either directly or indirectly through other people.\nInitially, no one is friends with each other. You are given a list of friend requests as a 0-indexed 2D integer array requests, where requests[j] = [uj, vj] is a friend request between person uj and person vj.\nA friend request is successful if uj and vj can be friends. Each friend request is processed in the given order (i.e., requests[j] occurs before requests[j + 1]), and upon a successful request, uj and vj become direct friends for all future friend requests.\nReturn a boolean array result, where each result[j] is true if the jth friend request is successful or false if it is not.\nNote: If uj and vj are already direct friends, the request is still successful.", "tags": ["Union Find", "Graph"], "input": {"n": 127, "restrictions": [[4, 120], [65, 107], [21, 53], [120, 108], [99, 11], [95, 125], [115, 40], [11, 62], [79, 80], [99, 91], [19, 47], [33, 85], [27, 78], [55, 25]], "requests": [[67, 37], [44, 39], [92, 99], [8, 16], [45, 46]]}, "output": [true, true, true, true, true], "input_len": 173, "line": 557}
{"problem": "There is an n x n grid, with the top-left cell at (0, 0) and the bottom-right cell at (n - 1, n - 1). You are given the integer n and an integer array startPos where startPos = [startrow, startcol] indicates that a robot is initially at cell (startrow, startcol).\nYou are also given a 0-indexed string s of length m where s[i] is the ith instruction for the robot: 'L' (move left), 'R' (move right), 'U' (move up), and 'D' (move down).\nThe robot can begin executing from any ith instruction in s. It executes the instructions one by one towards the end of s but it stops if either of these conditions is met:\n\tThe next instruction will move the robot off the grid.\n\tThere are no more instructions left to execute.\nReturn an array answer of length m where answer[i] is the number of instructions the robot can execute if the robot begins executing from the ith instruction in s.", "tags": ["String", "Simulation"], "input": {"n": 2, "startPos": [0, 0], "s": "UULULRLDDLLDUUDLRRLLLLRLUULRRLDRRRRULURDULRLLDDUULULURULLLUDDDLLRURURLDLD"}, "output": [0, 0, 0, 0, 0, 3, 0, 1, 1, 0, 0, 2, 0, 0, 1, 0, 1, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 1, 4, 0, 2, 1, 1, 1, 1, 0, 0, 0, 6, 2, 0, 0, 2, 0, 0, 1, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 3, 0, 1, 0, 1], "input_len": 61, "line": 780}
{"problem": "You are given a 0-indexed array of strings words. Each string consists of lowercase English letters only. No letter occurs more than once in any string of words.\nTwo strings s1 and s2 are said to be connected if the set of letters of s2 can be obtained from the set of letters of s1 by any one of the following operations:\n\tAdding exactly one letter to the set of the letters of s1.\n\tDeleting exactly one letter from the set of the letters of s1.\n\tReplacing exactly one letter from the set of the letters of s1 with any letter, including itself.\nThe array words can be divided into one or more non-intersecting groups. A string belongs to a group if any one of the following is true:\n\tIt is connected to at least one other string of the group.\n\tIt is the only string present in the group.\nNote that the strings in words should be grouped in such a manner that a string belonging to a group cannot be connected to a string present in any other group. It can be proved that such an arrangement is always unique.\nReturn an array ans of size 2 where:\n\tans[0] is the maximum number of groups words can be divided into, and\n\tans[1] is the size of the largest group.", "tags": ["Bit Manipulation", "Union Find", "String"], "input": {"words": ["m", "nmxihrestlcb", "r"]}, "output": [2, 2], "input_len": 18, "line": 1877}
{"problem": "Given a digit string s, return the number of unique substrings of s where every digit appears the same number of times.", "tags": ["Hash Table", "String", "Counting", "Hash Function", "Rolling Hash"], "input": {"s": "97"}, "output": 3, "input_len": 8, "line": 197}
{"problem": "You are given an integer array nums of length n and an integer numSlots such that 2 * numSlots >= n. There are numSlots slots numbered from 1 to numSlots.\nYou have to place all n integers into the slots such that each slot contains at most two numbers. The AND sum of a given placement is the sum of the bitwise AND of every number with its respective slot number.\n\tFor example, the AND sum of placing the numbers [1, 3] into slot 1 and [4, 6] into slot 2 is equal to (1 AND 1) + (3 AND 1) + (4 AND 2) + (6 AND 2) = 1 + 1 + 0 + 2 = 4.\nReturn the maximum possible AND sum of nums given numSlots slots.", "tags": ["Bit Manipulation", "Array", "DP", "Bitmask DP"], "input": {"nums": [4, 5, 5, 5], "numSlots": 2}, "output": 2, "input_len": 23, "line": 231}
{"problem": "You are given an integer finalSum. Split it into a sum of a maximum number of unique positive even integers.\n\tFor example, given finalSum = 12, the following splits are valid (unique positive even integers summing up to finalSum): (12), (2 + 10), (2 + 4 + 6), and (4 + 8). Among them, (2 + 4 + 6) contains the maximum number of integers. Note that finalSum cannot be split into (2 + 2 + 4 + 4) as all the numbers should be unique.\nReturn a list of integers that represent a valid split containing a maximum number of integers. If no valid split exists for finalSum, return an empty list. You may return the integers in any order.", "tags": ["Greedy", "Math", "Backtracking"], "input": {"finalSum": 2086}, "output": [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 106], "input_len": 11, "line": 188}
{"problem": "You are given an integer finalSum. Split it into a sum of a maximum number of unique positive even integers.\n\tFor example, given finalSum = 12, the following splits are valid (unique positive even integers summing up to finalSum): (12), (2 + 10), (2 + 4 + 6), and (4 + 8). Among them, (2 + 4 + 6) contains the maximum number of integers. Note that finalSum cannot be split into (2 + 2 + 4 + 4) as all the numbers should be unique.\nReturn a list of integers that represent a valid split containing a maximum number of integers. If no valid split exists for finalSum, return an empty list. You may return the integers in any order.", "tags": ["Greedy", "Math", "Backtracking"], "input": {"finalSum": 1346}, "output": [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 86], "input_len": 11, "line": 152}
{"problem": "You are given an integer finalSum. Split it into a sum of a maximum number of unique positive even integers.\n\tFor example, given finalSum = 12, the following splits are valid (unique positive even integers summing up to finalSum): (12), (2 + 10), (2 + 4 + 6), and (4 + 8). Among them, (2 + 4 + 6) contains the maximum number of integers. Note that finalSum cannot be split into (2 + 2 + 4 + 4) as all the numbers should be unique.\nReturn a list of integers that represent a valid split containing a maximum number of integers. If no valid split exists for finalSum, return an empty list. You may return the integers in any order.", "tags": ["Greedy", "Math", "Backtracking"], "input": {"finalSum": 918618}, "output": [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 128, 130, 132, 134, 136, 138, 140, 142, 144, 146, 148, 150, 152, 154, 156, 158, 160, 162, 164, 166, 168, 170, 172, 174, 176, 178, 180, 182, 184, 186, 188, 190, 192, 194, 196, 198, 200, 202, 204, 206, 208, 210, 212, 214, 216, 218, 220, 222, 224, 226, 228, 230, 232, 234, 236, 238, 240, 242, 244, 246, 248, 250, 252, 254, 256, 258, 260, 262, 264, 266, 268, 270, 272, 274, 276, 278, 280, 282, 284, 286, 288, 290, 292, 294, 296, 298, 300, 302, 304, 306, 308, 310, 312, 314, 316, 318, 320, 322, 324, 326, 328, 330, 332, 334, 336, 338, 340, 342, 344, 346, 348, 350, 352, 354, 356, 358, 360, 362, 364, 366, 368, 370, 372, 374, 376, 378, 380, 382, 384, 386, 388, 390, 392, 394, 396, 398, 400, 402, 404, 406, 408, 410, 412, 414, 416, 418, 420, 422, 424, 426, 428, 430, 432, 434, 436, 438, 440, 442, 444, 446, 448, 450, 452, 454, 456, 458, 460, 462, 464, 466, 468, 470, 472, 474, 476, 478, 480, 482, 484, 486, 488, 490, 492, 494, 496, 498, 500, 502, 504, 506, 508, 510, 512, 514, 516, 518, 520, 522, 524, 526, 528, 530, 532, 534, 536, 538, 540, 542, 544, 546, 548, 550, 552, 554, 556, 558, 560, 562, 564, 566, 568, 570, 572, 574, 576, 578, 580, 582, 584, 586, 588, 590, 592, 594, 596, 598, 600, 602, 604, 606, 608, 610, 612, 614, 616, 618, 620, 622, 624, 626, 628, 630, 632, 634, 636, 638, 640, 642, 644, 646, 648, 650, 652, 654, 656, 658, 660, 662, 664, 666, 668, 670, 672, 674, 676, 678, 680, 682, 684, 686, 688, 690, 692, 694, 696, 698, 700, 702, 704, 706, 708, 710, 712, 714, 716, 718, 720, 722, 724, 726, 728, 730, 732, 734, 736, 738, 740, 742, 744, 746, 748, 750, 752, 754, 756, 758, 760, 762, 764, 766, 768, 770, 772, 774, 776, 778, 780, 782, 784, 786, 788, 790, 792, 794, 796, 798, 800, 802, 804, 806, 808, 810, 812, 814, 816, 818, 820, 822, 824, 826, 828, 830, 832, 834, 836, 838, 840, 842, 844, 846, 848, 850, 852, 854, 856, 858, 860, 862, 864, 866, 868, 870, 872, 874, 876, 878, 880, 882, 884, 886, 888, 890, 892, 894, 896, 898, 900, 902, 904, 906, 908, 910, 912, 914, 916, 918, 920, 922, 924, 926, 928, 930, 932, 934, 936, 938, 940, 942, 944, 946, 948, 950, 952, 954, 956, 958, 960, 962, 964, 966, 968, 970, 972, 974, 976, 978, 980, 982, 984, 986, 988, 990, 992, 994, 996, 998, 1000, 1002, 1004, 1006, 1008, 1010, 1012, 1014, 1016, 1018, 1020, 1022, 1024, 1026, 1028, 1030, 1032, 1034, 1036, 1038, 1040, 1042, 1044, 1046, 1048, 1050, 1052, 1054, 1056, 1058, 1060, 1062, 1064, 1066, 1068, 1070, 1072, 1074, 1076, 1078, 1080, 1082, 1084, 1086, 1088, 1090, 1092, 1094, 1096, 1098, 1100, 1102, 1104, 1106, 1108, 1110, 1112, 1114, 1116, 1118, 1120, 1122, 1124, 1126, 1128, 1130, 1132, 1134, 1136, 1138, 1140, 1142, 1144, 1146, 1148, 1150, 1152, 1154, 1156, 1158, 1160, 1162, 1164, 1166, 1168, 1170, 1172, 1174, 1176, 1178, 1180, 1182, 1184, 1186, 1188, 1190, 1192, 1194, 1196, 1198, 1200, 1202, 1204, 1206, 1208, 1210, 1212, 1214, 1216, 1218, 1220, 1222, 1224, 1226, 1228, 1230, 1232, 1234, 1236, 1238, 1240, 1242, 1244, 1246, 1248, 1250, 1252, 1254, 1256, 1258, 1260, 1262, 1264, 1266, 1268, 1270, 1272, 1274, 1276, 1278, 1280, 1282, 1284, 1286, 1288, 1290, 1292, 1294, 1296, 1298, 1300, 1302, 1304, 1306, 1308, 1310, 1312, 1314, 1316, 1318, 1320, 1322, 1324, 1326, 1328, 1330, 1332, 1334, 1336, 1338, 1340, 1342, 1344, 1346, 1348, 1350, 1352, 1354, 1356, 1358, 1360, 1362, 1364, 1366, 1368, 1370, 1372, 1374, 1376, 1378, 1380, 1382, 1384, 1386, 1388, 1390, 1392, 1394, 1396, 1398, 1400, 1402, 1404, 1406, 1408, 1410, 1412, 1414, 1416, 1418, 1420, 1422, 1424, 1426, 1428, 1430, 1432, 1434, 1436, 1438, 1440, 1442, 1444, 1446, 1448, 1450, 1452, 1454, 1456, 1458, 1460, 1462, 1464, 1466, 1468, 1470, 1472, 1474, 1476, 1478, 1480, 1482, 1484, 1486, 1488, 1490, 1492, 1494, 1496, 1498, 1500, 1502, 1504, 1506, 1508, 1510, 1512, 1514, 1516, 1518, 1520, 1522, 1524, 1526, 1528, 1530, 1532, 1534, 1536, 1538, 1540, 1542, 1544, 1546, 1548, 1550, 1552, 1554, 1556, 1558, 1560, 1562, 1564, 1566, 1568, 1570, 1572, 1574, 1576, 1578, 1580, 1582, 1584, 1586, 1588, 1590, 1592, 1594, 1596, 1598, 1600, 1602, 1604, 1606, 1608, 1610, 1612, 1614, 1616, 1618, 1620, 1622, 1624, 1626, 1628, 1630, 1632, 1634, 1636, 1638, 1640, 1642, 1644, 1646, 1648, 1650, 1652, 1654, 1656, 1658, 1660, 1662, 1664, 1666, 1668, 1670, 1672, 1674, 1676, 1678, 1680, 1682, 1684, 1686, 1688, 1690, 1692, 1694, 1696, 1698, 1700, 1702, 1704, 1706, 1708, 1710, 1712, 1714, 1716, 1718, 1720, 1722, 1724, 1726, 1728, 1730, 1732, 1734, 1736, 1738, 1740, 1742, 1744, 1746, 1748, 1750, 1752, 1754, 1756, 1758, 1760, 1762, 1764, 1766, 1768, 1770, 1772, 1774, 1776, 1778, 1780, 1782, 1784, 1786, 1788, 1790, 1792, 1794, 1796, 1798, 1800, 1802, 1804, 1806, 1808, 1810, 1812, 1814, 1816, 1818, 1820, 1822, 1824, 1826, 1828, 1830, 1832, 1834, 1836, 1838, 1840, 1842, 1844, 1846, 1848, 1850, 1852, 1854, 1856, 1858, 1860, 1862, 1864, 1866, 1868, 1870, 1872, 1874, 1876, 1878, 1880, 1882, 1884, 1886, 1888, 1890, 1892, 1894, 1896, 1898, 1900, 1902, 1904, 1906, 1908, 1910, 1912, 3726], "input_len": 13, "line": 3836}
{"problem": "You are given an integer finalSum. Split it into a sum of a maximum number of unique positive even integers.\n\tFor example, given finalSum = 12, the following splits are valid (unique positive even integers summing up to finalSum): (12), (2 + 10), (2 + 4 + 6), and (4 + 8). Among them, (2 + 4 + 6) contains the maximum number of integers. Note that finalSum cannot be split into (2 + 2 + 4 + 4) as all the numbers should be unique.\nReturn a list of integers that represent a valid split containing a maximum number of integers. If no valid split exists for finalSum, return an empty list. You may return the integers in any order.", "tags": ["Greedy", "Math", "Backtracking"], "input": {"finalSum": 217688}, "output": [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 128, 130, 132, 134, 136, 138, 140, 142, 144, 146, 148, 150, 152, 154, 156, 158, 160, 162, 164, 166, 168, 170, 172, 174, 176, 178, 180, 182, 184, 186, 188, 190, 192, 194, 196, 198, 200, 202, 204, 206, 208, 210, 212, 214, 216, 218, 220, 222, 224, 226, 228, 230, 232, 234, 236, 238, 240, 242, 244, 246, 248, 250, 252, 254, 256, 258, 260, 262, 264, 266, 268, 270, 272, 274, 276, 278, 280, 282, 284, 286, 288, 290, 292, 294, 296, 298, 300, 302, 304, 306, 308, 310, 312, 314, 316, 318, 320, 322, 324, 326, 328, 330, 332, 334, 336, 338, 340, 342, 344, 346, 348, 350, 352, 354, 356, 358, 360, 362, 364, 366, 368, 370, 372, 374, 376, 378, 380, 382, 384, 386, 388, 390, 392, 394, 396, 398, 400, 402, 404, 406, 408, 410, 412, 414, 416, 418, 420, 422, 424, 426, 428, 430, 432, 434, 436, 438, 440, 442, 444, 446, 448, 450, 452, 454, 456, 458, 460, 462, 464, 466, 468, 470, 472, 474, 476, 478, 480, 482, 484, 486, 488, 490, 492, 494, 496, 498, 500, 502, 504, 506, 508, 510, 512, 514, 516, 518, 520, 522, 524, 526, 528, 530, 532, 534, 536, 538, 540, 542, 544, 546, 548, 550, 552, 554, 556, 558, 560, 562, 564, 566, 568, 570, 572, 574, 576, 578, 580, 582, 584, 586, 588, 590, 592, 594, 596, 598, 600, 602, 604, 606, 608, 610, 612, 614, 616, 618, 620, 622, 624, 626, 628, 630, 632, 634, 636, 638, 640, 642, 644, 646, 648, 650, 652, 654, 656, 658, 660, 662, 664, 666, 668, 670, 672, 674, 676, 678, 680, 682, 684, 686, 688, 690, 692, 694, 696, 698, 700, 702, 704, 706, 708, 710, 712, 714, 716, 718, 720, 722, 724, 726, 728, 730, 732, 734, 736, 738, 740, 742, 744, 746, 748, 750, 752, 754, 756, 758, 760, 762, 764, 766, 768, 770, 772, 774, 776, 778, 780, 782, 784, 786, 788, 790, 792, 794, 796, 798, 800, 802, 804, 806, 808, 810, 812, 814, 816, 818, 820, 822, 824, 826, 828, 830, 832, 834, 836, 838, 840, 842, 844, 846, 848, 850, 852, 854, 856, 858, 860, 862, 864, 866, 868, 870, 872, 874, 876, 878, 880, 882, 884, 886, 888, 890, 892, 894, 896, 898, 900, 902, 904, 906, 908, 910, 912, 914, 916, 918, 920, 922, 924, 926, 928, 930, 998], "input_len": 13, "line": 1872}
{"problem": "You are given an integer finalSum. Split it into a sum of a maximum number of unique positive even integers.\n\tFor example, given finalSum = 12, the following splits are valid (unique positive even integers summing up to finalSum): (12), (2 + 10), (2 + 4 + 6), and (4 + 8). Among them, (2 + 4 + 6) contains the maximum number of integers. Note that finalSum cannot be split into (2 + 2 + 4 + 4) as all the numbers should be unique.\nReturn a list of integers that represent a valid split containing a maximum number of integers. If no valid split exists for finalSum, return an empty list. You may return the integers in any order.", "tags": ["Greedy", "Math", "Backtracking"], "input": {"finalSum": 613940}, "output": [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 128, 130, 132, 134, 136, 138, 140, 142, 144, 146, 148, 150, 152, 154, 156, 158, 160, 162, 164, 166, 168, 170, 172, 174, 176, 178, 180, 182, 184, 186, 188, 190, 192, 194, 196, 198, 200, 202, 204, 206, 208, 210, 212, 214, 216, 218, 220, 222, 224, 226, 228, 230, 232, 234, 236, 238, 240, 242, 244, 246, 248, 250, 252, 254, 256, 258, 260, 262, 264, 266, 268, 270, 272, 274, 276, 278, 280, 282, 284, 286, 288, 290, 292, 294, 296, 298, 300, 302, 304, 306, 308, 310, 312, 314, 316, 318, 320, 322, 324, 326, 328, 330, 332, 334, 336, 338, 340, 342, 344, 346, 348, 350, 352, 354, 356, 358, 360, 362, 364, 366, 368, 370, 372, 374, 376, 378, 380, 382, 384, 386, 388, 390, 392, 394, 396, 398, 400, 402, 404, 406, 408, 410, 412, 414, 416, 418, 420, 422, 424, 426, 428, 430, 432, 434, 436, 438, 440, 442, 444, 446, 448, 450, 452, 454, 456, 458, 460, 462, 464, 466, 468, 470, 472, 474, 476, 478, 480, 482, 484, 486, 488, 490, 492, 494, 496, 498, 500, 502, 504, 506, 508, 510, 512, 514, 516, 518, 520, 522, 524, 526, 528, 530, 532, 534, 536, 538, 540, 542, 544, 546, 548, 550, 552, 554, 556, 558, 560, 562, 564, 566, 568, 570, 572, 574, 576, 578, 580, 582, 584, 586, 588, 590, 592, 594, 596, 598, 600, 602, 604, 606, 608, 610, 612, 614, 616, 618, 620, 622, 624, 626, 628, 630, 632, 634, 636, 638, 640, 642, 644, 646, 648, 650, 652, 654, 656, 658, 660, 662, 664, 666, 668, 670, 672, 674, 676, 678, 680, 682, 684, 686, 688, 690, 692, 694, 696, 698, 700, 702, 704, 706, 708, 710, 712, 714, 716, 718, 720, 722, 724, 726, 728, 730, 732, 734, 736, 738, 740, 742, 744, 746, 748, 750, 752, 754, 756, 758, 760, 762, 764, 766, 768, 770, 772, 774, 776, 778, 780, 782, 784, 786, 788, 790, 792, 794, 796, 798, 800, 802, 804, 806, 808, 810, 812, 814, 816, 818, 820, 822, 824, 826, 828, 830, 832, 834, 836, 838, 840, 842, 844, 846, 848, 850, 852, 854, 856, 858, 860, 862, 864, 866, 868, 870, 872, 874, 876, 878, 880, 882, 884, 886, 888, 890, 892, 894, 896, 898, 900, 902, 904, 906, 908, 910, 912, 914, 916, 918, 920, 922, 924, 926, 928, 930, 932, 934, 936, 938, 940, 942, 944, 946, 948, 950, 952, 954, 956, 958, 960, 962, 964, 966, 968, 970, 972, 974, 976, 978, 980, 982, 984, 986, 988, 990, 992, 994, 996, 998, 1000, 1002, 1004, 1006, 1008, 1010, 1012, 1014, 1016, 1018, 1020, 1022, 1024, 1026, 1028, 1030, 1032, 1034, 1036, 1038, 1040, 1042, 1044, 1046, 1048, 1050, 1052, 1054, 1056, 1058, 1060, 1062, 1064, 1066, 1068, 1070, 1072, 1074, 1076, 1078, 1080, 1082, 1084, 1086, 1088, 1090, 1092, 1094, 1096, 1098, 1100, 1102, 1104, 1106, 1108, 1110, 1112, 1114, 1116, 1118, 1120, 1122, 1124, 1126, 1128, 1130, 1132, 1134, 1136, 1138, 1140, 1142, 1144, 1146, 1148, 1150, 1152, 1154, 1156, 1158, 1160, 1162, 1164, 1166, 1168, 1170, 1172, 1174, 1176, 1178, 1180, 1182, 1184, 1186, 1188, 1190, 1192, 1194, 1196, 1198, 1200, 1202, 1204, 1206, 1208, 1210, 1212, 1214, 1216, 1218, 1220, 1222, 1224, 1226, 1228, 1230, 1232, 1234, 1236, 1238, 1240, 1242, 1244, 1246, 1248, 1250, 1252, 1254, 1256, 1258, 1260, 1262, 1264, 1266, 1268, 1270, 1272, 1274, 1276, 1278, 1280, 1282, 1284, 1286, 1288, 1290, 1292, 1294, 1296, 1298, 1300, 1302, 1304, 1306, 1308, 1310, 1312, 1314, 1316, 1318, 1320, 1322, 1324, 1326, 1328, 1330, 1332, 1334, 1336, 1338, 1340, 1342, 1344, 1346, 1348, 1350, 1352, 1354, 1356, 1358, 1360, 1362, 1364, 1366, 1368, 1370, 1372, 1374, 1376, 1378, 1380, 1382, 1384, 1386, 1388, 1390, 1392, 1394, 1396, 1398, 1400, 1402, 1404, 1406, 1408, 1410, 1412, 1414, 1416, 1418, 1420, 1422, 1424, 1426, 1428, 1430, 1432, 1434, 1436, 1438, 1440, 1442, 1444, 1446, 1448, 1450, 1452, 1454, 1456, 1458, 1460, 1462, 1464, 1466, 1468, 1470, 1472, 1474, 1476, 1478, 1480, 1482, 1484, 1486, 1488, 1490, 1492, 1494, 1496, 1498, 1500, 1502, 1504, 1506, 1508, 1510, 1512, 1514, 1516, 1518, 1520, 1522, 1524, 1526, 1528, 1530, 1532, 1534, 1536, 1538, 1540, 1542, 1544, 1546, 1548, 1550, 1552, 1554, 1556, 1558, 1560, 1562, 1564, 1634], "input_len": 13, "line": 3140}
{"problem": "You are given an integer finalSum. Split it into a sum of a maximum number of unique positive even integers.\n\tFor example, given finalSum = 12, the following splits are valid (unique positive even integers summing up to finalSum): (12), (2 + 10), (2 + 4 + 6), and (4 + 8). Among them, (2 + 4 + 6) contains the maximum number of integers. Note that finalSum cannot be split into (2 + 2 + 4 + 4) as all the numbers should be unique.\nReturn a list of integers that represent a valid split containing a maximum number of integers. If no valid split exists for finalSum, return an empty list. You may return the integers in any order.", "tags": ["Greedy", "Math", "Backtracking"], "input": {"finalSum": 49156}, "output": [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 128, 130, 132, 134, 136, 138, 140, 142, 144, 146, 148, 150, 152, 154, 156, 158, 160, 162, 164, 166, 168, 170, 172, 174, 176, 178, 180, 182, 184, 186, 188, 190, 192, 194, 196, 198, 200, 202, 204, 206, 208, 210, 212, 214, 216, 218, 220, 222, 224, 226, 228, 230, 232, 234, 236, 238, 240, 242, 244, 246, 248, 250, 252, 254, 256, 258, 260, 262, 264, 266, 268, 270, 272, 274, 276, 278, 280, 282, 284, 286, 288, 290, 292, 294, 296, 298, 300, 302, 304, 306, 308, 310, 312, 314, 316, 318, 320, 322, 324, 326, 328, 330, 332, 334, 336, 338, 340, 342, 344, 346, 348, 350, 352, 354, 356, 358, 360, 362, 364, 366, 368, 370, 372, 374, 376, 378, 380, 382, 384, 386, 388, 390, 392, 394, 396, 398, 400, 402, 404, 406, 408, 410, 412, 414, 416, 418, 420, 422, 424, 426, 428, 430, 432, 434, 436, 438, 440, 536], "input_len": 12, "line": 892}
{"problem": "You are given an integer finalSum. Split it into a sum of a maximum number of unique positive even integers.\n\tFor example, given finalSum = 12, the following splits are valid (unique positive even integers summing up to finalSum): (12), (2 + 10), (2 + 4 + 6), and (4 + 8). Among them, (2 + 4 + 6) contains the maximum number of integers. Note that finalSum cannot be split into (2 + 2 + 4 + 4) as all the numbers should be unique.\nReturn a list of integers that represent a valid split containing a maximum number of integers. If no valid split exists for finalSum, return an empty list. You may return the integers in any order.", "tags": ["Greedy", "Math", "Backtracking"], "input": {"finalSum": 628}, "output": [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 76], "input_len": 10, "line": 104}
{"problem": "You are given an integer n representing the number of playing cards you have. A house of cards meets the following conditions:\n\tA house of cards consists of one or more rows of triangles and horizontal cards.\n\tTriangles are created by leaning two cards against each other.\n\tOne card must be placed horizontally between all adjacent triangles in a row.\n\tAny triangle on a row higher than the first must be placed on a horizontal card from the previous row.\n\tEach triangle is placed in the leftmost available spot in the row.\nReturn the number of distinct house of cards you can build using all n cards. Two houses of cards are considered distinct if there exists a row where the two houses contain a different number of cards.", "tags": ["Math", "DP"], "input": {"n": 123}, "output": 518, "input_len": 9, "line": 9829}
{"problem": "You are given an integer n representing the number of playing cards you have. A house of cards meets the following conditions:\n\tA house of cards consists of one or more rows of triangles and horizontal cards.\n\tTriangles are created by leaning two cards against each other.\n\tOne card must be placed horizontally between all adjacent triangles in a row.\n\tAny triangle on a row higher than the first must be placed on a horizontal card from the previous row.\n\tEach triangle is placed in the leftmost available spot in the row.\nReturn the number of distinct house of cards you can build using all n cards. Two houses of cards are considered distinct if there exists a row where the two houses contain a different number of cards.", "tags": ["Math", "DP"], "input": {"n": 39}, "output": 10, "input_len": 8, "line": 619}
{"problem": "You are given a positive integer n representing the number of nodes of a Directed Acyclic Graph (DAG). The nodes are numbered from 0 to n - 1 (inclusive).\nYou are also given a 2D integer array edges, where edges[i] = [fromi, toi] denotes that there is a unidirectional edge from fromi to toi in the graph.\nReturn a list answer, where answer[i] is the list of ancestors of the ith node, sorted in ascending order.\nA node u is an ancestor of another node v if u can reach v via a set of edges.", "tags": ["DFS", "BFS", "Graph", "Topological Sort"], "input": {"n": 63, "edges": [[25, 29], [19, 46], [61, 55], [17, 0], [62, 29], [1, 49], [4, 27], [26, 11], [40, 16], [47, 6], [29, 22], [30, 20], [22, 49], [2, 13], [40, 3], [54, 2], [1, 23], [28, 53], [41, 4], [14, 17], [43, 59], [16, 54], [32, 7], [11, 33], [18, 14]]}, "output": [[14, 17, 18], [], [16, 40, 54], [40], [41], [], [47], [32], [], [], [], [26], [], [2, 16, 40, 54], [18], [], [40], [14, 18], [], [], [30], [], [25, 29, 62], [1], [], [], [], [4, 41], [], [25, 62], [], [], [], [11, 26], [], [], [], [], [], [], [], [], [], [], [], [], [19], [], [], [1, 22, 25, 29, 62], [], [], [], [28], [16, 40], [61], [], [], [], [43], [], [], []], "input_len": 202, "line": 954}
{"problem": "You are given a positive integer n representing the number of nodes of a Directed Acyclic Graph (DAG). The nodes are numbered from 0 to n - 1 (inclusive).\nYou are also given a 2D integer array edges, where edges[i] = [fromi, toi] denotes that there is a unidirectional edge from fromi to toi in the graph.\nReturn a list answer, where answer[i] is the list of ancestors of the ith node, sorted in ascending order.\nA node u is an ancestor of another node v if u can reach v via a set of edges.", "tags": ["DFS", "BFS", "Graph", "Topological Sort"], "input": {"n": 22, "edges": [[20, 5], [6, 12], [14, 4], [4, 12], [14, 19], [5, 10], [9, 17], [10, 12], [16, 7], [15, 11], [1, 18], [15, 9], [4, 8], [5, 9], [14, 15], [4, 20], [10, 5], [9, 19], [10, 8], [2, 10], [10, 17], [15, 7], [6, 10], [20, 9], [4, 7], [17, 13], [8, 16], [10, 13], [6, 0], [0, 18], [2, 21]]}, "output": [[6], [], [], [], [14], [2, 4, 6, 10, 14, 20], [], [2, 4, 5, 6, 8, 10, 14, 15, 16, 20], [2, 4, 5, 6, 10, 14, 20], [2, 4, 5, 6, 10, 14, 15, 20], [2, 4, 5, 6, 14, 20], [14, 15], [2, 4, 5, 6, 10, 14, 20], [2, 4, 5, 6, 9, 10, 14, 15, 17, 20], [], [14], [2, 4, 5, 6, 8, 10, 14, 20], [2, 4, 5, 6, 9, 10, 14, 15, 20], [0, 1, 6], [2, 4, 5, 6, 9, 10, 14, 15, 20], [4, 14], [2]], "input_len": 232, "line": 1065}
{"problem": "You are given a positive integer n representing the number of nodes of a Directed Acyclic Graph (DAG). The nodes are numbered from 0 to n - 1 (inclusive).\nYou are also given a 2D integer array edges, where edges[i] = [fromi, toi] denotes that there is a unidirectional edge from fromi to toi in the graph.\nReturn a list answer, where answer[i] is the list of ancestors of the ith node, sorted in ascending order.\nA node u is an ancestor of another node v if u can reach v via a set of edges.", "tags": ["DFS", "BFS", "Graph", "Topological Sort"], "input": {"n": 859, "edges": [[610, 452], [624, 406]]}, "output": [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [624], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [610], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "input_len": 33, "line": 7760}
{"problem": "You are given a positive integer n representing the number of nodes of a Directed Acyclic Graph (DAG). The nodes are numbered from 0 to n - 1 (inclusive).\nYou are also given a 2D integer array edges, where edges[i] = [fromi, toi] denotes that there is a unidirectional edge from fromi to toi in the graph.\nReturn a list answer, where answer[i] is the list of ancestors of the ith node, sorted in ascending order.\nA node u is an ancestor of another node v if u can reach v via a set of edges.", "tags": ["DFS", "BFS", "Graph", "Topological Sort"], "input": {"n": 9, "edges": [[3, 8], [2, 4], [8, 4], [6, 5], [5, 8], [5, 4], [6, 8], [1, 8], [8, 3], [7, 6], [5, 6], [3, 6], [0, 8], [1, 3], [4, 7], [5, 2]]}, "output": [[], [], [0, 1, 3, 4, 5, 6, 7, 8], [0, 1, 2, 4, 5, 6, 7, 8], [0, 1, 2, 3, 5, 6, 7, 8], [0, 1, 2, 3, 4, 6, 7, 8], [0, 1, 2, 3, 4, 5, 7, 8], [0, 1, 2, 3, 4, 5, 6, 8], [0, 1, 2, 3, 4, 5, 6, 7]], "input_len": 107, "line": 698}
{"problem": "You are given a positive integer n representing the number of nodes of a Directed Acyclic Graph (DAG). The nodes are numbered from 0 to n - 1 (inclusive).\nYou are also given a 2D integer array edges, where edges[i] = [fromi, toi] denotes that there is a unidirectional edge from fromi to toi in the graph.\nReturn a list answer, where answer[i] is the list of ancestors of the ith node, sorted in ascending order.\nA node u is an ancestor of another node v if u can reach v via a set of edges.", "tags": ["DFS", "BFS", "Graph", "Topological Sort"], "input": {"n": 58, "edges": [[51, 32], [4, 51], [55, 3]]}, "output": [[], [], [], [55], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [4, 51], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [4], [], [], [], [], [], []], "input_len": 34, "line": 569}
{"problem": "You are given a positive integer n representing the number of nodes of a Directed Acyclic Graph (DAG). The nodes are numbered from 0 to n - 1 (inclusive).\nYou are also given a 2D integer array edges, where edges[i] = [fromi, toi] denotes that there is a unidirectional edge from fromi to toi in the graph.\nReturn a list answer, where answer[i] is the list of ancestors of the ith node, sorted in ascending order.\nA node u is an ancestor of another node v if u can reach v via a set of edges.", "tags": ["DFS", "BFS", "Graph", "Topological Sort"], "input": {"n": 350, "edges": [[155, 62], [240, 185], [294, 165], [220, 280], [138, 293], [149, 119], [227, 139], [334, 67], [96, 122], [99, 118], [305, 40], [283, 3], [119, 32], [30, 73], [43, 3], [325, 201], [142, 226], [114, 301], [347, 97], [258, 74], [103, 319], [241, 76], [275, 227], [278, 189], [270, 121], [99, 111], [130, 300], [153, 146], [33, 239], [232, 329], [297, 4], [228, 69], [137, 241], [102, 164], [246, 340], [247, 12], [157, 283], [276, 295], [130, 302], [288, 257], [183, 213], [293, 106], [153, 340], [19, 196], [205, 268], [341, 12], [289, 102], [175, 181], [93, 175], [161, 328], [136, 100], [173, 238], [110, 319], [116, 250], [264, 267], [146, 294], [63, 49], [14, 211], [224, 85], [170, 59], [209, 261], [258, 245], [153, 116], [104, 251], [221, 116], [66, 212], [124, 293], [287, 244], [237, 170], [34, 192], [280, 31], [188, 195], [162, 295], [307, 82], [328, 144], [119, 150], [179, 345], [246, 136], [108, 129], [294, 139], [41, 261], [281, 148], [207, 293], [97, 183], [341, 263], [190, 167], [7, 247], [148, 106], [224, 297], [288, 309], [222, 43], [346, 280], [46, 58], [268, 287], [81, 107], [140, 138], [184, 190], [173, 217], [343, 174], [37, 55], [46, 152], [123, 33], [206, 3], [128, 340], [144, 147], [172, 227], [81, 63], [141, 71], [143, 68], [100, 198], [174, 211], [175, 91], [321, 349], [344, 21], [342, 143], [299, 53], [59, 90], [245, 27], [35, 306], [188, 222], [125, 108], [0, 205], [64, 305], [49, 79], [19, 227], [255, 138], [243, 200], [301, 80], [155, 209], [102, 325], [330, 6], [201, 185], [17, 141], [322, 75], [174, 234], [270, 339], [292, 98], [120, 13], [268, 85], [240, 307], [248, 171], [263, 80], [77, 17], [106, 87], [229, 240], [117, 102], [71, 4], [93, 153], [282, 178], [341, 319], [7, 248], [173, 326], [139, 321], [26, 145], [109, 326], [260, 330], [106, 153], [124, 79], [301, 203], [42, 71], [227, 162], [267, 235], [267, 299], [79, 184], [234, 122], [326, 141], [153, 231], [82, 125], [1, 255], [131, 212], [257, 199], [126, 115], [31, 317], [39, 330], [212, 304], [289, 185], [23, 194], [207, 143], [273, 143], [35, 177], [72, 290], [180, 327], [0, 259], [202, 183], [55, 292], [168, 50]]}, "output": [[], [], [], [43, 157, 188, 206, 222, 283], [17, 42, 71, 77, 109, 141, 173, 224, 297, 326], [], [39, 260, 330], [], [], [], [], [], [7, 247, 341], [120], [], [], [], [77], [], [], [], [344], [], [], [], [], [], [245, 258], [], [], [], [220, 280, 346], [119, 149], [123], [], [], [], [], [], [], [64, 305], [], [], [188, 222], [], [], [], [], [], [63, 81], [168], [], [], [264, 267, 299], [], [37], [], [], [46], [170, 237], [], [], [155], [81], [], [], [], [334], [143, 207, 273, 342], [228], [], [17, 42, 77, 109, 141, 173, 326], [], [30], [258], [322], [137, 241], [], [], [49, 63, 81, 124], [114, 263, 301, 341], [], [229, 240, 307], [], [], [0, 205, 224, 268], [], [1, 106, 124, 138, 140, 148, 207, 255, 281, 293], [], [], [59, 170, 237], [93, 175], [], [], [], [], [], [347], [37, 55, 292], [], [136, 246], [], [117, 289], [], [], [], [1, 124, 138, 140, 148, 207, 255, 281, 293], [81], [82, 125, 229, 240, 307], [], [], [99], [], [], [], [126], [1, 93, 106, 124, 138, 140, 148, 153, 207, 221, 255, 281, 293], [], [99], [149], [], [270], [96, 174, 234, 343], [], [], [82, 229, 240, 307], [], [], [], [82, 108, 125, 229, 240, 307], [], [], [], [], [], [], [246], [], [1, 140, 255], [1, 19, 93, 106, 124, 138, 140, 146, 148, 153, 172, 207, 227, 255, 275, 281, 293, 294], [], [17, 77, 109, 173, 326], [], [207, 273, 342], [161, 328], [26], [1, 93, 106, 124, 138, 140, 148, 153, 207, 255, 281, 293], [144, 161, 328], [281], [], [119, 149], [], [46], [1, 93, 106, 124, 138, 140, 148, 207, 255, 281, 293], [], [], [], [], [], [], [], [], [19, 172, 227, 275], [], [102, 117, 289], [1, 93, 106, 124, 138, 140, 146, 148, 153, 207, 255, 281, 293, 294], [], [49, 63, 79, 81, 124, 184, 190], [], [], [237], [7, 248], [], [], [343], [93], [], [35], [282], [], [], [93, 175], [], [97, 202, 347], [49, 63, 79, 81, 124], [102, 117, 201, 229, 240, 289, 325], [], [], [], [278], [49, 63, 79, 81, 124, 184], [], [34], [], [23], [188], [19], [], [100, 136, 246], [257, 288], [243], [102, 117, 289, 325], [], [114, 301], [], [0], [], [], [], [155], [], [14, 174, 343], [66, 131], [97, 183, 202, 347], [], [], [], [173], [], [], [], [], [188], [], [], [], [142], [19, 172, 275], [], [], [], [1, 93, 106, 124, 138, 140, 148, 153, 207, 255, 281, 293], [], [], [174, 343], [264, 267], [], [], [173], [33, 123], [229], [137], [], [], [0, 205, 268, 287], [258], [], [7], [7], [], [1, 93, 106, 116, 124, 138, 140, 148, 153, 207, 221, 255, 281, 293], [104], [], [], [], [1], [], [288], [], [0], [], [41, 155, 209], [], [341], [], [], [], [264], [0, 205], [], [], [], [], [], [], [], [], [], [], [], [220, 346], [], [], [157], [], [], [], [0, 205, 268], [], [], [72], [], [37, 55], [1, 124, 138, 140, 207, 255], [1, 93, 106, 124, 138, 140, 146, 148, 153, 207, 255, 281, 293], [19, 162, 172, 227, 275, 276], [], [224], [], [264, 267], [130], [114], [130], [], [66, 131, 212], [64], [35], [229, 240], [], [288], [], [], [], [], [], [], [], [31, 220, 280, 346], [], [103, 110, 341], [], [1, 19, 93, 106, 124, 138, 139, 140, 146, 148, 153, 172, 207, 227, 255, 275, 281, 293, 294], [], [], [], [102, 117, 289], [109, 173], [180], [161], [232], [39, 260], [], [], [], [], [], [], [], [], [270], [1, 93, 106, 124, 128, 138, 140, 148, 153, 207, 246, 255, 281, 293], [], [], [], [], [179], [], [], [], [1, 19, 93, 106, 124, 138, 139, 140, 146, 148, 153, 172, 207, 227, 255, 275, 281, 293, 294, 321]], "input_len": 1773, "line": 7373}
{"problem": "You are given a positive integer n representing the number of nodes of a Directed Acyclic Graph (DAG). The nodes are numbered from 0 to n - 1 (inclusive).\nYou are also given a 2D integer array edges, where edges[i] = [fromi, toi] denotes that there is a unidirectional edge from fromi to toi in the graph.\nReturn a list answer, where answer[i] is the list of ancestors of the ith node, sorted in ascending order.\nA node u is an ancestor of another node v if u can reach v via a set of edges.", "tags": ["DFS", "BFS", "Graph", "Topological Sort"], "input": {"n": 4, "edges": [[0, 1], [3, 1], [0, 3], [3, 0], [2, 3]]}, "output": [[2, 3], [0, 2, 3], [], [0, 2]], "input_len": 41, "line": 123}
{"problem": "You are given a positive integer n representing the number of nodes of a Directed Acyclic Graph (DAG). The nodes are numbered from 0 to n - 1 (inclusive).\nYou are also given a 2D integer array edges, where edges[i] = [fromi, toi] denotes that there is a unidirectional edge from fromi to toi in the graph.\nReturn a list answer, where answer[i] is the list of ancestors of the ith node, sorted in ascending order.\nA node u is an ancestor of another node v if u can reach v via a set of edges.", "tags": ["DFS", "BFS", "Graph", "Topological Sort"], "input": {"n": 111, "edges": [[11, 29]]}, "output": [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [11], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "input_len": 21, "line": 1018}
{"problem": "You are given a 0-indexed integer array nums, where nums[i] is a digit between 0 and 9 (inclusive).\nThe triangular sum of nums is the value of the only element present in nums after the following process terminates:\n\tLet nums comprise of n elements. If n == 1, end the process. Otherwise, create a new 0-indexed integer array newNums of length n - 1.\n\tFor each index i, where 0 <= i <\u00a0n - 1, assign the value of newNums[i] as (nums[i] + nums[i+1]) % 10, where % denotes modulo operator.\n\tReplace the array nums with newNums.\n\tRepeat the entire process starting from step 1.\nReturn the triangular sum of nums.", "tags": ["Array", "Math", "Combinatorics", "Simulation"], "input": {"nums": [0, 9, 8, 2, 7, 2, 4, 9, 2, 3, 0]}, "output": 4, "input_len": 37, "line": 137}
{"problem": "You are given a 2D integer array grid of size m x n, where each cell contains a positive integer.\nA cornered path is defined as a set of adjacent cells with at most one turn. More specifically, the path should exclusively move either horizontally or vertically up to the turn (if there is one), without returning to a previously visited cell. After the turn, the path will then move exclusively in the alternate direction: move vertically if it moved horizontally, and vice versa, also without returning to a previously visited cell.\nThe product of a path is defined as the product of all the values in the path.\nReturn the maximum number of trailing zeros in the product of a cornered path found in grid.\nNote:\n\tHorizontal movement means moving in either the left or right direction.\n\tVertical movement means moving in either the up or down direction.", "tags": ["Array", "Matrix", "Prefix Sum"], "input": {"grid": [[104, 458, 714, 466, 88, 795, 210, 353, 576, 692, 311, 632, 803, 558, 790, 172, 628, 138, 780, 994, 546, 683, 622, 298, 235, 378, 132, 283, 402, 741, 530, 749, 857, 734, 336, 760, 766, 793, 756, 749, 382, 137, 898, 775, 661, 391, 466, 446, 715, 61, 691, 663, 136, 608, 968, 583, 496, 998, 584, 895, 772, 920, 802, 86, 275, 753, 489, 412, 619, 604, 497, 70, 135, 714, 431, 567, 456, 108, 12, 337, 150, 108, 612, 227, 785, 177, 466, 251, 660, 745, 381, 946, 23, 722, 697, 144, 233, 628, 420, 277, 994, 812, 511, 224, 319, 424, 939, 745, 226, 440, 569, 157, 69, 708, 764, 453, 187, 498, 308, 291, 811, 584, 883, 139, 750, 211, 377, 734, 401, 1, 664, 209, 1000, 42, 246, 505, 75, 431, 496, 882, 879, 924, 264, 6, 219, 944, 945, 59, 911, 316, 269, 925, 179, 888, 910, 439, 286, 297, 210, 239, 466, 551, 617, 693, 802, 516, 241, 372, 922, 745, 586, 265, 583, 670, 908, 841, 172, 465, 31, 622, 731, 78, 472, 305, 91, 731, 36, 67, 900, 805, 601, 884, 73, 11, 289, 761, 136, 459, 954, 54, 141, 533, 780, 400, 565, 652, 128, 749, 37, 962, 51, 856, 309, 586, 993, 420, 843, 255, 798, 737, 835, 880, 629, 789, 775, 757, 400, 948, 347, 798, 655, 129, 751, 283, 145, 70, 470, 817, 519, 582, 192, 755, 750, 437, 222, 391, 412, 382, 681, 476, 386, 444, 339, 688, 491, 569, 794, 203, 426, 398, 381, 67, 511, 619, 223, 31, 411, 83, 395, 522, 59, 504, 261, 225, 468, 449, 217, 360, 595, 551, 36, 768, 907, 830, 307, 835, 15, 242, 821, 818, 80, 282, 410, 768, 628, 767, 351, 413, 300, 23, 23, 145, 923, 215, 308, 737, 936, 964, 314, 266, 192, 696, 456, 493, 505, 802, 303, 702, 718, 58, 433, 740, 382, 315, 791, 650, 59, 169, 150, 231, 894, 603, 398, 769, 44, 604, 547, 891, 668, 492, 492, 80, 481, 183, 439, 887, 406, 63, 465, 317, 51, 108, 236]]}, "output": 89, "input_len": 1731, "line": 7342}
{"problem": "A series of highways connect n cities numbered from 0 to n - 1. You are given a 2D integer array highways where highways[i] = [city1i, city2i, tolli] indicates that there is a highway that connects city1i and city2i, allowing a car to go from city1i to city2i and vice versa for a cost of tolli.\nYou are also given an integer k. You are going on a trip that crosses exactly k highways. You may start at any city, but you may only visit each city at most once during your trip.\nReturn the maximum cost of your trip. If there is no trip that meets the requirements, return -1.", "tags": ["Bit Manipulation", "Graph", "DP", "Bitmask DP"], "input": {"n": 4, "highways": [[1, 2, 91], [0, 2, 46], [1, 2, 81], [0, 3, 69], [2, 3, 77], [0, 3, 11], [0, 3, 81], [0, 1, 29], [0, 1, 61], [0, 1, 11], [1, 3, 14], [1, 2, 49], [0, 2, 44], [1, 2, 11], [0, 1, 2], [0, 3, 25], [1, 2, 27], [2, 3, 45]], "k": 3}, "output": 249, "input_len": 196, "line": 1069}
{"problem": "A series of highways connect n cities numbered from 0 to n - 1. You are given a 2D integer array highways where highways[i] = [city1i, city2i, tolli] indicates that there is a highway that connects city1i and city2i, allowing a car to go from city1i to city2i and vice versa for a cost of tolli.\nYou are also given an integer k. You are going on a trip that crosses exactly k highways. You may start at any city, but you may only visit each city at most once during your trip.\nReturn the maximum cost of your trip. If there is no trip that meets the requirements, return -1.", "tags": ["Bit Manipulation", "Graph", "DP", "Bitmask DP"], "input": {"n": 5, "highways": [[2, 3, 13]], "k": 1}, "output": 13, "input_len": 27, "line": 810}
{"problem": "You are given a 2D integer array rectangles where rectangles[i] = [li, hi] indicates that ith rectangle has a length of li and a height of hi. You are also given a 2D integer array points where points[j] = [xj, yj] is a point with coordinates (xj, yj).\nThe ith rectangle has its bottom-left corner point at the coordinates (0, 0) and its top-right corner point at (li, hi).\nReturn an integer array count of length points.length where count[j] is the number of rectangles that contain the jth point.\nThe ith rectangle contains the jth point if 0 <= xj <= li and 0 <= yj <= hi. Note that points that lie on the edges of a rectangle are also considered to be contained by that rectangle.", "tags": ["Fenwick Tree", "Array", "Binary Search", "Sorting"], "input": {"rectangles": [[8661557, 53], [12, 48], [57799422, 6], [10909285, 27], [26, 2], [25000, 7], [106, 42], [11, 72], [142429722, 69], [117564, 2], [17, 21], [70830, 14], [252, 57], [1557963, 2], [54937330, 3], [14, 1], [2, 50], [8011449, 12], [11316002, 5], [26, 82], [8892677, 55], [31, 1], [41, 1], [7, 4], [223280413, 85], [2641285, 1], [276617, 3], [258, 2], [8249872, 3], [36, 10], [2, 3], [394045, 1], [28719904, 23], [4581, 2], [1143794, 2], [566761, 1], [5389230, 8], [12, 90], [126299347, 13], [497023, 3], [6700, 37], [511, 19], [274970, 65], [5, 12], [33, 13], [967121, 1], [140111, 3], [142, 14], [11773023, 13], [70, 1], [1213696, 1], [876301715, 13], [9122, 9], [31, 2], [7269172, 96], [578, 23], [2118, 10], [325078, 16], [184413011, 24], [1, 3], [77, 9], [19299, 16], [41347880, 48], [16574525, 2], [359836588, 12], [9, 38]], "points": [[1184, 5], [3, 14], [388474, 12], [2105, 8], [183205, 2], [18604, 6], [590595682, 62], [1225, 7], [1617428, 3], [214566008, 9], [352466, 36], [13289250, 1], [2759, 2], [252804, 16], [125894, 49], [45117, 13], [30, 1], [3383828, 2], [3, 15], [5859704, 70], [60522258, 8], [85024, 64], [153, 46], [45002, 34], [469385, 94], [4433, 11], [30268, 57], [10818, 7], [948608, 12], [4617714, 50], [699621813, 12], [49, 86], [68658912, 9], [4, 65], [30, 4], [173, 7], [150537794, 76], [1544, 3], [41, 77], [728043563, 2]]}, "output": [25, 25, 14, 22, 26, 21, 0, 23, 19, 3, 6, 11, 34, 11, 6, 15, 53, 20, 23, 2, 6, 4, 8, 7, 1, 19, 4, 20, 14, 5, 1, 1, 6, 7, 33, 26, 1, 30, 2, 1], "input_len": 1131, "line": 9317}
{"problem": "You are given two integers m and n representing a 0-indexed m x n grid. You are also given two 2D integer arrays guards and walls where guards[i] = [rowi, coli] and walls[j] = [rowj, colj] represent the positions of the ith guard and jth wall respectively.\nA guard can see every cell in the four cardinal directions (north, east, south, or west) starting from their position unless obstructed by a wall or another guard. A cell is guarded if there is at least one guard that can see it.\nReturn the number of unoccupied cells that are not guarded.", "tags": ["Array", "Matrix", "Simulation"], "input": {"m": 4, "n": 15, "guards": [[0, 7], [1, 10], [0, 0], [0, 1], [1, 7]], "walls": [[1, 12], [1, 3], [1, 6], [1, 14], [3, 9], [2, 7], [3, 7]]}, "output": 25, "input_len": 96, "line": 265}
{"problem": "The appeal of a string is the number of distinct characters found in the string.\n\tFor example, the appeal of \"abbca\" is 3 because it has 3 distinct characters: 'a', 'b', and 'c'.\nGiven a string s, return the total appeal of all of its substrings.\nA substring is a contiguous sequence of characters within a string.", "tags": ["Hash Table", "String", "DP"], "input": {"s": "gaiqoqrvychlgslusuwrwydlcrdrxzqmcbdvktrmvxgifpsyuohscptdrrqusltzoljdndhmkewddtkrzpdtcztijabpkiulxdjjstgzmrjyzrnoufguzssufryjbboqkwzobhklsqtzmjlyfmtspzxnfbwdxkckuujneybmdsfwrclcjjocxsmpepwueudioijthbdfzgohqnixzgdmpqjnoumwldmmrvcfiaidesjadnamsjvlhvhhdbpemzzsbntyskqgosyyqvbhkuhroikaoherqxykpigxlummlbnreyjejhallbnyxejqwunsawudzixnzjzmjsecxxhcgmvenbfxakqnpfvjwehqydqxxvlzzypbniaxzyvrbmqrxjavjeequhirslialiqjwfprhwpgxubupbkvgrljfiydszuuhonvoplwiwrewmsckkoyumkhodearflxatgygifiunqeofqzcq"}, "output": 2718043, "input_len": 261, "line": 2416}
{"problem": "You are given a 0-indexed integer array nums. In one operation, you can:\n\tChoose an index i in the range 0 <= i < nums.length\n\tSet nums[i] to nums[i] + 1 or nums[i] - 1\nReturn the minimum number of operations to make nums non-decreasing or non-increasing.", "tags": ["Greedy", "DP"], "input": {"nums": [928]}, "output": 0, "input_len": 9, "line": 6032}
{"problem": "You are given a 0-indexed integer array nums. In one operation, you can:\n\tChoose an index i in the range 0 <= i < nums.length\n\tSet nums[i] to nums[i] + 1 or nums[i] - 1\nReturn the minimum number of operations to make nums non-decreasing or non-increasing.", "tags": ["Greedy", "DP"], "input": {"nums": [509]}, "output": 0, "input_len": 9, "line": 6032}
{"problem": "The variance of a string is defined as the largest difference between the number of occurrences of any 2 characters present in the string. Note the two characters may or may not be the same.\nGiven a string s consisting of lowercase English letters only, return the largest variance possible among all substrings of s.\nA substring is a contiguous sequence of characters within a string.", "tags": ["Array", "DP"], "input": {"s": "re"}, "output": 0, "input_len": 7, "line": 7905}
{"problem": "The variance of a string is defined as the largest difference between the number of occurrences of any 2 characters present in the string. Note the two characters may or may not be the same.\nGiven a string s consisting of lowercase English letters only, return the largest variance possible among all substrings of s.\nA substring is a contiguous sequence of characters within a string.", "tags": ["Array", "DP"], "input": {"s": "ve"}, "output": 0, "input_len": 7, "line": 7905}
{"problem": "You are given a 0-indexed 2D integer array grid of size m x n. Each cell has one of two values:\n\t0 represents an empty cell,\n\t1 represents an obstacle that may be removed.\nYou can move up, down, left, or right from and to an empty cell.\nReturn the minimum number of obstacles to remove so you can move from the upper left corner (0, 0) to the lower right corner (m - 1, n - 1).", "tags": ["BFS", "Graph", "Array", "Matrix", "Shortest Path", "Heap"], "input": {"grid": [[0, 1, 0, 0, 1, 1, 0]]}, "output": 3, "input_len": 26, "line": 160}
{"problem": "You are given a 0-indexed 2D integer array grid of size m x n. Each cell has one of two values:\n\t0 represents an empty cell,\n\t1 represents an obstacle that may be removed.\nYou can move up, down, left, or right from and to an empty cell.\nReturn the minimum number of obstacles to remove so you can move from the upper left corner (0, 0) to the lower right corner (m - 1, n - 1).", "tags": ["BFS", "Graph", "Array", "Matrix", "Shortest Path", "Heap"], "input": {"grid": [[0, 0, 0], [0, 0, 0], [1, 0, 0], [0, 1, 0], [0, 1, 0], [1, 1, 1], [0, 1, 0], [0, 1, 0], [1, 1, 0], [1, 0, 0], [1, 0, 0], [0, 0, 1], [0, 0, 1], [1, 1, 0], [0, 0, 0], [1, 1, 0], [0, 1, 1], [0, 0, 0], [1, 0, 0], [1, 1, 1], [1, 1, 0], [0, 0, 1], [1, 0, 1], [1, 0, 0], [1, 1, 1], [1, 1, 0], [0, 1, 1], [0, 0, 1], [1, 1, 0], [1, 1, 0]]}, "output": 8, "input_len": 275, "line": 3005}
{"problem": "You are given a 0-indexed 2D integer array grid of size m x n. Each cell has one of two values:\n\t0 represents an empty cell,\n\t1 represents an obstacle that may be removed.\nYou can move up, down, left, or right from and to an empty cell.\nReturn the minimum number of obstacles to remove so you can move from the upper left corner (0, 0) to the lower right corner (m - 1, n - 1).", "tags": ["BFS", "Graph", "Array", "Matrix", "Shortest Path", "Heap"], "input": {"grid": [[0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0]]}, "output": 7, "input_len": 47, "line": 349}
{"problem": "You are given a 0-indexed 2D integer array grid of size m x n. Each cell has one of two values:\n\t0 represents an empty cell,\n\t1 represents an obstacle that may be removed.\nYou can move up, down, left, or right from and to an empty cell.\nReturn the minimum number of obstacles to remove so you can move from the upper left corner (0, 0) to the lower right corner (m - 1, n - 1).", "tags": ["BFS", "Graph", "Array", "Matrix", "Shortest Path", "Heap"], "input": {"grid": [[0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0], [0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0]]}, "output": 23, "input_len": 401, "line": 4279}
{"problem": "You are given a 0-indexed 2D integer array grid of size m x n. Each cell has one of two values:\n\t0 represents an empty cell,\n\t1 represents an obstacle that may be removed.\nYou can move up, down, left, or right from and to an empty cell.\nReturn the minimum number of obstacles to remove so you can move from the upper left corner (0, 0) to the lower right corner (m - 1, n - 1).", "tags": ["BFS", "Graph", "Array", "Matrix", "Shortest Path", "Heap"], "input": {"grid": [[0, 0], [0, 1], [0, 0], [0, 1], [1, 0], [1, 0], [0, 1], [1, 0], [0, 0], [1, 0], [0, 0], [0, 1], [0, 0], [0, 0], [1, 0], [1, 0], [1, 1], [0, 0], [1, 1], [0, 1], [1, 1], [1, 0], [1, 0], [0, 1], [1, 1], [0, 0], [1, 0], [1, 0], [0, 0], [1, 1], [0, 0], [1, 0], [1, 1], [0, 1], [0, 1], [1, 1], [1, 0], [1, 0], [1, 1], [0, 1], [1, 1], [1, 0], [0, 0], [1, 1], [0, 1], [0, 1], [1, 0], [1, 1], [0, 1], [0, 1], [1, 0]]}, "output": 20, "input_len": 311, "line": 3376}
{"problem": "You are given a 0-indexed 2D integer array grid of size m x n. Each cell has one of two values:\n\t0 represents an empty cell,\n\t1 represents an obstacle that may be removed.\nYou can move up, down, left, or right from and to an empty cell.\nReturn the minimum number of obstacles to remove so you can move from the upper left corner (0, 0) to the lower right corner (m - 1, n - 1).", "tags": ["BFS", "Graph", "Array", "Matrix", "Shortest Path", "Heap"], "input": {"grid": [[0, 0], [1, 1], [1, 0], [1, 0], [0, 0], [0, 1], [0, 0], [1, 0], [0, 1], [1, 1], [0, 0], [1, 1], [0, 1], [0, 1], [1, 0], [0, 1], [1, 1], [1, 1], [1, 1], [1, 1], [1, 1], [0, 1], [1, 1], [0, 1], [0, 1], [0, 1], [0, 0], [0, 0], [1, 0], [0, 1], [0, 1], [0, 0], [0, 1], [1, 1], [1, 1], [0, 0], [0, 0], [1, 0], [0, 1], [1, 0], [1, 0], [0, 0], [0, 0], [1, 1], [0, 0], [1, 1], [1, 0], [1, 0], [1, 0], [0, 1], [0, 0], [1, 1], [1, 1], [0, 1], [0, 1], [1, 1], [1, 1], [0, 0], [1, 1], [1, 1], [0, 0], [1, 1], [0, 1], [0, 1], [0, 0], [1, 0], [0, 1], [1, 1], [0, 1], [0, 1], [0, 1], [1, 0], [0, 0], [0, 0], [1, 0], [0, 1], [1, 1], [0, 1], [1, 1], [1, 1], [0, 1], [0, 0], [1, 0], [1, 1], [1, 1], [1, 0], [0, 0], [1, 1], [1, 1], [1, 1], [0, 0], [1, 1], [0, 0], [1, 0], [0, 1], [1, 0], [1, 1], [0, 1], [0, 0], [1, 1], [0, 1], [1, 1], [0, 0], [0, 1], [1, 1], [0, 0], [1, 0], [0, 0], [0, 1], [0, 0], [1, 1], [0, 1], [1, 0], [0, 1], [0, 1], [1, 1], [0, 0], [1, 0], [0, 1], [1, 0], [1, 1], [1, 0], [0, 0], [1, 1], [1, 0], [1, 1], [1, 1], [0, 1], [1, 1], [1, 1], [0, 1], [0, 0], [0, 0], [0, 0]]}, "output": 55, "input_len": 809, "line": 8905}
{"problem": "You are given a 0-indexed 2D integer array grid of size m x n. Each cell has one of two values:\n\t0 represents an empty cell,\n\t1 represents an obstacle that may be removed.\nYou can move up, down, left, or right from and to an empty cell.\nReturn the minimum number of obstacles to remove so you can move from the upper left corner (0, 0) to the lower right corner (m - 1, n - 1).", "tags": ["BFS", "Graph", "Array", "Matrix", "Shortest Path", "Heap"], "input": {"grid": [[0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1], [1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0], [0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0], [1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0]]}, "output": 8, "input_len": 743, "line": 8736}
{"problem": "You are given a 0-indexed 2D integer array grid of size m x n. Each cell has one of two values:\n\t0 represents an empty cell,\n\t1 represents an obstacle that may be removed.\nYou can move up, down, left, or right from and to an empty cell.\nReturn the minimum number of obstacles to remove so you can move from the upper left corner (0, 0) to the lower right corner (m - 1, n - 1).", "tags": ["BFS", "Graph", "Array", "Matrix", "Shortest Path", "Heap"], "input": {"grid": [[0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1], [0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0]]}, "output": 13, "input_len": 167, "line": 1724}
{"problem": "You are given a 0-indexed 2D integer array grid of size m x n. Each cell has one of two values:\n\t0 represents an empty cell,\n\t1 represents an obstacle that may be removed.\nYou can move up, down, left, or right from and to an empty cell.\nReturn the minimum number of obstacles to remove so you can move from the upper left corner (0, 0) to the lower right corner (m - 1, n - 1).", "tags": ["BFS", "Graph", "Array", "Matrix", "Shortest Path", "Heap"], "input": {"grid": [[0, 0, 0, 0, 1, 0], [1, 0, 0, 0, 1, 1], [0, 0, 0, 0, 1, 0]]}, "output": 1, "input_len": 59, "line": 444}
{"problem": "You are given two 0-indexed integer arrays of the same length present and future where present[i] is the current price of the ith stock and future[i] is the price of the ith stock a year in the future. You may buy each stock at most once. You are also given an integer budget representing the amount of money you currently have.\nReturn the maximum amount of profit you can make.", "tags": ["Array", "DP"], "input": {"present": [98], "future": [63], "budget": 303}, "output": 0, "input_len": 23, "line": 922}
{"problem": "You are given two 0-indexed integer arrays of the same length present and future where present[i] is the current price of the ith stock and future[i] is the price of the ith stock a year in the future. You may buy each stock at most once. You are also given an integer budget representing the amount of money you currently have.\nReturn the maximum amount of profit you can make.", "tags": ["Array", "DP"], "input": {"present": [86, 3, 39, 2, 87, 36, 81, 41, 7, 30], "future": [24, 72, 20, 4, 70, 83, 7, 40, 13, 71], "budget": 15}, "output": 77, "input_len": 89, "line": 553}
{"problem": "You are given an array of strings ideas that represents a list of names to be used in the process of naming a company. The process of naming a company is as follows:\n\tChoose 2 distinct names from ideas, call them ideaA and ideaB.\n\tSwap the first letters of ideaA and ideaB with each other.\n\tIf both of the new names are not found in the original ideas, then the name ideaA ideaB (the concatenation of ideaA and ideaB, separated by a space) is a valid company name.\n\tOtherwise, it is not a valid name.\nReturn the number of distinct valid names for the company.", "tags": ["Bit Manipulation", "Array", "Hash Table", "String", "Enumeration"], "input": {"ideas": ["cc", "gutgc"]}, "output": 2, "input_len": 12, "line": 463}
{"problem": "You are given two integers m and n that represent the height and width of a rectangular piece of wood. You are also given a 2D integer array prices, where prices[i] = [hi, wi, pricei] indicates you can sell a rectangular piece of wood of height hi and width wi for pricei dollars.\nTo cut a piece of wood, you must make a vertical or horizontal cut across the entire height or width of the piece to split it into two smaller pieces. After cutting a piece of wood into some number of smaller pieces, you can sell pieces according to prices. You may sell multiple pieces of the same shape, and you do not have to sell all the shapes. The grain of the wood makes a difference, so you cannot rotate a piece to swap its height and width.\nReturn the maximum money you can earn after cutting an m x n piece of wood.\nNote that you can cut the piece of wood as many times as you want.", "tags": ["Memoization", "Array", "DP"], "input": {"m": 5, "n": 2, "prices": [[1, 2, 803830], [2, 2, 597351], [2, 1, 464432], [2, 1, 662576], [2, 1, 894560], [2, 2, 259935], [5, 1, 492841], [2, 1, 205716], [2, 2, 97263], [4, 1, 579549], [1, 2, 658624], [2, 1, 160136], [2, 1, 131162], [2, 1, 67881], [1, 2, 159592], [4, 1, 264380], [1, 2, 254016], [3, 1, 284433], [1, 2, 61040], [2, 1, 574744], [1, 1, 262227], [4, 2, 198135], [2, 2, 86929], [4, 1, 720922], [5, 2, 544026], [1, 1, 308847], [5, 1, 3983], [1, 1, 932735], [4, 1, 582358], [4, 1, 131121], [4, 1, 758609], [4, 2, 452695], [1, 1, 724102], [2, 2, 438366], [1, 2, 418136], [2, 1, 125230], [3, 2, 369242], [2, 1, 452889], [4, 1, 277580], [1, 1, 400555], [2, 2, 987355], [2, 1, 319383], [4, 2, 406306], [1, 1, 12199], [5, 1, 173518], [4, 1, 289539], [1, 2, 559091], [3, 2, 803665], [1, 1, 750015], [1, 1, 574374], [4, 2, 330376], [3, 1, 954125], [3, 2, 468223], [5, 1, 911865], [2, 1, 92530], [1, 1, 820752], [2, 1, 20847], [2, 1, 717440], [2, 1, 769091], [2, 1, 101655], [1, 1, 557896], [2, 2, 812528], [2, 1, 305632], [1, 1, 603869], [3, 1, 714330], [2, 1, 462690], [1, 1, 863024], [3, 2, 51640], [4, 1, 574854], [1, 1, 558710], [2, 1, 207162], [4, 2, 640226], [2, 1, 805258], [2, 2, 641374], [4, 2, 82590], [3, 2, 473823], [3, 1, 660567], [3, 1, 257881], [2, 1, 88068], [1, 1, 896576], [5, 2, 401212], [3, 2, 384176], [1, 2, 334384], [3, 2, 77336], [2, 2, 114481], [2, 1, 46518], [2, 1, 969280], [2, 1, 379107], [2, 1, 551822], [4, 1, 19334], [4, 1, 98702], [2, 1, 307140], [4, 2, 116252], [1, 2, 913250], [2, 1, 139538], [1, 2, 124521], [3, 2, 562626], [2, 2, 594383], [4, 2, 215243], [4, 1, 105264], [2, 1, 925762], [4, 1, 561779], [1, 2, 516034], [1, 1, 644690], [4, 2, 933527], [2, 2, 286432], [2, 1, 125122], [1, 1, 547114], [2, 1, 982745], [1, 2, 167415], [2, 1, 476614], [1, 1, 709401], [2, 1, 915019], [4, 2, 664386], [2, 1, 421555], [2, 2, 761096], [3, 1, 65995], [1, 1, 45757], [2, 2, 110165], [4, 2, 799258], [3, 1, 477104], [2, 1, 537115], [1, 2, 154848], [2, 1, 387696], [1, 2, 918648], [2, 1, 78150], [4, 1, 960558], [1, 2, 841980], [4, 1, 986771], [1, 2, 740365], [1, 1, 903755], [2, 1, 449793], [1, 2, 667251], [2, 1, 900328], [4, 2, 35231], [2, 2, 477472], [1, 1, 410849], [3, 1, 624255], [2, 2, 406280], [1, 2, 711201], [3, 2, 72076], [3, 1, 38911], [5, 1, 818802], [1, 2, 515711], [1, 2, 433710], [4, 1, 537122], [2, 1, 179211], [3, 2, 858336], [3, 2, 162582], [2, 2, 534000], [4, 2, 927346], [1, 2, 922362], [2, 2, 73705], [1, 2, 673589], [3, 2, 730099], [2, 2, 917456], [3, 1, 93554], [1, 1, 665231], [1, 2, 560756], [2, 1, 15175], [1, 1, 949287], [2, 2, 434456], [2, 1, 21191], [2, 1, 357734], [2, 1, 205481], [2, 2, 566979], [2, 1, 767830], [2, 1, 899868], [5, 1, 267184], [4, 1, 605054], [2, 1, 228121], [3, 1, 670049], [3, 1, 751394], [2, 1, 790827], [2, 1, 367243], [1, 1, 635658], [1, 1, 790974], [2, 2, 405347], [2, 1, 668103], [2, 1, 836498], [1, 1, 132962], [2, 2, 820138], [4, 1, 137860], [2, 2, 226017], [2, 1, 93333], [5, 2, 848043], [4, 2, 874863], [4, 1, 350715], [4, 2, 18533], [3, 2, 583320], [1, 1, 825292], [4, 1, 274785], [2, 2, 255265], [3, 1, 595872], [2, 1, 971720], [4, 2, 803088], [3, 1, 388670], [1, 1, 35498], [2, 1, 3332], [5, 1, 153388], [2, 1, 514924], [1, 2, 425533], [3, 2, 67392], [1, 2, 862498]]}, "output": 4312490, "input_len": 2841, "line": 524}
{"problem": "You are given two integers m and n that represent the height and width of a rectangular piece of wood. You are also given a 2D integer array prices, where prices[i] = [hi, wi, pricei] indicates you can sell a rectangular piece of wood of height hi and width wi for pricei dollars.\nTo cut a piece of wood, you must make a vertical or horizontal cut across the entire height or width of the piece to split it into two smaller pieces. After cutting a piece of wood into some number of smaller pieces, you can sell pieces according to prices. You may sell multiple pieces of the same shape, and you do not have to sell all the shapes. The grain of the wood makes a difference, so you cannot rotate a piece to swap its height and width.\nReturn the maximum money you can earn after cutting an m x n piece of wood.\nNote that you can cut the piece of wood as many times as you want.", "tags": ["Memoization", "Array", "DP"], "input": {"m": 2, "n": 1, "prices": [[1, 1, 569547], [1, 1, 452986], [1, 1, 6615], [1, 1, 730022], [1, 1, 880963], [1, 1, 318260], [2, 1, 607627], [2, 1, 859179], [2, 1, 662832], [1, 1, 572930], [2, 1, 7691], [1, 1, 519302], [2, 1, 794934], [1, 1, 543245], [1, 1, 779305], [1, 1, 650092], [1, 1, 744516], [2, 1, 431058], [2, 1, 90860], [2, 1, 84215], [2, 1, 497783], [1, 1, 391522], [2, 1, 911845], [1, 1, 260094], [1, 1, 352303], [1, 1, 541151], [1, 1, 687891], [1, 1, 63109], [1, 1, 198329], [1, 1, 84428], [1, 1, 879219], [1, 1, 263742], [2, 1, 286281], [2, 1, 615862], [2, 1, 520126], [2, 1, 546958], [2, 1, 824488], [2, 1, 238516], [1, 1, 875813], [1, 1, 622491], [1, 1, 819741], [1, 1, 477328], [1, 1, 646025], [1, 1, 442130], [1, 1, 883927], [1, 1, 736140], [2, 1, 397427], [2, 1, 845146], [1, 1, 190326], [1, 1, 546739], [1, 1, 78002], [2, 1, 396501], [1, 1, 564796], [1, 1, 687593], [1, 1, 72345], [2, 1, 134777], [1, 1, 719529], [1, 1, 665901], [2, 1, 758692], [2, 1, 946637], [1, 1, 221565], [1, 1, 480665], [1, 1, 628488], [1, 1, 284089], [2, 1, 257201], [1, 1, 916864], [1, 1, 339294], [2, 1, 553979], [1, 1, 703435], [1, 1, 873215], [2, 1, 844341], [1, 1, 342448], [1, 1, 241608], [1, 1, 634351], [2, 1, 165522], [1, 1, 764912], [1, 1, 632401], [1, 1, 92738], [2, 1, 446615], [1, 1, 61741], [1, 1, 57311], [1, 1, 650193], [2, 1, 220174], [1, 1, 774567], [1, 1, 537195], [2, 1, 723327], [1, 1, 199477], [1, 1, 223649], [1, 1, 166903], [2, 1, 231550], [1, 1, 411221], [2, 1, 977624], [2, 1, 671132], [2, 1, 175334], [1, 1, 514541], [2, 1, 952863], [1, 1, 774544], [1, 1, 160873], [1, 1, 85782], [2, 1, 116723], [1, 1, 826487], [1, 1, 816544], [2, 1, 127461], [1, 1, 659043], [1, 1, 400617], [1, 1, 436309], [1, 1, 402194], [1, 1, 956495], [1, 1, 300945], [2, 1, 368481], [1, 1, 705244], [2, 1, 420159], [1, 1, 586468], [1, 1, 23127], [2, 1, 823375], [1, 1, 830112], [2, 1, 938853], [1, 1, 212649], [1, 1, 679845], [2, 1, 544798], [1, 1, 2603], [2, 1, 689817], [2, 1, 896601], [1, 1, 299610], [1, 1, 294277], [2, 1, 251668], [1, 1, 727178], [2, 1, 440552], [1, 1, 192884], [1, 1, 411188], [2, 1, 448136], [1, 1, 873136], [2, 1, 431368], [2, 1, 472429], [2, 1, 973102], [2, 1, 290491], [1, 1, 59892], [1, 1, 902978], [1, 1, 125943], [2, 1, 512214], [1, 1, 199663], [1, 1, 610113], [1, 1, 2858], [1, 1, 111511], [2, 1, 671498], [1, 1, 488978], [1, 1, 219706], [2, 1, 709670], [2, 1, 502657], [2, 1, 295464], [2, 1, 748287], [1, 1, 782085], [1, 1, 143568], [2, 1, 502104], [1, 1, 768615], [1, 1, 656929], [1, 1, 85366], [1, 1, 97789], [2, 1, 988669], [2, 1, 498433], [2, 1, 815362], [1, 1, 897684], [1, 1, 364208], [2, 1, 681948], [1, 1, 785095], [1, 1, 173230], [2, 1, 861118], [1, 1, 486632], [1, 1, 796965], [2, 1, 474876], [2, 1, 74405], [2, 1, 112083], [1, 1, 114390], [1, 1, 687530], [2, 1, 297404], [2, 1, 541866], [1, 1, 772914], [1, 1, 140813], [1, 1, 4101], [1, 1, 816599], [2, 1, 547235], [1, 1, 82575], [1, 1, 143293], [1, 1, 834800], [1, 1, 520760], [1, 1, 671930], [2, 1, 942229], [2, 1, 839403], [1, 1, 411518], [1, 1, 898227], [1, 1, 170210], [1, 1, 116582], [2, 1, 205172], [2, 1, 586840], [1, 1, 637671], [2, 1, 658669], [1, 1, 38000], [1, 1, 831250], [2, 1, 652109], [1, 1, 581311], [1, 1, 572909], [1, 1, 908677], [1, 1, 93555], [1, 1, 304540], [1, 1, 883013], [1, 1, 604436], [1, 1, 633483], [2, 1, 749543], [2, 1, 654036], [2, 1, 919323], [1, 1, 394799], [2, 1, 627240], [1, 1, 984648], [2, 1, 325888], [2, 1, 441137], [1, 1, 737333], [1, 1, 596600], [1, 1, 152264], [2, 1, 157312], [2, 1, 876518], [1, 1, 683561], [1, 1, 963715], [1, 1, 353571], [1, 1, 836308], [2, 1, 985207], [2, 1, 196652], [1, 1, 41602], [1, 1, 239755], [2, 1, 272502], [1, 1, 130055], [2, 1, 293327], [1, 1, 249325], [2, 1, 655073], [1, 1, 172428], [1, 1, 117717], [2, 1, 448963], [1, 1, 690893], [1, 1, 785317], [1, 1, 139072], [1, 1, 989477], [2, 1, 592032], [2, 1, 777762], [1, 1, 152398], [2, 1, 124607], [1, 1, 413304], [2, 1, 665932], [1, 1, 870593], [2, 1, 714721], [2, 1, 405785], [1, 1, 493211], [1, 1, 498086], [1, 1, 515842], [2, 1, 859740], [1, 1, 206003], [2, 1, 369275], [2, 1, 733416], [2, 1, 729889], [2, 1, 782205], [1, 1, 388062], [2, 1, 596102], [1, 1, 369488], [1, 1, 267336], [1, 1, 51777], [1, 1, 338347], [1, 1, 698287], [1, 1, 310648], [1, 1, 722230], [1, 1, 395538], [1, 1, 338612], [2, 1, 100739], [1, 1, 113663], [1, 1, 675283], [1, 1, 838647], [2, 1, 111621], [2, 1, 948291], [1, 1, 931350], [1, 1, 135476], [1, 1, 965910], [1, 1, 255829], [1, 1, 864023], [1, 1, 826839], [1, 1, 829728], [2, 1, 626644], [2, 1, 947774], [2, 1, 456226], [2, 1, 526478], [1, 1, 255950], [1, 1, 829090], [2, 1, 825471], [1, 1, 670421], [1, 1, 689260], [2, 1, 842998], [1, 1, 96643], [2, 1, 204072], [2, 1, 479122], [1, 1, 271756], [1, 1, 760680], [1, 1, 382575], [1, 1, 742744], [2, 1, 340869], [2, 1, 432849], [2, 1, 424447], [1, 1, 294652], [1, 1, 243239], [2, 1, 887213], [1, 1, 164127], [1, 1, 181016], [1, 1, 54921], [2, 1, 966855], [2, 1, 568828], [1, 1, 982753], [2, 1, 34570], [2, 1, 951026], [1, 1, 344501], [1, 1, 136634], [1, 1, 700240], [2, 1, 701725], [2, 1, 840243], [1, 1, 985498], [1, 1, 466660], [1, 1, 754133], [2, 1, 687352], [1, 1, 555571], [2, 1, 37315], [1, 1, 407784], [1, 1, 972522], [1, 1, 236283], [1, 1, 559219], [1, 1, 86690], [1, 1, 976988], [1, 1, 638776], [1, 1, 510466], [2, 1, 708118], [1, 1, 857574], [1, 1, 885538], [2, 1, 960573], [1, 1, 710016], [1, 1, 639535], [2, 1, 789975], [1, 1, 155077], [2, 1, 578761], [1, 1, 799601], [2, 1, 501455], [2, 1, 300678], [1, 1, 974750], [1, 1, 866591], [1, 1, 216554], [1, 1, 12250], [1, 1, 116882], [1, 1, 699556], [1, 1, 388405], [1, 1, 410133], [1, 1, 22314], [2, 1, 805938], [2, 1, 271379], [2, 1, 624903], [2, 1, 786461], [2, 1, 731521], [2, 1, 427015], [1, 1, 802768], [2, 1, 134065], [1, 1, 988992], [2, 1, 830002], [1, 1, 474175], [2, 1, 993366], [1, 1, 614270], [2, 1, 519116], [1, 1, 52241], [2, 1, 808395], [1, 1, 756171], [1, 1, 454554], [1, 1, 366137], [1, 1, 879233], [2, 1, 823069], [2, 1, 5732], [1, 1, 874165], [1, 1, 700858], [1, 1, 100248], [2, 1, 468763], [2, 1, 836251], [1, 1, 16526], [1, 1, 574884], [1, 1, 769510], [2, 1, 322638], [1, 1, 878343], [1, 1, 771316], [1, 1, 61006], [2, 1, 951886], [2, 1, 797418], [1, 1, 414530], [1, 1, 426953], [2, 1, 986037], [1, 1, 169430], [2, 1, 621487], [2, 1, 339383], [2, 1, 410767], [1, 1, 710261], [2, 1, 990997], [1, 1, 817782], [2, 1, 337433], [1, 1, 797860], [2, 1, 955799], [1, 1, 821574], [2, 1, 885812], [2, 1, 767036], [2, 1, 301826], [1, 1, 301244], [1, 1, 968808], [1, 1, 296814], [1, 1, 614646], [1, 1, 831867], [2, 1, 55414], [2, 1, 39958], [1, 1, 565978], [1, 1, 291422], [2, 1, 272936], [1, 1, 497977], [1, 1, 70265], [1, 1, 918455], [1, 1, 757571], [1, 1, 696624], [2, 1, 267688], [1, 1, 973251], [1, 1, 557468], [2, 1, 633635], [1, 1, 459746], [1, 1, 993667], [2, 1, 56330], [2, 1, 970571], [1, 1, 534958], [2, 1, 670760], [1, 1, 172394], [2, 1, 657025], [2, 1, 216661], [1, 1, 998218], [1, 1, 688379], [1, 1, 201032], [2, 1, 626702], [2, 1, 359874], [1, 1, 100866], [1, 1, 983436], [2, 1, 40766], [2, 1, 347307], [2, 1, 119469], [1, 1, 449816], [1, 1, 729970], [1, 1, 446518], [2, 1, 851808], [1, 1, 624291], [1, 1, 762809], [2, 1, 395314], [1, 1, 723181], [1, 1, 351312], [2, 1, 530305], [1, 1, 953728], [1, 1, 902760], [1, 1, 429377], [1, 1, 405470], [2, 1, 567430], [1, 1, 92104], [2, 1, 897685], [1, 1, 938982], [2, 1, 118664], [1, 1, 597701], [1, 1, 428595], [1, 1, 39873], [2, 1, 484382], [1, 1, 740011], [1, 1, 68920], [2, 1, 384445], [1, 1, 919325], [1, 1, 931519], [2, 1, 64663], [1, 1, 625701], [2, 1, 353713], [2, 1, 375670], [2, 1, 265296], [1, 1, 642590], [1, 1, 588962], [1, 1, 679185], [1, 1, 549972], [1, 1, 338987], [2, 1, 7773], [2, 1, 206829], [1, 1, 215552], [1, 1, 190297], [2, 1, 414287], [1, 1, 164813], [1, 1, 926127], [1, 1, 717802], [1, 1, 514136], [1, 1, 98353], [2, 1, 46210], [2, 1, 537578], [1, 1, 371682], [1, 1, 546566], [1, 1, 149622], [2, 1, 992881], [2, 1, 348622], [1, 1, 848942], [2, 1, 859094], [1, 1, 826612], [1, 1, 971366], [1, 1, 9275], [1, 1, 427947], [1, 1, 8866], [2, 1, 321623], [1, 1, 598980], [2, 1, 566988], [2, 1, 284390], [1, 1, 671218], [2, 1, 22895], [1, 1, 935651], [1, 1, 189878], [1, 1, 634034], [2, 1, 609132], [1, 1, 315564], [2, 1, 743449], [1, 1, 740652], [1, 1, 632084], [1, 1, 903607], [2, 1, 872518], [2, 1, 691892], [1, 1, 996719], [2, 1, 349479], [1, 1, 369313], [2, 1, 4442], [2, 1, 678422], [1, 1, 34219], [1, 1, 789971], [2, 1, 991150], [1, 1, 687145], [2, 1, 854209], [2, 1, 878152], [1, 1, 191841], [2, 1, 594471], [2, 1, 471265], [1, 1, 980252], [2, 1, 389529], [2, 1, 408368], [2, 1, 36499], [1, 1, 445284], [2, 1, 628478], [2, 1, 775483], [1, 1, 573221], [1, 1, 87451], [2, 1, 112205], [1, 1, 286916], [2, 1, 23150], [1, 1, 872744], [1, 1, 826026], [1, 1, 713437], [1, 1, 806549], [1, 1, 750935], [2, 1, 685237], [2, 1, 312465], [2, 1, 914881], [1, 1, 426049], [1, 1, 783774], [1, 1, 995662], [1, 1, 819237], [1, 1, 982830], [1, 1, 508086], [1, 1, 324836], [1, 1, 656632], [1, 1, 991497], [1, 1, 769895], [1, 1, 283896], [1, 1, 547426], [1, 1, 438858], [2, 1, 316908], [2, 1, 63815], [1, 1, 350477], [2, 1, 86446], [1, 1, 586537], [1, 1, 173872], [1, 1, 918104], [1, 1, 585225], [2, 1, 95342], [1, 1, 888419], [2, 1, 406758], [1, 1, 105871], [2, 1, 785766], [1, 1, 968470], [1, 1, 342605], [1, 1, 43203], [2, 1, 16315], [2, 1, 767866], [2, 1, 672130], [2, 1, 390664], [2, 1, 297637], [2, 1, 554522], [1, 1, 983229], [2, 1, 352613], [1, 1, 477946], [2, 1, 783937], [1, 1, 704243], [2, 1, 633261], [1, 1, 259269], [1, 1, 848130], [1, 1, 370317], [2, 1, 335701], [1, 1, 199490], [1, 1, 452174], [1, 1, 633065], [1, 1, 754730], [1, 1, 945793], [1, 1, 147704], [2, 1, 879012], [1, 1, 448912], [1, 1, 165231], [1, 1, 783597], [2, 1, 601338], [1, 1, 503335], [1, 1, 33924], [1, 1, 320494], [1, 1, 901182], [2, 1, 336617], [1, 1, 426029], [2, 1, 74893], [2, 1, 763511], [2, 1, 412467], [1, 1, 385498], [2, 1, 713446], [1, 1, 765409], [2, 1, 860415], [1, 1, 572625], [2, 1, 916523], [1, 1, 926149], [2, 1, 83910], [1, 1, 783466], [1, 1, 879876], [1, 1, 429533], [1, 1, 662475], [1, 1, 620367], [2, 1, 466481], [2, 1, 518797], [1, 1, 950622], [1, 1, 4481], [2, 1, 860801], [1, 1, 529097], [2, 1, 502438], [1, 1, 682518], [1, 1, 183651], [2, 1, 485441], [1, 1, 483318], [1, 1, 749737], [2, 1, 827710], [2, 1, 590338], [2, 1, 481361], [1, 1, 606910], [1, 1, 786453], [1, 1, 389509], [1, 1, 471281], [2, 1, 216784], [2, 1, 890764], [2, 1, 344456], [2, 1, 368628], [1, 1, 63311], [2, 1, 606674], [2, 1, 912986], [1, 1, 804245], [1, 1, 582185], [2, 1, 313544], [1, 1, 496477], [1, 1, 387006], [1, 1, 397888], [1, 1, 297048], [1, 1, 528004], [1, 1, 381938], [2, 1, 869687], [1, 1, 374210], [2, 1, 521532], [1, 1, 892639], [2, 1, 892992], [2, 1, 245170], [1, 1, 306438], [1, 1, 543581], [2, 1, 72766], [2, 1, 479015], [2, 1, 463294], [2, 1, 891271], [2, 1, 868002], [2, 1, 428770], [1, 1, 416439], [1, 1, 669123], [2, 1, 433236], [1, 1, 207934], [2, 1, 293671], [2, 1, 674027], [1, 1, 920122], [1, 1, 110513], [2, 1, 441579], [2, 1, 274459], [1, 1, 669509], [2, 1, 203798], [2, 1, 273641], [1, 1, 958559], [2, 1, 872939], [2, 1, 352115], [1, 1, 951914], [2, 1, 217160], [2, 1, 83746], [1, 1, 177588], [1, 1, 991663], [2, 1, 275074], [2, 1, 972094], [1, 1, 328385], [1, 1, 686110], [1, 1, 692117], [2, 1, 354981], [2, 1, 26074], [2, 1, 110784], [2, 1, 468509], [1, 1, 234756], [1, 1, 224139], [2, 1, 13098], [2, 1, 276628], [1, 1, 228605], [1, 1, 796232], [2, 1, 123737], [2, 1, 352249], [1, 1, 729543], [1, 1, 281186], [2, 1, 354055], [1, 1, 960090], [2, 1, 44890], [2, 1, 795358], [1, 1, 312304], [2, 1, 865201], [2, 1, 325538], [2, 1, 812476], [1, 1, 341351], [2, 1, 835516], [1, 1, 392584], [1, 1, 238116], [1, 1, 718818], [1, 1, 520256], [2, 1, 527519], [2, 1, 692424], [1, 1, 30285], [2, 1, 831436], [1, 1, 260603], [2, 1, 889939], [2, 1, 506550], [1, 1, 507954], [2, 1, 436069], [2, 1, 122029], [1, 1, 577797], [1, 1, 318288], [2, 1, 579956], [1, 1, 379909], [1, 1, 147641], [2, 1, 812489], [1, 1, 822115], [1, 1, 821706], [2, 1, 529302], [1, 1, 385543], [1, 1, 11459], [1, 1, 725826], [2, 1, 40679], [2, 1, 17001], [1, 1, 61416], [2, 1, 489566], [2, 1, 74915], [1, 1, 367993], [1, 1, 300630], [1, 1, 470639], [1, 1, 540891], [2, 1, 35058], [1, 1, 965570], [1, 1, 294479], [2, 1, 873534], [2, 1, 907685], [2, 1, 337434], [2, 1, 212013], [1, 1, 802098], [2, 1, 587265], [2, 1, 283662], [1, 1, 957060], [1, 1, 893898], [2, 1, 357706], [1, 1, 372436], [1, 1, 701608], [2, 1, 263138], [1, 1, 511039], [2, 1, 940910], [2, 1, 317031], [1, 1, 204763], [2, 1, 613400], [2, 1, 179681], [1, 1, 904492], [2, 1, 389583], [1, 1, 211264], [2, 1, 540295], [1, 1, 517576], [2, 1, 957884], [2, 1, 47435], [1, 1, 853609], [1, 1, 116467], [2, 1, 518050], [1, 1, 297852], [1, 1, 183277], [1, 1, 773944], [1, 1, 831364], [2, 1, 822232], [2, 1, 72438], [2, 1, 465855], [1, 1, 400799], [1, 1, 465538], [2, 1, 121721], [1, 1, 48672], [1, 1, 141964], [2, 1, 298146], [1, 1, 835915], [2, 1, 954226], [2, 1, 699147], [1, 1, 96185], [1, 1, 298768], [2, 1, 598572], [1, 1, 508441], [1, 1, 893227], [1, 1, 846918], [2, 1, 482047], [1, 1, 196881], [1, 1, 697554], [2, 1, 912239], [2, 1, 605518], [1, 1, 520720], [1, 1, 159733], [1, 1, 271010], [1, 1, 632936], [1, 1, 804028], [1, 1, 765038], [2, 1, 82191], [1, 1, 203274], [1, 1, 400115], [2, 1, 32126], [2, 1, 466339], [1, 1, 585436], [1, 1, 191381], [1, 1, 349232], [2, 1, 26469], [1, 1, 60712], [1, 1, 703021], [2, 1, 98792], [1, 1, 563191], [1, 1, 369913], [2, 1, 244400], [1, 1, 746706], [2, 1, 386036], [1, 1, 107106], [2, 1, 767704], [1, 1, 777559], [1, 1, 310134], [1, 1, 296399], [2, 1, 638082], [2, 1, 23737], [2, 1, 993821], [1, 1, 831452], [1, 1, 201157], [2, 1, 579615], [2, 1, 795524], [2, 1, 238599], [2, 1, 298005], [1, 1, 187049], [1, 1, 635671], [2, 1, 268585], [1, 1, 470586], [1, 1, 82538], [1, 1, 64867], [1, 1, 37397], [2, 1, 152819], [2, 1, 773171], [1, 1, 181778], [1, 1, 278188], [2, 1, 466715], [2, 1, 321781], [2, 1, 923294], [1, 1, 312339], [2, 1, 428399], [1, 1, 804610], [1, 1, 869349], [1, 1, 357830], [2, 1, 636580], [1, 1, 170788], [1, 1, 925228], [1, 1, 517667], [1, 1, 729784], [1, 1, 412626], [2, 1, 323888], [2, 1, 704882], [1, 1, 51145], [2, 1, 27375], [1, 1, 672400], [2, 1, 106752], [2, 1, 998627], [1, 1, 606205], [1, 1, 251863], [1, 1, 543537], [1, 1, 409894], [2, 1, 993150], [2, 1, 554327], [2, 1, 186659], [2, 1, 746967], [2, 1, 491659], [2, 1, 332087], [1, 1, 58441], [1, 1, 120062], [1, 1, 132714], [1, 1, 447922], [1, 1, 830493], [2, 1, 967378], [1, 1, 844902], [2, 1, 538992], [1, 1, 538181], [1, 1, 292407], [2, 1, 710758], [1, 1, 947319], [2, 1, 928653], [2, 1, 660922], [2, 1, 400510], [1, 1, 170778], [2, 1, 672033], [2, 1, 712829], [2, 1, 459507], [1, 1, 431455], [1, 1, 671716], [1, 1, 814255], [2, 1, 389520], [1, 1, 238900], [1, 1, 219423], [1, 1, 844879], [1, 1, 943504], [1, 1, 432214], [2, 1, 572217], [2, 1, 797840], [1, 1, 745207], [2, 1, 69594], [2, 1, 576683], [2, 1, 957268], [2, 1, 360450], [1, 1, 271222], [1, 1, 254189], [1, 1, 679277], [2, 1, 29822], [1, 1, 663327], [1, 1, 268863], [2, 1, 345030], [2, 1, 503290], [2, 1, 583076], [2, 1, 827538], [1, 1, 951330], [1, 1, 420972], [1, 1, 778926], [1, 1, 281142], [1, 1, 516299], [2, 1, 850663], [2, 1, 917388], [1, 1, 567074], [2, 1, 970607], [1, 1, 202524], [1, 1, 442785], [1, 1, 452090], [1, 1, 726093], [1, 1, 758029], [1, 1, 452211], [1, 1, 850732], [1, 1, 470641], [1, 1, 600528], [1, 1, 812416], [1, 1, 44915], [2, 1, 585160], [2, 1, 869335], [1, 1, 227118], [1, 1, 437020], [1, 1, 122751], [1, 1, 159346], [2, 1, 370913], [1, 1, 228286], [2, 1, 199183], [1, 1, 393865], [2, 1, 59353], [2, 1, 813119], [2, 1, 142028], [1, 1, 275763], [1, 1, 550813], [2, 1, 570234], [2, 1, 554513], [2, 1, 389608], [1, 1, 631502], [2, 1, 555596], [1, 1, 113976], [1, 1, 952897], [1, 1, 399090], [2, 1, 635503], [1, 1, 862350], [1, 1, 748858], [1, 1, 529242], [1, 1, 334881], [1, 1, 488940], [2, 1, 863197], [2, 1, 150227], [1, 1, 190212], [2, 1, 124334], [1, 1, 663186], [1, 1, 537320], [2, 1, 839110], [2, 1, 144076], [1, 1, 866672], [1, 1, 994573], [2, 1, 294788], [2, 1, 967685], [2, 1, 154958], [2, 1, 89810], [2, 1, 102004], [2, 1, 228184], [2, 1, 965097], [2, 1, 688964], [2, 1, 866966], [2, 1, 372071], [2, 1, 576640], [2, 1, 823317], [2, 1, 326665], [2, 1, 97286], [2, 1, 740498], [1, 1, 836326], [1, 1, 147299], [2, 1, 36424], [1, 1, 742167], [1, 1, 605455], [1, 1, 247766], [1, 1, 65154], [2, 1, 761673], [2, 1, 395991], [1, 1, 156051], [1, 1, 135900], [2, 1, 502838], [2, 1, 886721], [2, 1, 713414], [2, 1, 658474], [1, 1, 974821], [1, 1, 821256], [1, 1, 884189], [1, 1, 167692], [2, 1, 484120], [1, 1, 878267], [1, 1, 932160], [2, 1, 839221], [1, 1, 533001], [1, 1, 945257], [1, 1, 127920], [2, 1, 266611], [1, 1, 209283], [1, 1, 238559], [2, 1, 701004], [1, 1, 51288], [2, 1, 423330], [2, 1, 520872], [2, 1, 236288], [1, 1, 177239], [2, 1, 981917], [2, 1, 451559], [1, 1, 735332], [1, 1, 806716], [1, 1, 414876], [1, 1, 618133], [1, 1, 548555], [1, 1, 296365], [1, 1, 110406], [2, 1, 66894], [1, 1, 808558], [2, 1, 87948], [2, 1, 590836], [1, 1, 57681], [2, 1, 610349], [1, 1, 350258], [1, 1, 369097], [2, 1, 123267], [2, 1, 808358], [2, 1, 728572], [1, 1, 625429], [2, 1, 245691], [2, 1, 161704], [1, 1, 644533], [1, 1, 702627], [1, 1, 48389], [2, 1, 704112], [1, 1, 462860], [1, 1, 936737], [1, 1, 472659], [1, 1, 827495], [1, 1, 961583], [2, 1, 929591], [1, 1, 462487], [2, 1, 198456], [2, 1, 985699], [1, 1, 39879], [1, 1, 50087], [2, 1, 412415], [2, 1, 127422], [1, 1, 721034], [2, 1, 335109], [1, 1, 881280], [2, 1, 712347], [1, 1, 543791], [2, 1, 767781], [2, 1, 387690], [1, 1, 229522], [2, 1, 120633], [1, 1, 766790], [2, 1, 520057], [2, 1, 792892], [1, 1, 449488], [1, 1, 646738], [2, 1, 757465], [1, 1, 318060], [2, 1, 589491], [1, 1, 358856], [1, 1, 293479], [1, 1, 729004], [1, 1, 498951], [1, 1, 359121], [1, 1, 690688], [2, 1, 555870], [2, 1, 532601], [1, 1, 727283], [1, 1, 87863], [1, 1, 62379], [2, 1, 61878], [2, 1, 23971], [2, 1, 495188], [1, 1, 245485], [1, 1, 56457], [2, 1, 987230], [2, 1, 419194], [1, 1, 597023], [1, 1, 684128], [2, 1, 51706], [1, 1, 435236], [2, 1, 796432], [1, 1, 883858], [2, 1, 499919], [1, 1, 626335], [1, 1, 26628], [2, 1, 412405], [1, 1, 921801], [1, 1, 834961], [1, 1, 598721], [1, 1, 201777], [2, 1, 142989], [2, 1, 369744], [1, 1, 870918], [1, 1, 981966], [1, 1, 506368], [1, 1, 542734], [1, 1, 355463], [2, 1, 980009], [1, 1, 916265], [1, 1, 761568], [2, 1, 218286], [1, 1, 164341], [2, 1, 621502], [1, 1, 871569], [1, 1, 184757], [1, 1, 34490], [2, 1, 434905], [1, 1, 226227], [1, 1, 587744], [2, 1, 213339], [2, 1, 877605], [2, 1, 943656], [1, 1, 884113], [1, 1, 348651], [2, 1, 75086], [1, 1, 324299], [2, 1, 385419], [2, 1, 187940], [1, 1, 964164], [1, 1, 256298], [1, 1, 212204], [2, 1, 856178], [2, 1, 323834], [2, 1, 807654], [2, 1, 58992], [1, 1, 94102], [2, 1, 418788], [1, 1, 716296], [2, 1, 119157], [1, 1, 96438], [1, 1, 211687], [2, 1, 111429], [1, 1, 462565], [2, 1, 454107], [2, 1, 991146], [2, 1, 648733], [1, 1, 923201], [1, 1, 93032], [2, 1, 391704], [1, 1, 673491], [1, 1, 436793], [1, 1, 663548], [2, 1, 68624], [1, 1, 646286], [1, 1, 111498], [2, 1, 845924], [2, 1, 784748], [1, 1, 527546], [1, 1, 798166], [2, 1, 704818], [2, 1, 929129], [2, 1, 513840], [2, 1, 620458], [2, 1, 222431], [1, 1, 167089], [2, 1, 599669], [1, 1, 440009], [1, 1, 174264], [2, 1, 685053], [1, 1, 15595], [1, 1, 506734], [1, 1, 967514], [1, 1, 694041], [2, 1, 184236], [1, 1, 557329], [1, 1, 161288], [2, 1, 983902], [2, 1, 100923], [1, 1, 375162], [2, 1, 648808], [1, 1, 819318], [2, 1, 71912], [1, 1, 926839], [1, 1, 127667], [1, 1, 766858], [2, 1, 663976], [2, 1, 75789], [2, 1, 949908], [2, 1, 233411], [2, 1, 403420], [1, 1, 548446], [2, 1, 261146], [1, 1, 575507], [1, 1, 809352], [1, 1, 150684], [2, 1, 403047], [1, 1, 525262], [2, 1, 595687], [1, 1, 105723], [1, 1, 6015], [1, 1, 70934], [2, 1, 957613], [1, 1, 58102], [1, 1, 389669], [1, 1, 282642], [1, 1, 798627], [1, 1, 296642], [1, 1, 189651], [2, 1, 812800], [2, 1, 672970], [1, 1, 856986], [2, 1, 20718], [1, 1, 595262], [1, 1, 206540], [1, 1, 80445], [2, 1, 440967], [1, 1, 170439], [2, 1, 320879], [1, 1, 702374], [1, 1, 727220], [1, 1, 631713], [1, 1, 133929], [1, 1, 63039], [1, 1, 407932], [2, 1, 174934], [2, 1, 925173], [1, 1, 218037], [1, 1, 565554], [1, 1, 42515], [1, 1, 108566], [1, 1, 802782], [1, 1, 993616], [1, 1, 357314], [1, 1, 873708], [1, 1, 482097], [2, 1, 734689], [1, 1, 221685], [1, 1, 20005], [1, 1, 874611], [1, 1, 192903], [1, 1, 407006], [1, 1, 59489], [2, 1, 994054], [2, 1, 285056], [1, 1, 334804], [2, 1, 872834], [2, 1, 822324], [1, 1, 718687], [2, 1, 49081], [2, 1, 854260], [1, 1, 492282], [1, 1, 566735], [1, 1, 572971], [2, 1, 771297], [2, 1, 285033], [1, 1, 283139], [2, 1, 402088], [1, 1, 15673], [1, 1, 845024], [1, 1, 725116], [1, 1, 430144], [1, 1, 376516], [1, 1, 794285], [1, 1, 127395], [2, 1, 833448], [2, 1, 937177], [2, 1, 338782], [1, 1, 45214], [2, 1, 176357], [1, 1, 416036], [2, 1, 123632], [1, 1, 879705], [1, 1, 335841], [1, 1, 726140], [2, 1, 524633], [1, 1, 106956], [2, 1, 916509], [1, 1, 355210], [2, 1, 324121], [1, 1, 323539], [2, 1, 951792], [2, 1, 70799], [1, 1, 779889], [1, 1, 895367], [2, 1, 224858], [2, 1, 598533], [2, 1, 761223], [1, 1, 800534], [1, 1, 56073], [1, 1, 664905], [1, 1, 491598], [2, 1, 405978], [1, 1, 128131], [1, 1, 146970], [2, 1, 208499], [2, 1, 272335], [1, 1, 628166], [2, 1, 746212], [1, 1, 420070], [2, 1, 543220], [1, 1, 644381], [1, 1, 617814], [1, 1, 138869], [1, 1, 643743], [1, 1, 691858], [1, 1, 429231], [1, 1, 409754], [1, 1, 240468], [2, 1, 827516], [2, 1, 876714], [2, 1, 188590], [1, 1, 934226], [1, 1, 115312], [1, 1, 477467], [2, 1, 50517], [2, 1, 53226], [2, 1, 719887], [1, 1, 289787], [1, 1, 12522], [1, 1, 653928], [2, 1, 19340], [1, 1, 287163], [2, 1, 50373], [1, 1, 435215], [2, 1, 234382], [1, 1, 727828], [1, 1, 598206], [1, 1, 401859], [1, 1, 356633], [1, 1, 703067], [1, 1, 121067], [2, 1, 241822], [2, 1, 377716], [1, 1, 401077], [1, 1, 902653], [1, 1, 304703], [1, 1, 617431], [2, 1, 659712], [1, 1, 480490], [1, 1, 516676], [2, 1, 467831], [1, 1, 740987], [1, 1, 237052], [1, 1, 646419], [2, 1, 659424], [1, 1, 353204], [1, 1, 326637], [2, 1, 405693], [2, 1, 200895], [1, 1, 443463], [2, 1, 867147], [1, 1, 433785], [1, 1, 720175], [1, 1, 386164], [1, 1, 968838], [2, 1, 540131], [2, 1, 192385], [1, 1, 516545], [1, 1, 214025], [2, 1, 231460], [2, 1, 252285], [2, 1, 391935], [1, 1, 679909], [1, 1, 969368], [1, 1, 495756], [2, 1, 516983], [1, 1, 571606], [2, 1, 112985], [2, 1, 477355], [1, 1, 993167], [1, 1, 683328], [2, 1, 903346], [2, 1, 369870], [2, 1, 60260], [1, 1, 936012], [2, 1, 26145], [1, 1, 118001], [2, 1, 847094], [2, 1, 448838], [1, 1, 218203], [1, 1, 688517], [1, 1, 557763], [1, 1, 944090], [2, 1, 913675], [1, 1, 356577], [2, 1, 215788], [2, 1, 469784], [2, 1, 282971], [2, 1, 809802], [1, 1, 66745], [1, 1, 947100], [2, 1, 93076], [1, 1, 226811], [1, 1, 696258], [1, 1, 287794], [1, 1, 621805], [1, 1, 448498], [1, 1, 693863], [1, 1, 782316], [2, 1, 436284], [1, 1, 152250], [1, 1, 929056], [1, 1, 516391], [2, 1, 466463], [1, 1, 648493], [1, 1, 731397], [2, 1, 725334], [1, 1, 312990], [1, 1, 68973], [1, 1, 478340], [1, 1, 159196], [2, 1, 548091], [2, 1, 487144], [1, 1, 225921], [1, 1, 67926], [1, 1, 414360], [1, 1, 600090], [1, 1, 264996], [2, 1, 669841], [2, 1, 747412], [1, 1, 40047], [2, 1, 457315], [2, 1, 720845], [2, 1, 571252], [1, 1, 501995], [2, 1, 108751], [2, 1, 189440], [1, 1, 865318], [1, 1, 127947], [1, 1, 864006], [1, 1, 791310], [2, 1, 341549], [1, 1, 296644], [1, 1, 562160], [2, 1, 209712], [2, 1, 605115], [2, 1, 302595], [1, 1, 899325], [2, 1, 583917], [2, 1, 791604], [1, 1, 582023], [2, 1, 994187], [1, 1, 836019], [1, 1, 276385], [1, 1, 622819], [2, 1, 930796], [1, 1, 844012], [1, 1, 837187], [1, 1, 367547], [1, 1, 229523], [1, 1, 825968], [1, 1, 291409], [1, 1, 921969], [2, 1, 278521], [2, 1, 9478], [2, 1, 818004], [1, 1, 40158], [1, 1, 659427], [1, 1, 608688], [1, 1, 779780], [2, 1, 936636], [2, 1, 826527], [1, 1, 575741], [2, 1, 854491], [1, 1, 834841], [2, 1, 442500], [1, 1, 373652], [1, 1, 687054], [2, 1, 440550], [1, 1, 376806], [1, 1, 722108], [2, 1, 294304], [1, 1, 303027], [1, 1, 247184], [2, 1, 210762], [2, 1, 581139], [1, 1, 644393], [1, 1, 266288], [1, 1, 529818], [2, 1, 920699], [2, 1, 452420], [1, 1, 477767], [1, 1, 587912], [2, 1, 393050], [1, 1, 454089], [2, 1, 847185], [2, 1, 986835], [1, 1, 903120], [2, 1, 141534], [1, 1, 248882], [1, 1, 169096], [1, 1, 607919], [1, 1, 151160], [1, 1, 190415], [2, 1, 829105], [2, 1, 641160], [2, 1, 838410], [2, 1, 955874], [1, 1, 29122], [1, 1, 530878], [1, 1, 327886], [1, 1, 591007], [2, 1, 383493], [1, 1, 510583], [2, 1, 831212], [1, 1, 10175], [2, 1, 235068], [1, 1, 429750], [1, 1, 133646], [1, 1, 2447], [2, 1, 725124], [1, 1, 602648], [1, 1, 697746], [2, 1, 636298], [1, 1, 236557], [2, 1, 265283], [1, 1, 738133], [1, 1, 512281], [2, 1, 264465], [1, 1, 115602], [1, 1, 20998], [1, 1, 526546], [2, 1, 418560], [2, 1, 997033], [2, 1, 57308], [2, 1, 703818], [2, 1, 401298], [1, 1, 908708], [2, 1, 978459], [2, 1, 484696], [1, 1, 747186], [1, 1, 839395], [1, 1, 639930], [2, 1, 455685], [1, 1, 222835], [1, 1, 993045], [1, 1, 278943], [1, 1, 406844], [1, 1, 689213], [1, 1, 647105], [2, 1, 370422], [1, 1, 499956], [1, 1, 883839], [2, 1, 420343], [1, 1, 208318], [2, 1, 46030], [2, 1, 65543], [1, 1, 33290], [2, 1, 342399], [2, 1, 69335], [1, 1, 994743], [1, 1, 102230], [1, 1, 150345], [2, 1, 454121], [1, 1, 122875], [1, 1, 319487], [1, 1, 45340]]}, "output": 454121, "input_len": 22337, "line": 3266}
{"problem": "You are given an integer n. You roll a fair 6-sided dice n times. Determine the total number of distinct sequences of rolls possible such that the following conditions are satisfied:\n\tThe greatest common divisor of any adjacent values in the sequence is equal to 1.\n\tThere is at least a gap of 2 rolls between equal valued rolls. More formally, if the value of the ith roll is equal to the value of the jth roll, then abs(i - j) > 2.\nReturn the total number of distinct sequences possible. Since the answer may be very large, return it modulo 10^9 + 7.\nTwo sequences are considered distinct if at least one element is different.", "tags": ["Memoization", "DP"], "input": {"n": 16}, "output": 47167736, "input_len": 8, "line": 6469}
{"problem": "You are given an integer n. You roll a fair 6-sided dice n times. Determine the total number of distinct sequences of rolls possible such that the following conditions are satisfied:\n\tThe greatest common divisor of any adjacent values in the sequence is equal to 1.\n\tThere is at least a gap of 2 rolls between equal valued rolls. More formally, if the value of the ith roll is equal to the value of the jth roll, then abs(i - j) > 2.\nReturn the total number of distinct sequences possible. Since the answer may be very large, return it modulo 10^9 + 7.\nTwo sequences are considered distinct if at least one element is different.", "tags": ["Memoization", "DP"], "input": {"n": 7}, "output": 4136, "input_len": 7, "line": 2455}
{"problem": "There is an undirected connected tree with n nodes labeled from 0 to n - 1 and n - 1 edges.\nYou are given a 0-indexed integer array nums of length n where nums[i] represents the value of the ith node. You are also given a 2D integer array edges of length n - 1 where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree.\nRemove two distinct edges of the tree to form three connected components. For a pair of removed edges, the following steps are defined:\n\tGet the XOR of all the values of the nodes for each of the three components respectively.\n\tThe difference between the largest XOR value and the smallest XOR value is the score of the pair.\n\tFor example, say the three components have the node values: [4,5,7], [1,9], and [3,3,3]. The three XOR values are 4 ^ 5 ^ 7 = 6, 1 ^ 9 = 8, and 3 ^ 3 ^ 3 = 3. The largest XOR value is 8 and the smallest XOR value is 3. The score is then 8 - 3 = 5.\nReturn the minimum score of any possible pair of edge removals on the given tree.", "tags": ["Bit Manipulation", "Tree", "DFS", "Array"], "input": {"nums": [57320931, 70653752, 71155066, 85369010], "edges": [[0, 1], [0, 2], [2, 3]]}, "output": 51050864, "input_len": 66, "line": 241}
{"problem": "There is an undirected connected tree with n nodes labeled from 0 to n - 1 and n - 1 edges.\nYou are given a 0-indexed integer array nums of length n where nums[i] represents the value of the ith node. You are also given a 2D integer array edges of length n - 1 where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree.\nRemove two distinct edges of the tree to form three connected components. For a pair of removed edges, the following steps are defined:\n\tGet the XOR of all the values of the nodes for each of the three components respectively.\n\tThe difference between the largest XOR value and the smallest XOR value is the score of the pair.\n\tFor example, say the three components have the node values: [4,5,7], [1,9], and [3,3,3]. The three XOR values are 4 ^ 5 ^ 7 = 6, 1 ^ 9 = 8, and 3 ^ 3 ^ 3 = 3. The largest XOR value is 8 and the smallest XOR value is 3. The score is then 8 - 3 = 5.\nReturn the minimum score of any possible pair of edge removals on the given tree.", "tags": ["Bit Manipulation", "Tree", "DFS", "Array"], "input": {"nums": [4608031, 50628192, 58788666, 58245355, 13508809, 53018928, 56859019, 13573379, 46047679, 6488643, 34865413, 31829606, 46833668, 17081483, 69117145, 72378851, 83553555, 5635409], "edges": [[0, 1], [1, 2], [0, 3], [1, 4], [2, 5], [3, 6], [6, 7], [0, 8], [6, 9], [6, 10], [8, 11], [10, 12], [3, 13], [6, 14], [11, 15], [0, 16], [7, 17]]}, "output": 9416035, "input_len": 297, "line": 6289}
{"problem": "There is an undirected connected tree with n nodes labeled from 0 to n - 1 and n - 1 edges.\nYou are given a 0-indexed integer array nums of length n where nums[i] represents the value of the ith node. You are also given a 2D integer array edges of length n - 1 where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree.\nRemove two distinct edges of the tree to form three connected components. For a pair of removed edges, the following steps are defined:\n\tGet the XOR of all the values of the nodes for each of the three components respectively.\n\tThe difference between the largest XOR value and the smallest XOR value is the score of the pair.\n\tFor example, say the three components have the node values: [4,5,7], [1,9], and [3,3,3]. The three XOR values are 4 ^ 5 ^ 7 = 6, 1 ^ 9 = 8, and 3 ^ 3 ^ 3 = 3. The largest XOR value is 8 and the smallest XOR value is 3. The score is then 8 - 3 = 5.\nReturn the minimum score of any possible pair of edge removals on the given tree.", "tags": ["Bit Manipulation", "Tree", "DFS", "Array"], "input": {"nums": [10999009, 45384973, 35394995, 56557261, 5520942, 86861531, 5477922, 42012961], "edges": [[0, 1], [0, 2], [1, 3], [2, 4], [0, 5], [3, 6], [0, 7]]}, "output": 32191547, "input_len": 128, "line": 1129}
{"problem": "There is an undirected connected tree with n nodes labeled from 0 to n - 1 and n - 1 edges.\nYou are given a 0-indexed integer array nums of length n where nums[i] represents the value of the ith node. You are also given a 2D integer array edges of length n - 1 where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree.\nRemove two distinct edges of the tree to form three connected components. For a pair of removed edges, the following steps are defined:\n\tGet the XOR of all the values of the nodes for each of the three components respectively.\n\tThe difference between the largest XOR value and the smallest XOR value is the score of the pair.\n\tFor example, say the three components have the node values: [4,5,7], [1,9], and [3,3,3]. The three XOR values are 4 ^ 5 ^ 7 = 6, 1 ^ 9 = 8, and 3 ^ 3 ^ 3 = 3. The largest XOR value is 8 and the smallest XOR value is 3. The score is then 8 - 3 = 5.\nReturn the minimum score of any possible pair of edge removals on the given tree.", "tags": ["Bit Manipulation", "Tree", "DFS", "Array"], "input": {"nums": [20175693, 87321638, 86885773, 95582839, 77348688, 17463361], "edges": [[0, 1], [1, 2], [1, 3], [0, 4], [1, 5]]}, "output": 57528400, "input_len": 98, "line": 601}
{"problem": "There is an undirected connected tree with n nodes labeled from 0 to n - 1 and n - 1 edges.\nYou are given a 0-indexed integer array nums of length n where nums[i] represents the value of the ith node. You are also given a 2D integer array edges of length n - 1 where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree.\nRemove two distinct edges of the tree to form three connected components. For a pair of removed edges, the following steps are defined:\n\tGet the XOR of all the values of the nodes for each of the three components respectively.\n\tThe difference between the largest XOR value and the smallest XOR value is the score of the pair.\n\tFor example, say the three components have the node values: [4,5,7], [1,9], and [3,3,3]. The three XOR values are 4 ^ 5 ^ 7 = 6, 1 ^ 9 = 8, and 3 ^ 3 ^ 3 = 3. The largest XOR value is 8 and the smallest XOR value is 3. The score is then 8 - 3 = 5.\nReturn the minimum score of any possible pair of edge removals on the given tree.", "tags": ["Bit Manipulation", "Tree", "DFS", "Array"], "input": {"nums": [35398863, 62640758, 84841556], "edges": [[0, 1], [1, 2]]}, "output": 49442693, "input_len": 50, "line": 124}
{"problem": "There is an undirected connected tree with n nodes labeled from 0 to n - 1 and n - 1 edges.\nYou are given a 0-indexed integer array nums of length n where nums[i] represents the value of the ith node. You are also given a 2D integer array edges of length n - 1 where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree.\nRemove two distinct edges of the tree to form three connected components. For a pair of removed edges, the following steps are defined:\n\tGet the XOR of all the values of the nodes for each of the three components respectively.\n\tThe difference between the largest XOR value and the smallest XOR value is the score of the pair.\n\tFor example, say the three components have the node values: [4,5,7], [1,9], and [3,3,3]. The three XOR values are 4 ^ 5 ^ 7 = 6, 1 ^ 9 = 8, and 3 ^ 3 ^ 3 = 3. The largest XOR value is 8 and the smallest XOR value is 3. The score is then 8 - 3 = 5.\nReturn the minimum score of any possible pair of edge removals on the given tree.", "tags": ["Bit Manipulation", "Tree", "DFS", "Array"], "input": {"nums": [8062661, 98571341, 11606641, 3909641, 94056803, 66394894, 28379003, 93470518, 70543892, 93438709, 46553104, 71545978, 75755272, 13250560, 36523117, 33303029, 5706913, 40244073, 61182643, 25249158, 41865749], "edges": [[0, 1], [1, 2], [1, 3], [2, 4], [4, 5], [2, 6], [6, 7], [7, 8], [3, 9], [0, 10], [8, 11], [7, 12], [1, 13], [8, 14], [14, 15], [2, 16], [9, 17], [0, 18], [18, 19], [17, 20]]}, "output": 410218, "input_len": 349, "line": 8656}
{"problem": "There is an undirected connected tree with n nodes labeled from 0 to n - 1 and n - 1 edges.\nYou are given a 0-indexed integer array nums of length n where nums[i] represents the value of the ith node. You are also given a 2D integer array edges of length n - 1 where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree.\nRemove two distinct edges of the tree to form three connected components. For a pair of removed edges, the following steps are defined:\n\tGet the XOR of all the values of the nodes for each of the three components respectively.\n\tThe difference between the largest XOR value and the smallest XOR value is the score of the pair.\n\tFor example, say the three components have the node values: [4,5,7], [1,9], and [3,3,3]. The three XOR values are 4 ^ 5 ^ 7 = 6, 1 ^ 9 = 8, and 3 ^ 3 ^ 3 = 3. The largest XOR value is 8 and the smallest XOR value is 3. The score is then 8 - 3 = 5.\nReturn the minimum score of any possible pair of edge removals on the given tree.", "tags": ["Bit Manipulation", "Tree", "DFS", "Array"], "input": {"nums": [58938556, 21757523, 25884689, 9728704, 64414530, 44920400, 92301173, 62928961, 51618549, 90838254, 13407827, 19758504], "edges": [[0, 1], [0, 2], [2, 3], [3, 4], [1, 5], [5, 6], [6, 7], [4, 8], [6, 9], [3, 10], [2, 11]]}, "output": 3711970, "input_len": 195, "line": 2689}
{"problem": "There is an undirected connected tree with n nodes labeled from 0 to n - 1 and n - 1 edges.\nYou are given a 0-indexed integer array nums of length n where nums[i] represents the value of the ith node. You are also given a 2D integer array edges of length n - 1 where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree.\nRemove two distinct edges of the tree to form three connected components. For a pair of removed edges, the following steps are defined:\n\tGet the XOR of all the values of the nodes for each of the three components respectively.\n\tThe difference between the largest XOR value and the smallest XOR value is the score of the pair.\n\tFor example, say the three components have the node values: [4,5,7], [1,9], and [3,3,3]. The three XOR values are 4 ^ 5 ^ 7 = 6, 1 ^ 9 = 8, and 3 ^ 3 ^ 3 = 3. The largest XOR value is 8 and the smallest XOR value is 3. The score is then 8 - 3 = 5.\nReturn the minimum score of any possible pair of edge removals on the given tree.", "tags": ["Bit Manipulation", "Tree", "DFS", "Array"], "input": {"nums": [70318157, 68137646, 20338036, 14402008, 75031721, 93043637, 6162879, 60284489, 4714721, 10664978], "edges": [[0, 1], [1, 2], [2, 3], [1, 4], [0, 5], [3, 6], [4, 7], [5, 8], [1, 9]]}, "output": 21643885, "input_len": 160, "line": 1825}
{"problem": "There is an undirected connected tree with n nodes labeled from 0 to n - 1 and n - 1 edges.\nYou are given a 0-indexed integer array nums of length n where nums[i] represents the value of the ith node. You are also given a 2D integer array edges of length n - 1 where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree.\nRemove two distinct edges of the tree to form three connected components. For a pair of removed edges, the following steps are defined:\n\tGet the XOR of all the values of the nodes for each of the three components respectively.\n\tThe difference between the largest XOR value and the smallest XOR value is the score of the pair.\n\tFor example, say the three components have the node values: [4,5,7], [1,9], and [3,3,3]. The three XOR values are 4 ^ 5 ^ 7 = 6, 1 ^ 9 = 8, and 3 ^ 3 ^ 3 = 3. The largest XOR value is 8 and the smallest XOR value is 3. The score is then 8 - 3 = 5.\nReturn the minimum score of any possible pair of edge removals on the given tree.", "tags": ["Bit Manipulation", "Tree", "DFS", "Array"], "input": {"nums": [86920972, 16906694, 15071375, 66401084, 26146324, 83958174, 57586209], "edges": [[0, 1], [0, 2], [1, 3], [3, 4], [4, 5], [4, 6]]}, "output": 42514834, "input_len": 114, "line": 844}
{"problem": "There is an undirected connected tree with n nodes labeled from 0 to n - 1 and n - 1 edges.\nYou are given a 0-indexed integer array nums of length n where nums[i] represents the value of the ith node. You are also given a 2D integer array edges of length n - 1 where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree.\nRemove two distinct edges of the tree to form three connected components. For a pair of removed edges, the following steps are defined:\n\tGet the XOR of all the values of the nodes for each of the three components respectively.\n\tThe difference between the largest XOR value and the smallest XOR value is the score of the pair.\n\tFor example, say the three components have the node values: [4,5,7], [1,9], and [3,3,3]. The three XOR values are 4 ^ 5 ^ 7 = 6, 1 ^ 9 = 8, and 3 ^ 3 ^ 3 = 3. The largest XOR value is 8 and the smallest XOR value is 3. The score is then 8 - 3 = 5.\nReturn the minimum score of any possible pair of edge removals on the given tree.", "tags": ["Bit Manipulation", "Tree", "DFS", "Array"], "input": {"nums": [37916894, 98210284, 86772009, 50900095], "edges": [[0, 1], [0, 2], [2, 3]]}, "output": 65148024, "input_len": 66, "line": 241}
{"problem": "You are given a string s consisting of lowercase letters and an integer k. We call a string t ideal if the following conditions are satisfied:\n\tt is a subsequence of the string s.\n\tThe absolute difference in the alphabet order of every two adjacent letters in t is less than or equal to k.\nReturn the length of the longest ideal string.\nA subsequence is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters.\nNote that the alphabet order is not cyclic. For example, the absolute difference in the alphabet order of 'a' and 'z' is 25, not 1.", "tags": ["Hash Table", "String", "DP"], "input": {"s": "thwlrtotkeobjehtyhrkeitxjebqazstsmrgnrqh", "k": 8}, "output": 25, "input_len": 33, "line": 3472}
{"problem": "You are given a string s consisting of lowercase letters and an integer k. We call a string t ideal if the following conditions are satisfied:\n\tt is a subsequence of the string s.\n\tThe absolute difference in the alphabet order of every two adjacent letters in t is less than or equal to k.\nReturn the length of the longest ideal string.\nA subsequence is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters.\nNote that the alphabet order is not cyclic. For example, the absolute difference in the alphabet order of 'a' and 'z' is 25, not 1.", "tags": ["Hash Table", "String", "DP"], "input": {"s": "pnoklqurhgkmrmlwgwxfcogzhntiayuyqt", "k": 10}, "output": 27, "input_len": 32, "line": 3004}
{"problem": "You are given an n x n integer matrix grid.\nGenerate an integer matrix maxLocal of size (n - 2) x (n - 2) such that:\n\tmaxLocal[i][j] is equal to the largest value of the 3 x 3 matrix in grid centered around row i + 1 and column j + 1.\nIn other words, we want to find the largest value in every contiguous 3 x 3 matrix in grid.\nReturn the generated matrix.", "tags": ["Array", "Matrix"], "input": {"grid": [[50, 51, 77, 94], [27, 54, 15, 17], [21, 60, 48, 94], [99, 58, 23, 35]]}, "output": [[77, 94], [99, 94]], "input_len": 69, "line": 177}
{"problem": "We call a positive integer special if all of its digits are distinct.\nGiven a positive integer n, return the number of special integers that belong to the interval [1, n].", "tags": ["Math", "DP"], "input": {"n": 2806}, "output": 1639, "input_len": 10, "line": 6967}
{"problem": "We call a positive integer special if all of its digits are distinct.\nGiven a positive integer n, return the number of special integers that belong to the interval [1, n].", "tags": ["Math", "DP"], "input": {"n": 259}, "output": 202, "input_len": 9, "line": 1401}
{"problem": "You are given a string s of lowercase English letters and a 2D integer array shifts where shifts[i] = [starti, endi, directioni]. For every i, shift the characters in s from the index starti to the index endi (inclusive) forward if directioni = 1, or shift the characters backward if directioni = 0.\nShifting a character forward means replacing it with the next letter in the alphabet (wrapping around so that 'z' becomes 'a'). Similarly, shifting a character backward means replacing it with the previous letter in the alphabet (wrapping around so that 'a' becomes 'z').\nReturn the final string after all such shifts to s are applied.", "tags": ["Array", "String", "Prefix Sum"], "input": {"s": "vrvpdayxidyulptgtirjwwylozaoexxvtzhvmzabsvlunzfziqpuazuvgylhoklerqzovoorywzsgdjcgyhcmlqxjxrrdzcvbjganpzjytlsptzetzktbjbmkfzmixhjwtmgwulrtlstivhbgmaevxjlcdowiloybutqjtaftsjwusvwvasgqjhzrjhoadnasnxpmvleuxuyneptjnykaljtynpzaxvquygjghoafxxfgmvmyaxcvlheujpyazhosvoenttigjonyixvqbrslmuqzssiprmdlqvnvtpxibiamfdzwgiyebcwnqlprnluzefarjxitjnnjrpionqwawwqzgifwonenidmmllrvwkzefestyrkovrcnijuqatngtgkozqeamdfybopvroxbxyigtnxzn", "shifts": [[378, 390, 1], [162, 303, 1], [214, 406, 1], [200, 412, 0], [52, 255, 0], [63, 257, 1], [305, 378, 1], [209, 354, 0], [257, 336, 0], [259, 396, 1], [65, 200, 0], [365, 373, 0], [5, 176, 0], [73, 341, 1], [355, 367, 0], [289, 366, 1], [195, 301, 0], [209, 263, 0], [323, 379, 0], [407, 410, 0], [21, 316, 1], [312, 312, 1], [44, 267, 1], [235, 238, 1], [373, 412, 0], [321, 357, 1], [57, 180, 0], [385, 390, 1], [29, 192, 1], [335, 363, 1], [12, 277, 1], [35, 275, 0], [229, 248, 1], [87, 219, 0], [4, 129, 0], [101, 152, 1], [369, 385, 1], [302, 354, 0], [295, 317, 1], [264, 396, 0], [8, 31, 1], [218, 237, 0], [233, 395, 1], [199, 328, 1], [375, 408, 1], [37, 182, 1], [75, 256, 1], [275, 277, 0], [398, 404, 1], [110, 239, 1], [105, 151, 0], [119, 366, 0], [169, 348, 1], [268, 346, 1], [133, 176, 1], [71, 89, 0], [353, 362, 0], [215, 306, 1], [399, 401, 0], [291, 319, 1], [288, 308, 1], [66, 172, 0], [174, 278, 1], [412, 412, 0], [239, 367, 0], [389, 407, 1], [374, 378, 0], [296, 343, 1], [49, 347, 1], [396, 409, 1], [12, 282, 1], [25, 187, 0], [285, 317, 0], [362, 408, 1], [286, 395, 1], [261, 402, 1], [132, 285, 1], [218, 327, 1], [66, 287, 0], [80, 356, 1], [71, 187, 1], [32, 102, 1], [93, 225, 1], [275, 362, 0], [310, 381, 0], [239, 389, 0], [410, 411, 1], [84, 171, 1], [30, 290, 1], [322, 377, 0], [141, 317, 0], [221, 390, 1], [67, 83, 1], [26, 245, 0], [149, 370, 0], [57, 369, 1], [304, 401, 1], [389, 407, 0], [211, 220, 0], [233, 285, 1], [347, 374, 1], [367, 383, 0], [32, 309, 1], [241, 352, 1], [115, 145, 0], [394, 409, 1], [141, 221, 1], [66, 312, 0], [304, 372, 0], [235, 235, 0], [57, 208, 1], [244, 352, 1], [409, 411, 1], [249, 257, 1], [193, 221, 0], [39, 392, 0], [167, 247, 0], [6, 40, 0], [20, 52, 0], [405, 409, 0], [382, 385, 1], [329, 395, 1], [139, 299, 0], [230, 286, 0], [5, 340, 1], [92, 279, 1], [206, 306, 0], [48, 216, 1], [225, 395, 0], [222, 297, 1], [75, 214, 0], [283, 336, 1], [309, 342, 0], [375, 398, 1], [364, 373, 0], [101, 124, 1], [327, 405, 0], [271, 410, 0], [266, 390, 0], [389, 401, 1], [271, 407, 1], [264, 395, 0], [214, 231, 0], [391, 395, 0], [210, 408, 0], [29, 36, 1], [334, 383, 1], [40, 287, 0], [286, 388, 0], [331, 409, 0], [106, 206, 1], [251, 314, 0], [288, 382, 1], [166, 258, 1], [274, 407, 1], [409, 409, 1], [302, 355, 0], [413, 413, 0], [249, 303, 1], [319, 344, 0], [359, 386, 0], [127, 388, 0], [39, 338, 1], [243, 310, 1], [258, 285, 0], [127, 302, 1], [103, 367, 1], [373, 385, 1], [69, 74, 0], [143, 297, 1], [229, 263, 1], [112, 137, 1], [369, 369, 1], [169, 355, 1], [73, 400, 0], [234, 350, 0], [261, 267, 0], [304, 322, 1], [80, 215, 0], [387, 389, 0], [313, 334, 1], [135, 176, 1], [222, 242, 1], [35, 74, 1], [69, 320, 0], [400, 404, 1], [84, 402, 1], [403, 404, 0]]}, "output": "vrvpczwvhcxtmquhujskwxzmpzzndyzxwckypcdeuyoxrdjdnwvaffabmfsovrsmzxdtarrubzcvjgmfjbkfqpuamavvifibhpmgtxhrgataxbindjuckskusnhuqeoqdauofevcewccreqlqwlpghtvnnygsvyileebuemqefwjgfjkjnftdxvmewubnqanfyizwfvpeifjypzcstdoepnzftvfhggbfipspsykqkjrtzjxilinhxuriyemonvchiyoxddsorvugqfdyjaztucxfyyovwqiuafxfdziunskxqnieprhnihaswrwytsaellevnblvlpoksrkqpsxbwvqygifvmldmezjjhglpqfwzzylnulfjroalgjurbwpiwgkocvgcphjdgutaxtzdxzhdrlxwm", "input_len": 2614, "line": 2917}
{"problem": "You are given a string s, which contains stars *.\nIn one operation, you can:\n\tChoose a star in s.\n\tRemove the closest non-star character to its left, as well as remove the star itself.\nReturn the string after all stars have been removed.\nNote:\n\tThe input will be generated such that the operation is always possible.\n\tIt can be shown that the resulting string will always be unique.", "tags": ["Stack", "String", "Simulation"], "input": {"s": "eahpa*tcpgughubzjcffdudxfhi*lquudtthmwjby*qbvgsja*ilhhxpqq*eigixshua*osvwd*rhzuopm*plbdvhqbqaarmrc*kqexcatns*uga*tritldqgbxbavcyncofpqndrrqdlnwtu**rjuqrnrfentzsntknyfresjm*f*vkp*vo*pmhamvppb*uyqhxcerkgmwofyp*fd*fdgnbuhohsswsxqoqlme*plqdd*poceekjybspmcppeodiyyeqeebjzezshftqcuoswiomgqt*yhcx*wtmkjxhf*rdljoapvepo*lkbfypjfqurmkyzqcnnnzyhdvdoliymskkoywzz*hiqqmhccteqwlnlesidmmpujtsbdzm*zrrx*mx*rksupiselbmrzyikbvkewfurozceluzwrukixjvo*rbnonyhjffymlaezxx*gorpeoayalos*byqahq*umeocpzsjqxjehvypbfvdwywgeaphadhpczp*ylccefig*osnjwwlwyyocrjzvhhcwevpxyyjds**gquwkhvlsc*zuhmcxxnuydjwqdpcgzyyfdqozoorvjdblvrbbeiknsmxvm*nqysukgjnoadxryedsibsynrwvsg*sxobm*b*ytfqkzmnhlwfwa*pzabmm*kidsubancxnetiosgi*cenaovdg"}, "output": "eahptcpgughubzjcffdudxfhlquudtthmwjbqbvgsjilhhxpqeigixshuosvwrhzuopplbdvhqbqaarmrkqexcatnugtritldqgbxbavcyncofpqndrrqdlnwrjuqrnrfentzsntknyfresjvkvpmhamvppuyqhxcerkgmwofyffdgnbuhohsswsxqoqlmplqdpoceekjybspmcppeodiyyeqeebjzezshftqcuoswiomgqyhcwtmkjxhrdljoapveplkbfypjfqurmkyzqcnnnzyhdvdoliymskkoywzhiqqmhccteqwlnlesidmmpujtsbdzzrrmrksupiselbmrzyikbvkewfurozceluzwrukixjvrbnonyhjffymlaezxgorpeoayalobyqahumeocpzsjqxjehvypbfvdwywgeaphadhpczylccefiosnjwwlwyyocrjzvhhcwevpxyyjgquwkhvlszuhmcxxnuydjwqdpcgzyyfdqozoorvjdblvrbbeiknsmxvnqysukgjnoadxryedsibsynrwvssxobytfqkzmnhlwfwpzabmkidsubancxnetiosgcenaovdg", "input_len": 390, "line": 2081}
{"problem": "You are given an integer array power where power[i] is the power of the ith monster.\nYou start with 0 mana points, and each day you increase your mana points by gain where gain initially is equal to 1.\nEach day, after gaining gain mana, you can defeat a monster if your mana points are greater than or equal to the power of that monster. When you defeat a monster:\n\tyour mana points will be reset to 0, and\n\tthe value of gain increases by 1.\nReturn the minimum number of days needed to defeat all the monsters.", "tags": ["Bit Manipulation", "Array", "DP", "Bitmask DP"], "input": {"power": [474163321, 845536602, 78657845, 778651992]}, "output": 786674321, "input_len": 47, "line": 270}
{"problem": "You are given a 0-indexed array nums of length n, consisting of non-negative integers. For each index i from 0 to n - 1, you must determine the size of the minimum sized non-empty subarray of nums starting at i (inclusive) that has the maximum possible bitwise OR.\n\tIn other words, let Bij be the bitwise OR of the subarray nums[i...j]. You need to find the smallest subarray starting at i, such that bitwise OR of this subarray is equal to max(Bik) where i <= k <= n - 1.\nThe bitwise OR of an array is the bitwise OR of all the numbers in it.\nReturn an integer array answer of size n where answer[i] is the length of the minimum sized subarray starting at i with maximum bitwise OR.\nA subarray is a contiguous non-empty sequence of elements within an array.", "tags": ["Bit Manipulation", "Array", "Binary Search", "Sliding Window"], "input": {"nums": [565246828, 136972720, 627512227, 106937792, 780277992, 930802866, 120414548, 640768780, 647056990, 500809294, 236075006, 883089764, 261061100, 981436956, 421523730, 682511747, 675662952, 589020397, 984872441, 324239025, 486964097, 803133034, 767782314, 72674471, 862512813, 535635691, 430728111, 283476718, 796646846, 654027033, 344107065, 773431465, 631662833, 748366433, 929147213, 861595258, 284761525, 793005630, 848132863, 686024409, 341007816, 90761804, 292636848, 413985411]}, "output": [6, 6, 5, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 8, 7, 6, 6, 5, 6, 6, 9, 8, 7, 6, 5, 4, 3, 3, 6, 8, 7, 6, 5, 5, 4, 3, 4, 4, 4, 5, 4, 3, 2, 1], "input_len": 486, "line": 5001}
{"problem": "You are given two non-negative integer arrays price and tastiness, both arrays have the same length n. You are also given two non-negative integers maxAmount and maxCoupons.\nFor every integer i in range [0, n - 1]:\n\tprice[i] describes the price of ith fruit.\n\ttastiness[i] describes the tastiness of ith fruit.\nYou want to purchase some fruits such that total tastiness is maximized and the total price does not exceed maxAmount.\nAdditionally, you can use a coupon to purchase fruit for half of its price (rounded down to the closest integer). You can use at most maxCoupons of such coupons.\nReturn the maximum total tastiness that can be purchased.\nNote that:\n\tYou can purchase each fruit at most once.\n\tYou can use coupons on some fruit at most once.", "tags": ["Array", "DP"], "input": {"price": [649, 140, 946, 355, 885], "tastiness": [166, 157, 389, 346, 193], "maxAmount": 317, "maxCoupons": 3}, "output": 503, "input_len": 76, "line": 127}
{"problem": "You are given a string s and a robot that currently holds an empty string t. Apply one of the following operations until s and t are both empty:\n\tRemove the first character of a string s and give it to the robot. The robot will append this character to the string t.\n\tRemove the last character of a string t and give it to the robot. The robot will write this character on paper.\nReturn the lexicographically smallest string that can be written on the paper.", "tags": ["Stack", "Greedy", "Hash Table", "String"], "input": {"s": "vbcvsmlzsuokwilmdejwouxtwltjthheyhdoszkgwcbvdfxotiqbchsdnhnzmwwpozxfnvftyikgdynznfhkvmvoxpafkvvzewymunulajmnhzvfheeltdvxinlclgmlsyuysgooxjljicupbeonvxjmqlgrwxrjkljzrjsysceqmdjcqenypmoabctraqbpvnwbnivbmhpgdscmvltfnaabqzvmpjyqmlmzjtjkzgnkruhnplwchtjgghhstyenlxlbpkmiuoqtpkjwafjxgeennnkfruhpgrnfxfqkcizqiamfuhcsoutineodtvbsslmoqpllavsxeiqtiiwjeagsnipfgjtznjhhceofhznadhrclgaetyfhfdlmjgqrndajmdrqebkzgtqyvdwveaioeggeq"}, "output": "aaaaaaaaaaaaaaeeeggoiqvwdvyqtgzkbeqrdmjdnrqgjmldfhfyteglcrhdnzhfoechhjnztjgfpinsgejwiitqiexsvllpqomlssbvtdoenituoschufmiqzickqfxfnrgphurfknnneegxjfwjkptqouimkpblxlneytshhggjthcwlpnhurkngzkjtjzmlmqyjpmvzqbnftlvmcsdgphmbvinbwnvpbqrtcbompyneqcjdmqecsysjrzjlkjrxwrglqmjxvnoebpucijljxoogsyuyslmglclnixvdtleehfvzhnmjlunumywezvvkfpxovmvkhfnznydgkiytfvnfxzopwwmznhndshcbqitoxfdvbcwgkzsodhyehhtjtlwtxuowjedmliwkouszlmsvcbv", "input_len": 237, "line": 2956}
{"problem": "You are given a 0-indexed m x n integer matrix grid and an integer k. You are currently at position (0, 0) and you want to reach position (m - 1, n - 1) moving only down or right.\nReturn the number of paths where the sum of the elements on the path is divisible by k. Since the answer may be very large, return it modulo 10^9 + 7.", "tags": ["Array", "DP", "Matrix"], "input": {"grid": [[2, 96, 45, 80, 37, 26, 76, 54, 57, 69, 75, 49, 77, 84, 75, 86, 87, 78, 61, 78, 31, 1, 72, 93, 71, 47, 26], [35, 100, 66, 67, 16, 29, 73, 41, 0, 34, 53, 30, 96, 1, 78, 48, 54, 50, 60, 43, 5, 60, 9, 65, 32, 95, 90], [16, 89, 77, 60, 37, 41, 97, 58, 32, 87, 33, 49, 44, 6, 30, 3, 63, 22, 9, 29, 35, 94, 9, 31, 66, 59, 0], [11, 79, 94, 90, 67, 84, 46, 59, 17, 0, 86, 79, 8, 32, 78, 22, 28, 98, 27, 37, 91, 83, 64, 22, 76, 77, 96], [51, 1, 21, 34, 98, 81, 50, 85, 81, 69, 22, 84, 15, 74, 81, 40, 38, 68, 50, 40, 17, 20, 73, 54, 40, 91, 3], [6, 0, 48, 87, 12, 12, 23, 23, 39, 48, 4, 74, 65, 86, 58, 46, 100, 56, 50, 96, 38, 26, 37, 49, 20, 64, 57], [78, 97, 77, 76, 19, 23, 96, 49, 52, 50, 24, 7, 77, 85, 29, 14, 97, 86, 38, 99, 60, 80, 20, 35, 96, 31, 32], [91, 53, 83, 97, 52, 60, 46, 23, 55, 41, 29, 50, 79, 74, 69, 18, 4, 38, 69, 28, 90, 22, 100, 19, 67, 82, 62], [71, 78, 76, 34, 66, 78, 83, 77, 55, 79, 80, 27, 80, 78, 49, 16, 49, 19, 97, 78, 70, 1, 58, 72, 45, 62, 23], [86, 38, 26, 29, 54, 11, 31, 80, 59, 7, 0, 17, 86, 21, 5, 96, 62, 50, 41, 69, 33, 96, 40, 100, 45, 55, 76], [89, 99, 60, 2, 69, 36, 25, 69, 18, 25, 56, 77, 95, 40, 12, 3, 26, 24, 77, 36, 53, 81, 8, 49, 88, 65, 25], [37, 25, 42, 15, 22, 3, 34, 36, 85, 85, 13, 24, 16, 33, 3, 59, 73, 15, 36, 38, 71, 88, 75, 42, 34, 79, 35], [97, 59, 12, 75, 40, 6, 43, 74, 77, 90, 72, 13, 19, 62, 77, 56, 70, 70, 63, 21, 95, 15, 48, 23, 52, 29, 91], [93, 48, 68, 90, 31, 91, 26, 89, 98, 83, 80, 85, 11, 21, 90, 15, 64, 13, 64, 27, 99, 77, 34, 95, 34, 13, 51], [75, 4, 56, 87, 3, 1, 25, 42, 41, 40, 3, 36, 27, 70, 78, 40, 10, 68, 61, 89, 51, 53, 95, 26, 2, 5, 46], [66, 51, 46, 7, 15, 9, 35, 43, 24, 69, 32, 26, 1, 22, 55, 53, 16, 76, 12, 67, 100, 34, 66, 73, 52, 37, 46], [84, 74, 6, 55, 0, 68, 91, 75, 68, 16, 37, 51, 97, 53, 2, 33, 97, 29, 33, 31, 89, 93, 41, 84, 84, 22, 30], [32, 43, 83, 65, 94, 18, 92, 38, 53, 88, 19, 11, 59, 35, 61, 14, 74, 0, 24, 93, 90, 4, 20, 3, 7, 72, 59], [62, 68, 89, 0, 89, 18, 44, 34, 9, 36, 26, 36, 20, 52, 5, 8, 43, 80, 56, 18, 51, 87, 56, 98, 18, 0, 22], [72, 87, 27, 75, 64, 2, 50, 0, 1, 38, 5, 96, 100, 42, 21, 99, 20, 91, 25, 49, 9, 42, 42, 75, 12, 41, 33], [5, 95, 78, 83, 71, 21, 7, 43, 96, 73, 53, 3, 25, 99, 38, 98, 57, 26, 21, 8, 62, 96, 68, 34, 77, 75, 28]], "k": 2}, "output": 116552073, "input_len": 2224, "line": 5657}
{"problem": "You are given a 0-indexed m x n integer matrix grid and an integer k. You are currently at position (0, 0) and you want to reach position (m - 1, n - 1) moving only down or right.\nReturn the number of paths where the sum of the elements on the path is divisible by k. Since the answer may be very large, return it modulo 10^9 + 7.", "tags": ["Array", "DP", "Matrix"], "input": {"grid": [[16, 37], [23, 55], [71, 59], [66, 74], [71, 20], [68, 89], [31, 20], [21, 95], [81, 22], [25, 50], [97, 10], [31, 55], [37, 1], [34, 40], [35, 6], [49, 27], [74, 38], [98, 61], [35, 54], [88, 16], [38, 33], [73, 56], [75, 68], [93, 6], [22, 5], [32, 57], [11, 24], [45, 67], [13, 8], [88, 32], [19, 93], [31, 97], [83, 18], [92, 79], [41, 73], [74, 14], [81, 89], [43, 95], [59, 41]], "k": 45}, "output": 1, "input_len": 318, "line": 4224}
{"problem": "You are given a 0-indexed array nums comprising of n non-negative integers.\nIn one operation, you must:\n\tChoose an integer i such that 1 <= i < n and nums[i] > 0.\n\tDecrease nums[i] by 1.\n\tIncrease nums[i - 1] by 1.\nReturn the minimum possible value of the maximum integer of nums after performing any number of operations.", "tags": ["Greedy", "Array", "Binary Search", "DP", "Prefix Sum"], "input": {"nums": [337708978, 255722696, 154188832, 892928940, 402964793, 854212049, 712534090, 184994128, 41093470, 956455927, 823849731, 48339649, 341867907, 678512093, 150302643, 989215213, 131298298, 846656364, 279819146, 395905843, 42559513, 947511652, 103757486, 386766886, 424412558, 851430561, 666219839, 855469001, 313935990, 307814108, 640171209, 79840210, 365285145, 581248341, 105877940, 137112618, 135800508, 676190473, 576250559, 2876009, 980293399, 310038247, 470638140, 413993837, 366021823, 906813840, 277835757, 977448921, 645944416, 668341336, 887308478, 637150714, 996282724, 528684463, 543017309, 512966769, 461805319, 500782061, 722785647, 646976419, 830187195, 677765201, 983436342]}, "output": 517866981, "input_len": 691, "line": 3936}
{"problem": "You are given a 0-indexed array nums comprising of n non-negative integers.\nIn one operation, you must:\n\tChoose an integer i such that 1 <= i < n and nums[i] > 0.\n\tDecrease nums[i] by 1.\n\tIncrease nums[i - 1] by 1.\nReturn the minimum possible value of the maximum integer of nums after performing any number of operations.", "tags": ["Greedy", "Array", "Binary Search", "DP", "Prefix Sum"], "input": {"nums": [345812776, 19478447, 199950754, 372159132, 400394129, 130909740, 273592803, 977219650]}, "output": 345812776, "input_len": 91, "line": 636}
{"problem": "There is an undirected connected tree with n nodes labeled from 1 to n and n - 1 edges. You are given the integer n. The parent node of a node with a label v is the node with the label floor (v / 2). The root of the tree is the node with the label 1.\n\tFor example, if n = 7, then the node with the label 3 has the node with the label floor(3 / 2) = 1 as its parent, and the node with the label 7 has the node with the label floor(7 / 2) = 3 as its parent.\nYou are also given an integer array queries. Initially, every node has a value 0 on it. For each query queries[i], you should flip all values in the subtree of the node with the label queries[i].\nReturn the total number of nodes with the value 1 after processing all the queries.\nNote that:\n\tFlipping the value of a node means that the node with the value 0 becomes 1 and vice versa.\n\tfloor(x) is equivalent to rounding x down to the nearest integer.", "tags": ["Tree", "DFS", "BFS", "Binary Tree"], "input": {"n": 5516, "queries": [74, 1024, 2950, 1131, 3305, 5067, 4758, 5381, 2745, 897, 760, 497, 66, 2798, 1750, 2226, 4027, 4024, 3102, 3877, 3582, 1665, 1264, 1183, 4960, 3968, 4106, 4847, 2158, 5344, 3692, 1665, 3519, 3773, 4296, 1054, 696, 2195, 2990, 2021, 288, 1137, 2421, 4456, 4112, 934, 2677, 4372, 3445, 2891, 182, 3165, 832, 1444, 3336, 263, 4901, 931, 5515, 4479, 4597, 5133, 2397, 1905, 5094, 4474, 3235, 2947, 4027, 4585, 4576, 2876]}, "output": 496, "input_len": 431, "line": 3466}
{"problem": "There is an undirected connected tree with n nodes labeled from 1 to n and n - 1 edges. You are given the integer n. The parent node of a node with a label v is the node with the label floor (v / 2). The root of the tree is the node with the label 1.\n\tFor example, if n = 7, then the node with the label 3 has the node with the label floor(3 / 2) = 1 as its parent, and the node with the label 7 has the node with the label floor(7 / 2) = 3 as its parent.\nYou are also given an integer array queries. Initially, every node has a value 0 on it. For each query queries[i], you should flip all values in the subtree of the node with the label queries[i].\nReturn the total number of nodes with the value 1 after processing all the queries.\nNote that:\n\tFlipping the value of a node means that the node with the value 0 becomes 1 and vice versa.\n\tfloor(x) is equivalent to rounding x down to the nearest integer.", "tags": ["Tree", "DFS", "BFS", "Binary Tree"], "input": {"n": 2190, "queries": [1269, 1223, 1018, 960, 336, 371, 1269, 1235, 1420, 1573, 1780, 1933, 187, 803, 917, 1059, 1067, 62, 291, 588, 844, 1709, 486, 1130]}, "output": 138, "input_len": 145, "line": 954}
{"problem": "There is an undirected connected tree with n nodes labeled from 1 to n and n - 1 edges. You are given the integer n. The parent node of a node with a label v is the node with the label floor (v / 2). The root of the tree is the node with the label 1.\n\tFor example, if n = 7, then the node with the label 3 has the node with the label floor(3 / 2) = 1 as its parent, and the node with the label 7 has the node with the label floor(7 / 2) = 3 as its parent.\nYou are also given an integer array queries. Initially, every node has a value 0 on it. For each query queries[i], you should flip all values in the subtree of the node with the label queries[i].\nReturn the total number of nodes with the value 1 after processing all the queries.\nNote that:\n\tFlipping the value of a node means that the node with the value 0 becomes 1 and vice versa.\n\tfloor(x) is equivalent to rounding x down to the nearest integer.", "tags": ["Tree", "DFS", "BFS", "Binary Tree"], "input": {"n": 1150, "queries": [250, 523, 84, 118, 1119, 222, 12, 1109, 535, 154, 598, 257, 612, 159, 456, 1125, 825, 791, 340, 780, 671, 379, 417, 314, 71, 347, 950, 773, 668, 538, 771, 316, 118, 538, 812, 433, 433, 861, 934, 108, 187, 890, 839, 380, 153, 537, 1149, 575, 120, 1084, 36, 648, 1144, 1060, 757, 239, 1116, 913, 814, 519, 913, 1104, 1133, 549, 1101, 463, 82, 471, 920, 418, 116, 148, 273, 843, 1119, 952, 90, 1118, 33, 415, 1015, 14, 248, 420, 97, 709, 796, 216, 2, 270, 693, 105, 898, 931, 545, 833, 365, 67, 609, 307, 1060]}, "output": 664, "input_len": 521, "line": 8643}
{"problem": "There is an undirected connected tree with n nodes labeled from 1 to n and n - 1 edges. You are given the integer n. The parent node of a node with a label v is the node with the label floor (v / 2). The root of the tree is the node with the label 1.\n\tFor example, if n = 7, then the node with the label 3 has the node with the label floor(3 / 2) = 1 as its parent, and the node with the label 7 has the node with the label floor(7 / 2) = 3 as its parent.\nYou are also given an integer array queries. Initially, every node has a value 0 on it. For each query queries[i], you should flip all values in the subtree of the node with the label queries[i].\nReturn the total number of nodes with the value 1 after processing all the queries.\nNote that:\n\tFlipping the value of a node means that the node with the value 0 becomes 1 and vice versa.\n\tfloor(x) is equivalent to rounding x down to the nearest integer.", "tags": ["Tree", "DFS", "BFS", "Binary Tree"], "input": {"n": 62284, "queries": [10878, 9243, 4224, 11749, 4338, 30965, 26927, 21585, 10566, 1697, 10326, 45943, 5680, 55480, 59669, 42888, 8657, 35853, 19702, 44193, 37911, 10786, 20557, 40032, 39311, 14733, 16207, 41371, 59408]}, "output": 193, "input_len": 211, "line": 1317}
{"problem": "There is an undirected connected tree with n nodes labeled from 1 to n and n - 1 edges. You are given the integer n. The parent node of a node with a label v is the node with the label floor (v / 2). The root of the tree is the node with the label 1.\n\tFor example, if n = 7, then the node with the label 3 has the node with the label floor(3 / 2) = 1 as its parent, and the node with the label 7 has the node with the label floor(7 / 2) = 3 as its parent.\nYou are also given an integer array queries. Initially, every node has a value 0 on it. For each query queries[i], you should flip all values in the subtree of the node with the label queries[i].\nReturn the total number of nodes with the value 1 after processing all the queries.\nNote that:\n\tFlipping the value of a node means that the node with the value 0 becomes 1 and vice versa.\n\tfloor(x) is equivalent to rounding x down to the nearest integer.", "tags": ["Tree", "DFS", "BFS", "Binary Tree"], "input": {"n": 25, "queries": [3, 19, 1, 11, 8, 12, 11, 20, 18, 5, 21, 8, 25, 3, 24, 9, 3, 15, 2, 21, 6, 13, 15, 4, 10, 13, 2, 20, 19, 5, 18, 13, 2, 18, 15, 5, 11, 24, 20, 18, 16, 5, 4, 6, 13, 4, 18, 1]}, "output": 12, "input_len": 183, "line": 378}
{"problem": "There is an undirected connected tree with n nodes labeled from 1 to n and n - 1 edges. You are given the integer n. The parent node of a node with a label v is the node with the label floor (v / 2). The root of the tree is the node with the label 1.\n\tFor example, if n = 7, then the node with the label 3 has the node with the label floor(3 / 2) = 1 as its parent, and the node with the label 7 has the node with the label floor(7 / 2) = 3 as its parent.\nYou are also given an integer array queries. Initially, every node has a value 0 on it. For each query queries[i], you should flip all values in the subtree of the node with the label queries[i].\nReturn the total number of nodes with the value 1 after processing all the queries.\nNote that:\n\tFlipping the value of a node means that the node with the value 0 becomes 1 and vice versa.\n\tfloor(x) is equivalent to rounding x down to the nearest integer.", "tags": ["Tree", "DFS", "BFS", "Binary Tree"], "input": {"n": 809, "queries": [533, 113, 457, 800, 697, 58, 632, 23, 496, 25, 366, 29]}, "output": 134, "input_len": 68, "line": 1070}
{"problem": "There is an undirected connected tree with n nodes labeled from 1 to n and n - 1 edges. You are given the integer n. The parent node of a node with a label v is the node with the label floor (v / 2). The root of the tree is the node with the label 1.\n\tFor example, if n = 7, then the node with the label 3 has the node with the label floor(3 / 2) = 1 as its parent, and the node with the label 7 has the node with the label floor(7 / 2) = 3 as its parent.\nYou are also given an integer array queries. Initially, every node has a value 0 on it. For each query queries[i], you should flip all values in the subtree of the node with the label queries[i].\nReturn the total number of nodes with the value 1 after processing all the queries.\nNote that:\n\tFlipping the value of a node means that the node with the value 0 becomes 1 and vice versa.\n\tfloor(x) is equivalent to rounding x down to the nearest integer.", "tags": ["Tree", "DFS", "BFS", "Binary Tree"], "input": {"n": 6861, "queries": [4174, 6628, 5453, 2732, 3639, 6748, 1958, 6653, 1873, 1769, 839, 4929, 4115, 3120, 2051, 2102, 4007, 6563, 5246, 753, 6424, 3540, 5074, 3658, 4272, 2392, 632, 4562, 966, 5182, 1174, 5952, 6012, 1379, 4314, 6032, 6144, 856, 4392, 2994, 4143, 5644, 945, 4866, 1708, 4885, 5762, 1496, 461, 4650, 4984, 6796]}, "output": 176, "input_len": 318, "line": 1330}
{"problem": "There are some robots and factories on the X-axis. You are given an integer array robot where robot[i] is the position of the ith robot. You are also given a 2D integer array factory where factory[j] = [positionj, limitj] indicates that positionj is the position of the jth factory and that the jth factory can repair at most limitj robots.\nThe positions of each robot are unique. The positions of each factory are also unique. Note that a robot can be in the same position as a factory initially.\nAll the robots are initially broken; they keep moving in one direction. The direction could be the negative or the positive direction of the X-axis. When a robot reaches a factory that did not reach its limit, the factory repairs the robot, and it stops moving.\nAt any moment, you can set the initial direction of moving for some robot. Your target is to minimize the total distance traveled by all the robots.\nReturn the minimum total distance traveled by all the robots. The test cases are generated such that all the robots can be repaired.\nNote that\n\tAll robots move at the same speed.\n\tIf two robots move in the same direction, they will never collide.\n\tIf two robots move in opposite directions and they meet at some point, they do not collide. They cross each other.\n\tIf a robot passes by a factory that reached its limits, it crosses it as if it does not exist.\n\tIf the robot moved from a position x to a position y, the distance it moved is |y - x|.", "tags": ["Array", "DP", "Sorting"], "input": {"robot": [-941679919, -785631062, -671464586, -564211111, -537505174, -503603807, -393355600, -385940152, -75301515, 12280378, 123466306, 173617297, 213266114, 264670610, 708805850, 730364409, 940054807], "factory": [[-995477315, 3], [810523100, 2]]}, "output": Infinity, "input_len": 222, "line": 136}
{"problem": "There are some robots and factories on the X-axis. You are given an integer array robot where robot[i] is the position of the ith robot. You are also given a 2D integer array factory where factory[j] = [positionj, limitj] indicates that positionj is the position of the jth factory and that the jth factory can repair at most limitj robots.\nThe positions of each robot are unique. The positions of each factory are also unique. Note that a robot can be in the same position as a factory initially.\nAll the robots are initially broken; they keep moving in one direction. The direction could be the negative or the positive direction of the X-axis. When a robot reaches a factory that did not reach its limit, the factory repairs the robot, and it stops moving.\nAt any moment, you can set the initial direction of moving for some robot. Your target is to minimize the total distance traveled by all the robots.\nReturn the minimum total distance traveled by all the robots. The test cases are generated such that all the robots can be repaired.\nNote that\n\tAll robots move at the same speed.\n\tIf two robots move in the same direction, they will never collide.\n\tIf two robots move in opposite directions and they meet at some point, they do not collide. They cross each other.\n\tIf a robot passes by a factory that reached its limits, it crosses it as if it does not exist.\n\tIf the robot moved from a position x to a position y, the distance it moved is |y - x|.", "tags": ["Array", "DP", "Sorting"], "input": {"robot": [-907144224, -741469473, 295282211], "factory": [[-785602736, 3], [-660559151, 0], [-637097076, 2], [-615790445, 0], [-572937408, 1], [-484109829, 2], [-380216308, 1], [-341739776, 2], [-291477670, 1], [-249681814, 2], [-226514875, 0], [-113750911, 0], [-61684533, 1], [-41463911, 2], [159786752, 2], [191249626, 0], [201860999, 3], [300858929, 3], [437358695, 0], [521373366, 0], [754036545, 2], [758640917, 1], [838944538, 1], [856299451, 2], [856893500, 1], [865917148, 2], [890384135, 0], [924286978, 3], [956301196, 1]]}, "output": 171251469, "input_len": 446, "line": 995}
{"problem": "You are given a 0-indexed array of positive integers nums. Find the number of triplets (i, j, k) that meet the following conditions:\n\t0 <= i < j < k < nums.length\n\tnums[i], nums[j], and nums[k] are pairwise distinct.\n\t\tIn other words, nums[i] != nums[j], nums[i] != nums[k], and nums[j] != nums[k].\nReturn the number of triplets that meet the conditions.", "tags": ["Array", "Hash Table", "Sorting"], "input": {"nums": [737, 916, 323, 667, 546, 318, 38, 5, 843]}, "output": 84, "input_len": 46, "line": 432}
{"problem": "You are given the customer visit log of a shop represented by a 0-indexed string customers consisting only of characters 'N' and 'Y':\n\tif the ith character is 'Y', it means that customers come at the ith hour\n\twhereas 'N' indicates that no customers come at the ith hour.\nIf the shop closes at the jth hour (0 <= j <= n), the penalty is calculated as follows:\n\tFor every hour when the shop is open and no customers come, the penalty increases by 1.\n\tFor every hour when the shop is closed and customers come, the penalty increases by 1.\nReturn the earliest hour at which the shop must be closed to incur a minimum penalty.\nNote that if a shop closes at the jth hour, it means the shop is closed at the hour j.", "tags": ["String", "Prefix Sum"], "input": {"customers": "YYNYYNNNYNYNYNNYNNYYYNYYYYNYNYYNYNNNNYNNNNYYYYYYNYNNYNYNNNYYNNYNNNYYYNYYYYYYYNNNN"}, "output": 77, "input_len": 47, "line": 424}
{"problem": "Given a string of digits s, return the number of palindromic subsequences of s having length 5. Since the answer may be very large, return it modulo 10^9 + 7.\nNote:\n\tA string is palindromic if it reads the same forward and backward.\n\tA subsequence is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters.", "tags": ["String", "DP"], "input": {"s": "49194"}, "output": 1, "input_len": 11, "line": 4239}
{"problem": "Given a string of digits s, return the number of palindromic subsequences of s having length 5. Since the answer may be very large, return it modulo 10^9 + 7.\nNote:\n\tA string is palindromic if it reads the same forward and backward.\n\tA subsequence is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters.", "tags": ["String", "DP"], "input": {"s": "91441412"}, "output": 3, "input_len": 14, "line": 6744}
{"problem": "You are given an array of positive integers price where price[i] denotes the price of the ith candy and a positive integer k.\nThe store sells baskets of k distinct candies. The tastiness of a candy basket is the smallest absolute difference of the prices of any two candies in the basket.\nReturn the maximum tastiness of a candy basket.", "tags": ["Greedy", "Array", "Binary Search", "Sorting"], "input": {"price": [77047534, 654826692], "k": 2}, "output": 577779158, "input_len": 31, "line": 457}
{"problem": "You are given a 0-indexed integer array stations of length n, where stations[i] represents the number of power stations in the ith city.\nEach power station can provide power to every city in a fixed range. In other words, if the range is denoted by r, then a power station at city i can provide power to all cities j such that |i - j| <= r and 0 <= i, j <= n - 1.\n\tNote that |x| denotes absolute value. For example, |7 - 5| = 2 and |3 - 10| = 7.\nThe power of a city is the total number of power stations it is being provided power from.\nThe government has sanctioned building k more power stations, each of which can be built in any city, and have the same range as the pre-existing ones.\nGiven the two integers r and k, return the maximum possible minimum power of a city, if the additional power stations are built optimally.\nNote that you can build the k power stations in multiple cities.", "tags": ["Greedy", "Queue", "Array", "Binary Search", "Prefix Sum", "Sliding Window"], "input": {"stations": [33355, 43965, 38291, 62726, 60393, 98444, 83650, 32632, 41187, 41471, 4396], "r": 1, "k": 1089}, "output": 46956, "input_len": 95, "line": 1263}
{"problem": "There are k workers who want to move n boxes from the right (old) warehouse to the left (new) warehouse. You are given the two integers n and k, and a 2D integer array time of size k x 4 where time[i] = [righti, picki, lefti, puti].\nThe warehouses are separated by a river and connected by a bridge. Initially, all k workers are waiting on the left side of the bridge. To move the boxes, the ith worker can do the following:\n\tCross the bridge to the right side in righti minutes.\n\tPick a box from the right warehouse in picki minutes.\n\tCross the bridge to the left side in lefti minutes.\n\tPut the box into the left warehouse in puti minutes.\nThe ith worker is less efficient than the jth worker if either condition is met:\n\tlefti + righti > leftj + rightj\n\tlefti + righti == leftj + rightj and i > j\nThe following rules regulate the movement of the workers through the bridge:\n\tOnly one worker can use the bridge at a time.\n\tWhen the bridge is unused prioritize the least efficient worker (who have picked up the box) on the right side to cross. If not,\u00a0prioritize the least efficient worker on the left side to cross.\n\tIf enough workers have already been dispatched from the left side to pick up all the remaining boxes, no more workers will be sent from the left side.\nReturn the elapsed minutes at which the last box reaches the left side of the bridge.", "tags": ["Array", "Simulation", "Heap"], "input": {"n": 87, "k": 2, "time": [[370, 853, 559, 297], [543, 326, 717, 447]]}, "output": 101561, "input_len": 58, "line": 4140}
{"problem": "You are given four integers minLength, maxLength, oneGroup and zeroGroup.\nA binary string is good if it satisfies the following conditions:\n\tThe length of the string is in the range [minLength, maxLength].\n\tThe size of each block of consecutive 1's is a multiple of oneGroup.\n\t\tFor example in a binary string 00110111100 sizes of each block of consecutive ones are [2,4].\n\tThe size of each block of consecutive 0's is a multiple of zeroGroup.\n\t\tFor example, in a binary string 00110111100 sizes of each block of consecutive zeros are [2,1,2].\nReturn the number of good binary strings. Since the answer may be too large, return it modulo 10^9 + 7.\nNote that 0 is considered a multiple of all the numbers.", "tags": ["DP"], "input": {"minLength": 159, "maxLength": 864, "oneGroup": 678, "zeroGroup": 228}, "output": 4, "input_len": 36, "line": 4286}
{"problem": "You are given four integers minLength, maxLength, oneGroup and zeroGroup.\nA binary string is good if it satisfies the following conditions:\n\tThe length of the string is in the range [minLength, maxLength].\n\tThe size of each block of consecutive 1's is a multiple of oneGroup.\n\t\tFor example in a binary string 00110111100 sizes of each block of consecutive ones are [2,4].\n\tThe size of each block of consecutive 0's is a multiple of zeroGroup.\n\t\tFor example, in a binary string 00110111100 sizes of each block of consecutive zeros are [2,1,2].\nReturn the number of good binary strings. Since the answer may be too large, return it modulo 10^9 + 7.\nNote that 0 is considered a multiple of all the numbers.", "tags": ["DP"], "input": {"minLength": 1, "maxLength": 452, "oneGroup": 3, "zeroGroup": 20}, "output": 910749624, "input_len": 31, "line": 2697}
{"problem": "You are given a positive integer n, indicating that we initially have an n x n\u00a00-indexed integer matrix mat filled with zeroes.\nYou are also given a 2D integer array query. For each query[i] = [row1i, col1i, row2i, col2i], you should do the following operation:\n\tAdd 1 to every element in the submatrix with the top left corner (row1i, col1i) and the bottom right corner (row2i, col2i). That is, add 1 to mat[x][y] for all row1i <= x <= row2i and col1i <= y <= col2i.\nReturn the matrix mat after performing every query.", "tags": ["Array", "Matrix", "Prefix Sum"], "input": {"n": 6, "queries": [[4, 5, 5, 5], [4, 0, 4, 5]]}, "output": [[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 2], [0, 0, 0, 0, 0, 1]], "input_len": 35, "line": 265}
{"problem": "You are given an integer array nums and an integer k.\nSplit the array into some number of non-empty subarrays. The cost of a split is the sum of the importance value of each subarray in the split.\nLet trimmed(subarray) be the version of the subarray where all numbers which appear only once are removed.\n\tFor example, trimmed([3,1,2,4,3,4]) = [3,4,3,4].\nThe importance value of a subarray is k + trimmed(subarray).length.\n\tFor example, if a subarray is [1,2,3,3,3,4,4], then trimmed([1,2,3,3,3,4,4]) = [3,3,3,4,4].The importance value of this subarray will be k + 5.\nReturn the minimum possible cost of a split of nums.\nA subarray is a contiguous non-empty sequence of elements within an array.", "tags": ["Array", "Hash Table", "DP", "Counting"], "input": {"nums": [9, 4, 1, 8, 5, 9, 2, 3, 0, 3], "k": 971934469}, "output": 971934473, "input_len": 48, "line": 473}
{"problem": "You are given an integer array nums and an integer k.\nSplit the array into some number of non-empty subarrays. The cost of a split is the sum of the importance value of each subarray in the split.\nLet trimmed(subarray) be the version of the subarray where all numbers which appear only once are removed.\n\tFor example, trimmed([3,1,2,4,3,4]) = [3,4,3,4].\nThe importance value of a subarray is k + trimmed(subarray).length.\n\tFor example, if a subarray is [1,2,3,3,3,4,4], then trimmed([1,2,3,3,3,4,4]) = [3,3,3,4,4].The importance value of this subarray will be k + 5.\nReturn the minimum possible cost of a split of nums.\nA subarray is a contiguous non-empty sequence of elements within an array.", "tags": ["Array", "Hash Table", "DP", "Counting"], "input": {"nums": [30, 31, 15, 18, 14, 37, 12, 23, 9, 27, 41, 36, 32, 35, 8, 14, 23, 5, 30, 24, 32, 11, 7, 6, 25, 19, 11, 26, 18, 7, 11, 27, 25, 3, 25, 18, 34, 14, 34, 40, 0, 15], "k": 284327809}, "output": 284327835, "input_len": 178, "line": 5825}
{"problem": "You are given an integer array banned and two integers n and maxSum. You are choosing some number of integers following the below rules:\n\tThe chosen integers have to be in the range [1, n].\n\tEach integer can be chosen at most once.\n\tThe chosen integers should not be in the array banned.\n\tThe sum of the chosen integers should not exceed maxSum.\nReturn the maximum number of integers you can choose following the mentioned rules.", "tags": ["Greedy", "Array", "Binary Search", "Sorting"], "input": {"banned": [608217094, 628291840, 48141746], "n": 755181111, "maxSum": 365682810864233}, "output": 27043771, "input_len": 72, "line": 451}
{"problem": "There is a test that has n types of questions. You are given an integer target and a 0-indexed 2D integer array types where types[i] = [counti, marksi] indicates that there are counti questions of the ith type, and each one of them is worth marksi points.\nReturn the number of ways you can earn exactly target points in the exam. Since the answer may be too large, return it modulo 10^9 + 7.\nNote that questions of the same type are indistinguishable.\n\tFor example, if there are 3 questions of the same type, then solving the 1st and 2nd questions is the same as solving the 1st and 3rd questions, or the 2nd and 3rd questions.", "tags": ["Array", "DP"], "input": {"target": 23, "types": [[24, 3], [3, 10], [14, 2], [29, 3], [26, 1], [5, 31], [3, 2], [7, 16], [3, 1], [31, 9], [1, 13], [5, 3], [2, 17]]}, "output": 6400, "input_len": 100, "line": 9808}
{"problem": "There is a test that has n types of questions. You are given an integer target and a 0-indexed 2D integer array types where types[i] = [counti, marksi] indicates that there are counti questions of the ith type, and each one of them is worth marksi points.\nReturn the number of ways you can earn exactly target points in the exam. Since the answer may be too large, return it modulo 10^9 + 7.\nNote that questions of the same type are indistinguishable.\n\tFor example, if there are 3 questions of the same type, then solving the 1st and 2nd questions is the same as solving the 1st and 3rd questions, or the 2nd and 3rd questions.", "tags": ["Array", "DP"], "input": {"target": 25, "types": [[4, 1], [3, 6], [9, 9], [26, 9], [9, 5]]}, "output": 16, "input_len": 43, "line": 3573}
{"problem": "There are n hens and m grains on a line. You are given the initial positions of the hens and the grains in two integer arrays hens and grains of size n and m respectively.\nAny hen can eat a grain if they are on the same position. The time taken for this is negligible. One hen can also eat multiple grains.\nIn 1 second, a hen can move right or left by 1 unit. The hens can move simultaneously and independently of each other.\nReturn the minimum time to eat all grains if the hens act optimally.", "tags": ["Array", "Two Pointers", "Binary Search", "Sorting"], "input": {"hens": [606394539, 737272106, 312005085, 276032888, 640743524, 193776956, 318877772, 307819419, 776869342, 136565817], "grains": [778173421, 128964119, 396192472, 907078248, 647717447, 333608756, 64807898, 482022809, 83214950, 633943634, 949476248, 429521970, 940161900, 221478894, 957608967, 394899934, 132038573, 188842405, 78096249, 384815803, 718302715, 134234577, 896597991, 150822075, 80816270, 988780160, 267608186, 393037092, 21563205, 261844229, 471053905, 704049831, 325573527, 314557140, 672549222, 428293235, 753609348, 970446317, 527652384, 263129790, 792043310, 113205001, 118251632, 958756743, 404033035, 578985444, 936358628, 675135612, 515196001, 702092740, 847976707, 866455974, 260980136, 478401944, 42687177, 645145973, 799893757, 510022152, 80125103, 986934127, 213313276, 897819394, 889963620, 652409143, 92142296, 368196118, 752527386, 485268560, 904073088, 852631207, 636665406, 225157791, 341091885, 837123399, 585212859, 722012236, 362381638, 386158112, 185225496, 353958895, 76200396, 308739234, 228889061, 518856394, 582992782, 706474618, 666335188, 711213240, 990512109, 740187591, 65222410, 294881441, 137705330, 819675745, 731242567, 990586701, 772221163, 158900391, 197602482, 778124975, 154031723, 534371170, 766995014, 881259580, 717638998, 461189566, 852850228, 14239135, 978949122]}, "output": 213717359, "input_len": 1307, "line": 8204}
{"problem": "You are given a string s, a string chars of distinct characters and an integer array vals of the same length as chars.\nThe cost of the substring is the sum of the values of each character in the substring. The cost of an empty string is considered 0.\nThe value of the character is defined in the following way:\n\tIf the character is not in the string chars, then its value is its corresponding position (1-indexed) in the alphabet.\n    \tFor example, the value of 'a' is 1, the value of 'b' is 2, and so on. The value of 'z' is 26.\n    Otherwise, assuming i is the index where the character occurs in the string chars, then its value is vals[i].\nReturn the maximum cost among all substrings of the string s.", "tags": ["Array", "Hash Table", "String", "DP"], "input": {"s": "swlfbaokattrddkvfvzbcuozjpfwhwhrxskqilsbeurviafpyeexiotdzqdumaywypcjhknjvzbfxvmtaeyhdempupgziczeetfbmifsaiwkhbvmaicbnrltwdvmwrlcqwlyndfumbxpcnvauirkdaswgrthjgtwggqqlnwguqsxkhbevsiphdfsvowxnebassaneekbgitigveyenppqxfhdpcvjhwjvcazncvqdlddpdgucnupjuzncjrjaxqvnwthlavrqzwyigjbdezdcilhywxspfpymcaduepxmtsmgcpiaseoezsqgcwfavqlwqyvsbuqcvzxpzbgyaxyntaraijrmbahyrvmyiznucsusgpyhgsbvdswgqgqnkycqmbrtrjhleknfjwdqafwxvtstzchnnjjhoxlonfkfrryjhauimyenwxmnlhmdogfzozpcnviyssrvgxvgmshspueibrtbukaadvbtzqabgvbjexrbbpffwheejtwtwqfcqufiipkafvmlgpjzqkuqotnsxtdgygyiiminvjkbovyymrdapwtqqkmrhxrsbbyzrqslxgxzqjluiwtabmcwnnnucgrmzgkprhptqhwcarfwiidinnxkddpvrtjtixwhxkirvalmloqtsnavbusekyhwnsprqiuklaoujqvtrzhjkcevcxeqqiyqljnkjaspomuibqwudijohpieckgiymxgggpuokggbvkyoqwsdkkemjbkjfahxbeefjrotzfmxqckrdlgynyyebfukliuzkgpjytpbzyeewpeaztuxvyaihuhdqrqfiahjxwyibvnysfkfuofxnseelsxtcqfsrasrnwkwglxrwchppnablnphqtmpporbtcmhgwtysbotzgihosphfesdntcgftconuydeoaokjzdhhajudyqsrgmyadxkxdwazorvabygqyzptttoilvugxsiphzfvvsuxmacbzrppahdszchrsxllyyzrrhvymgvveuzmmslvhheytadkkfsdvxkjyaixbzqytkdnurrzmdbzviczqbxdsoeqqhfsgouargpfaczuefoaofyunzqwkxvnlctuujqvawxtqrirxvqflsvawvyklqkuozmwqxfgpmmhfesugyobswaonhcpdeizgtwbtpugafehwvmflfewsnjbgrayksdhdasvezpxibxypsehfvwluzkhiqjptuxqrkqzgmrqoqbsusssigwskwretwiqogvhbotlveksfwjteeuswfozflgtclgjmglyxugaxknapsaeagjnjyhdacxcafrzlqcbokzwsydgulqztuqxpnqaenqhdrkseeciyuabfseloazowntoegvxeyhovyocxmnircccssxowulcrbnlmmskreazpkxfjjicgxrszgxxpgclhvobquciwvamfdnjbrvvac", "chars": "pmwvzryxhfdqgokctasulinb", "vals": [212, -947, -228, -825, 496, -233, 216, -969, -119, -724, -410, 357, -875, -518, -287, -836, 261, -909, -126, -226, 637, -175, 110, -300]}, "output": 2202, "input_len": 943, "line": 7321}
{"problem": "There is a bi-directional graph with n vertices, where each vertex is labeled from 0 to n - 1. The edges in the graph are represented by a given 2D integer array edges, where edges[i] = [ui, vi] denotes an edge between vertex ui and vertex vi. Every vertex pair is connected by at most one edge, and no vertex has an edge to itself.\nReturn the length of the shortest cycle in the graph. If no cycle exists, return -1.\nA cycle is a path that starts and ends at the same node, and each edge in the path is used only once.", "tags": ["BFS", "Graph"], "input": {"n": 3, "edges": [[1, 0], [0, 2], [1, 2]]}, "output": 3, "input_len": 29, "line": 110}
{"problem": "There is a bi-directional graph with n vertices, where each vertex is labeled from 0 to n - 1. The edges in the graph are represented by a given 2D integer array edges, where edges[i] = [ui, vi] denotes an edge between vertex ui and vertex vi. Every vertex pair is connected by at most one edge, and no vertex has an edge to itself.\nReturn the length of the shortest cycle in the graph. If no cycle exists, return -1.\nA cycle is a path that starts and ends at the same node, and each edge in the path is used only once.", "tags": ["BFS", "Graph"], "input": {"n": 5, "edges": [[1, 2], [4, 0], [4, 3], [3, 1], [0, 3], [4, 2], [1, 4], [0, 2], [1, 0], [3, 2]]}, "output": 3, "input_len": 71, "line": 728}
{"problem": "There is a bi-directional graph with n vertices, where each vertex is labeled from 0 to n - 1. The edges in the graph are represented by a given 2D integer array edges, where edges[i] = [ui, vi] denotes an edge between vertex ui and vertex vi. Every vertex pair is connected by at most one edge, and no vertex has an edge to itself.\nReturn the length of the shortest cycle in the graph. If no cycle exists, return -1.\nA cycle is a path that starts and ends at the same node, and each edge in the path is used only once.", "tags": ["BFS", "Graph"], "input": {"n": 3, "edges": [[0, 1], [2, 0], [2, 1]]}, "output": 3, "input_len": 29, "line": 110}
{"problem": "There is a bi-directional graph with n vertices, where each vertex is labeled from 0 to n - 1. The edges in the graph are represented by a given 2D integer array edges, where edges[i] = [ui, vi] denotes an edge between vertex ui and vertex vi. Every vertex pair is connected by at most one edge, and no vertex has an edge to itself.\nReturn the length of the shortest cycle in the graph. If no cycle exists, return -1.\nA cycle is a path that starts and ends at the same node, and each edge in the path is used only once.", "tags": ["BFS", "Graph"], "input": {"n": 3, "edges": [[0, 1], [1, 2], [2, 0]]}, "output": 3, "input_len": 29, "line": 110}
{"problem": "There is a bi-directional graph with n vertices, where each vertex is labeled from 0 to n - 1. The edges in the graph are represented by a given 2D integer array edges, where edges[i] = [ui, vi] denotes an edge between vertex ui and vertex vi. Every vertex pair is connected by at most one edge, and no vertex has an edge to itself.\nReturn the length of the shortest cycle in the graph. If no cycle exists, return -1.\nA cycle is a path that starts and ends at the same node, and each edge in the path is used only once.", "tags": ["BFS", "Graph"], "input": {"n": 20, "edges": [[12, 4], [4, 3], [5, 1], [5, 7], [3, 19], [19, 9], [19, 18], [16, 10], [18, 7], [6, 5], [7, 19], [12, 6], [4, 17], [9, 7], [18, 0], [15, 10], [1, 17], [16, 15], [12, 2], [11, 3], [0, 3], [17, 19], [1, 4], [15, 0]]}, "output": 3, "input_len": 178, "line": 4187}
{"problem": "There is a bi-directional graph with n vertices, where each vertex is labeled from 0 to n - 1. The edges in the graph are represented by a given 2D integer array edges, where edges[i] = [ui, vi] denotes an edge between vertex ui and vertex vi. Every vertex pair is connected by at most one edge, and no vertex has an edge to itself.\nReturn the length of the shortest cycle in the graph. If no cycle exists, return -1.\nA cycle is a path that starts and ends at the same node, and each edge in the path is used only once.", "tags": ["BFS", "Graph"], "input": {"n": 6, "edges": [[0, 4], [2, 1], [4, 3], [3, 1], [1, 5], [5, 4], [2, 0], [4, 2], [3, 0], [5, 0], [1, 0], [3, 2], [4, 1], [3, 5], [5, 2]]}, "output": 3, "input_len": 101, "line": 1463}
{"problem": "There is a bi-directional graph with n vertices, where each vertex is labeled from 0 to n - 1. The edges in the graph are represented by a given 2D integer array edges, where edges[i] = [ui, vi] denotes an edge between vertex ui and vertex vi. Every vertex pair is connected by at most one edge, and no vertex has an edge to itself.\nReturn the length of the shortest cycle in the graph. If no cycle exists, return -1.\nA cycle is a path that starts and ends at the same node, and each edge in the path is used only once.", "tags": ["BFS", "Graph"], "input": {"n": 3, "edges": [[1, 0], [0, 2], [2, 1]]}, "output": 3, "input_len": 29, "line": 110}
{"problem": "There is a bi-directional graph with n vertices, where each vertex is labeled from 0 to n - 1. The edges in the graph are represented by a given 2D integer array edges, where edges[i] = [ui, vi] denotes an edge between vertex ui and vertex vi. Every vertex pair is connected by at most one edge, and no vertex has an edge to itself.\nReturn the length of the shortest cycle in the graph. If no cycle exists, return -1.\nA cycle is a path that starts and ends at the same node, and each edge in the path is used only once.", "tags": ["BFS", "Graph"], "input": {"n": 10, "edges": [[4, 9], [9, 5], [8, 3], [8, 9], [0, 5], [8, 6], [1, 0], [1, 3], [2, 8], [4, 2], [6, 1], [7, 0], [3, 2], [4, 1], [8, 1], [8, 7], [5, 8], [2, 0], [0, 6]]}, "output": 3, "input_len": 126, "line": 2535}
{"problem": "There is a bi-directional graph with n vertices, where each vertex is labeled from 0 to n - 1. The edges in the graph are represented by a given 2D integer array edges, where edges[i] = [ui, vi] denotes an edge between vertex ui and vertex vi. Every vertex pair is connected by at most one edge, and no vertex has an edge to itself.\nReturn the length of the shortest cycle in the graph. If no cycle exists, return -1.\nA cycle is a path that starts and ends at the same node, and each edge in the path is used only once.", "tags": ["BFS", "Graph"], "input": {"n": 3, "edges": [[0, 1], [0, 2], [1, 2]]}, "output": 3, "input_len": 29, "line": 110}
{"problem": "There is a bi-directional graph with n vertices, where each vertex is labeled from 0 to n - 1. The edges in the graph are represented by a given 2D integer array edges, where edges[i] = [ui, vi] denotes an edge between vertex ui and vertex vi. Every vertex pair is connected by at most one edge, and no vertex has an edge to itself.\nReturn the length of the shortest cycle in the graph. If no cycle exists, return -1.\nA cycle is a path that starts and ends at the same node, and each edge in the path is used only once.", "tags": ["BFS", "Graph"], "input": {"n": 47, "edges": [[20, 5], [25, 35], [34, 1], [32, 43], [23, 13], [3, 16], [34, 22], [1, 3], [4, 36], [17, 36], [36, 43], [29, 10], [21, 6], [10, 36], [32, 36], [46, 41], [45, 15], [26, 41], [18, 43], [14, 24], [20, 40], [24, 4], [9, 13], [34, 33], [14, 42], [11, 28], [20, 9], [18, 15], [11, 43], [2, 40], [7, 24], [33, 43], [0, 46], [39, 28], [4, 13], [3, 26], [23, 32], [34, 32], [25, 14], [8, 28], [8, 40]]}, "output": 3, "input_len": 323, "line": 9602}
{"problem": "You are given a 0-indexed integer array nums and an integer p. Find p pairs of indices of nums such that the maximum difference amongst all the pairs is minimized. Also, ensure no index appears more than once amongst the p pairs.\nNote that for a pair of elements at the index i and j, the difference of this pair is |nums[i] - nums[j]|, where |x| represents the absolute value of x.\nReturn the minimum maximum difference among all p pairs. We define the maximum of an empty set to be zero.", "tags": ["Greedy", "Array", "Binary Search"], "input": {"nums": [443685534, 439676683, 55504492, 799602420, 441603134, 91107515, 697227094, 737333973, 816035442, 782740659, 181713434, 277751254, 638093376, 719842718, 741630387, 274277340, 554284935, 721372799, 772062690, 744199260], "p": 7}, "output": 22615624, "input_len": 228, "line": 1437}
{"problem": "You are given an integer n. Consider an equilateral triangle of side length n, broken up into n^2 unit equilateral triangles. The triangle has n 1-indexed rows where the ith row has 2i - 1 unit equilateral triangles.\nThe triangles in the ith row are also 1-indexed with coordinates from (i, 1) to (i, 2i - 1). The following image shows a triangle of side length 4 with the indexing of its triangle.\nTwo triangles are neighbors if they share a side. For example:\n\tTriangles (1,1) and (2,2) are neighbors\n\tTriangles (3,2) and (3,3) are neighbors.\n\tTriangles (2,2) and (3,3) are not neighbors because they do not share any side.\nInitially, all the unit triangles are white. You want to choose k triangles and color them red. We will then run the following algorithm:\n\tChoose a white triangle that has at least two red neighbors.\n    \tIf there is no such triangle, stop the algorithm.\n    Color that triangle red.\n    Go to step 1.\nChoose the minimum k possible and set k triangles red before running this algorithm such that after the algorithm stops, all unit triangles are colored red.\nReturn a 2D list of the coordinates of the triangles that you will color red initially. The answer has to be of the smallest size possible. If there are multiple valid solutions, return any.", "tags": ["Array", "Math"], "input": {"n": 102}, "output": [[1, 1], [102, 1], [102, 3], [102, 5], [102, 7], [102, 9], [102, 11], [102, 13], [102, 15], [102, 17], [102, 19], [102, 21], [102, 23], [102, 25], [102, 27], [102, 29], [102, 31], [102, 33], [102, 35], [102, 37], [102, 39], [102, 41], [102, 43], [102, 45], [102, 47], [102, 49], [102, 51], [102, 53], [102, 55], [102, 57], [102, 59], [102, 61], [102, 63], [102, 65], [102, 67], [102, 69], [102, 71], [102, 73], [102, 75], [102, 77], [102, 79], [102, 81], [102, 83], [102, 85], [102, 87], [102, 89], [102, 91], [102, 93], [102, 95], [102, 97], [102, 99], [102, 101], [102, 103], [102, 105], [102, 107], [102, 109], [102, 111], [102, 113], [102, 115], [102, 117], [102, 119], [102, 121], [102, 123], [102, 125], [102, 127], [102, 129], [102, 131], [102, 133], [102, 135], [102, 137], [102, 139], [102, 141], [102, 143], [102, 145], [102, 147], [102, 149], [102, 151], [102, 153], [102, 155], [102, 157], [102, 159], [102, 161], [102, 163], [102, 165], [102, 167], [102, 169], [102, 171], [102, 173], [102, 175], [102, 177], [102, 179], [102, 181], [102, 183], [102, 185], [102, 187], [102, 189], [102, 191], [102, 193], [102, 195], [102, 197], [102, 199], [102, 201], [102, 203], [101, 2], [100, 3], [100, 5], [100, 7], [100, 9], [100, 11], [100, 13], [100, 15], [100, 17], [100, 19], [100, 21], [100, 23], [100, 25], [100, 27], [100, 29], [100, 31], [100, 33], [100, 35], [100, 37], [100, 39], [100, 41], [100, 43], [100, 45], [100, 47], [100, 49], [100, 51], [100, 53], [100, 55], [100, 57], [100, 59], [100, 61], [100, 63], [100, 65], [100, 67], [100, 69], [100, 71], [100, 73], [100, 75], [100, 77], [100, 79], [100, 81], [100, 83], [100, 85], [100, 87], [100, 89], [100, 91], [100, 93], [100, 95], [100, 97], [100, 99], [100, 101], [100, 103], [100, 105], [100, 107], [100, 109], [100, 111], [100, 113], [100, 115], [100, 117], [100, 119], [100, 121], [100, 123], [100, 125], [100, 127], [100, 129], [100, 131], [100, 133], [100, 135], [100, 137], [100, 139], [100, 141], [100, 143], [100, 145], [100, 147], [100, 149], [100, 151], [100, 153], [100, 155], [100, 157], [100, 159], [100, 161], [100, 163], [100, 165], [100, 167], [100, 169], [100, 171], [100, 173], [100, 175], [100, 177], [100, 179], [100, 181], [100, 183], [100, 185], [100, 187], [100, 189], [100, 191], [100, 193], [100, 195], [100, 197], [100, 199], [99, 1], [98, 1], [98, 3], [98, 5], [98, 7], [98, 9], [98, 11], [98, 13], [98, 15], [98, 17], [98, 19], [98, 21], [98, 23], [98, 25], [98, 27], [98, 29], [98, 31], [98, 33], [98, 35], [98, 37], [98, 39], [98, 41], [98, 43], [98, 45], [98, 47], [98, 49], [98, 51], [98, 53], [98, 55], [98, 57], [98, 59], [98, 61], [98, 63], [98, 65], [98, 67], [98, 69], [98, 71], [98, 73], [98, 75], [98, 77], [98, 79], [98, 81], [98, 83], [98, 85], [98, 87], [98, 89], [98, 91], [98, 93], [98, 95], [98, 97], [98, 99], [98, 101], [98, 103], [98, 105], [98, 107], [98, 109], [98, 111], [98, 113], [98, 115], [98, 117], [98, 119], [98, 121], [98, 123], [98, 125], [98, 127], [98, 129], [98, 131], [98, 133], [98, 135], [98, 137], [98, 139], [98, 141], [98, 143], [98, 145], [98, 147], [98, 149], [98, 151], [98, 153], [98, 155], [98, 157], [98, 159], [98, 161], [98, 163], [98, 165], [98, 167], [98, 169], [98, 171], [98, 173], [98, 175], [98, 177], [98, 179], [98, 181], [98, 183], [98, 185], [98, 187], [98, 189], [98, 191], [98, 193], [98, 195], [97, 2], [96, 3], [96, 5], [96, 7], [96, 9], [96, 11], [96, 13], [96, 15], [96, 17], [96, 19], [96, 21], [96, 23], [96, 25], [96, 27], [96, 29], [96, 31], [96, 33], [96, 35], [96, 37], [96, 39], [96, 41], [96, 43], [96, 45], [96, 47], [96, 49], [96, 51], [96, 53], [96, 55], [96, 57], [96, 59], [96, 61], [96, 63], [96, 65], [96, 67], [96, 69], [96, 71], [96, 73], [96, 75], [96, 77], [96, 79], [96, 81], [96, 83], [96, 85], [96, 87], [96, 89], [96, 91], [96, 93], [96, 95], [96, 97], [96, 99], [96, 101], [96, 103], [96, 105], [96, 107], [96, 109], [96, 111], [96, 113], [96, 115], [96, 117], [96, 119], [96, 121], [96, 123], [96, 125], [96, 127], [96, 129], [96, 131], [96, 133], [96, 135], [96, 137], [96, 139], [96, 141], [96, 143], [96, 145], [96, 147], [96, 149], [96, 151], [96, 153], [96, 155], [96, 157], [96, 159], [96, 161], [96, 163], [96, 165], [96, 167], [96, 169], [96, 171], [96, 173], [96, 175], [96, 177], [96, 179], [96, 181], [96, 183], [96, 185], [96, 187], [96, 189], [96, 191], [95, 1], [94, 1], [94, 3], [94, 5], [94, 7], [94, 9], [94, 11], [94, 13], [94, 15], [94, 17], [94, 19], [94, 21], [94, 23], [94, 25], [94, 27], [94, 29], [94, 31], [94, 33], [94, 35], [94, 37], [94, 39], [94, 41], [94, 43], [94, 45], [94, 47], [94, 49], [94, 51], [94, 53], [94, 55], [94, 57], [94, 59], [94, 61], [94, 63], [94, 65], [94, 67], [94, 69], [94, 71], [94, 73], [94, 75], [94, 77], [94, 79], [94, 81], [94, 83], [94, 85], [94, 87], [94, 89], [94, 91], [94, 93], [94, 95], [94, 97], [94, 99], [94, 101], [94, 103], [94, 105], [94, 107], [94, 109], [94, 111], [94, 113], [94, 115], [94, 117], [94, 119], [94, 121], [94, 123], [94, 125], [94, 127], [94, 129], [94, 131], [94, 133], [94, 135], [94, 137], [94, 139], [94, 141], [94, 143], [94, 145], [94, 147], [94, 149], [94, 151], [94, 153], [94, 155], [94, 157], [94, 159], [94, 161], [94, 163], [94, 165], [94, 167], [94, 169], [94, 171], [94, 173], [94, 175], [94, 177], [94, 179], [94, 181], [94, 183], [94, 185], [94, 187], [93, 2], [92, 3], [92, 5], [92, 7], [92, 9], [92, 11], [92, 13], [92, 15], [92, 17], [92, 19], [92, 21], [92, 23], [92, 25], [92, 27], [92, 29], [92, 31], [92, 33], [92, 35], [92, 37], [92, 39], [92, 41], [92, 43], [92, 45], [92, 47], [92, 49], [92, 51], [92, 53], [92, 55], [92, 57], [92, 59], [92, 61], [92, 63], [92, 65], [92, 67], [92, 69], [92, 71], [92, 73], [92, 75], [92, 77], [92, 79], [92, 81], [92, 83], [92, 85], [92, 87], [92, 89], [92, 91], [92, 93], [92, 95], [92, 97], [92, 99], [92, 101], [92, 103], [92, 105], [92, 107], [92, 109], [92, 111], [92, 113], [92, 115], [92, 117], [92, 119], [92, 121], [92, 123], [92, 125], [92, 127], [92, 129], [92, 131], [92, 133], [92, 135], [92, 137], [92, 139], [92, 141], [92, 143], [92, 145], [92, 147], [92, 149], [92, 151], [92, 153], [92, 155], [92, 157], [92, 159], [92, 161], [92, 163], [92, 165], [92, 167], [92, 169], [92, 171], [92, 173], [92, 175], [92, 177], [92, 179], [92, 181], [92, 183], [91, 1], [90, 1], [90, 3], [90, 5], [90, 7], [90, 9], [90, 11], [90, 13], [90, 15], [90, 17], [90, 19], [90, 21], [90, 23], [90, 25], [90, 27], [90, 29], [90, 31], [90, 33], [90, 35], [90, 37], [90, 39], [90, 41], [90, 43], [90, 45], [90, 47], [90, 49], [90, 51], [90, 53], [90, 55], [90, 57], [90, 59], [90, 61], [90, 63], [90, 65], [90, 67], [90, 69], [90, 71], [90, 73], [90, 75], [90, 77], [90, 79], [90, 81], [90, 83], [90, 85], [90, 87], [90, 89], [90, 91], [90, 93], [90, 95], [90, 97], [90, 99], [90, 101], [90, 103], [90, 105], [90, 107], [90, 109], [90, 111], [90, 113], [90, 115], [90, 117], [90, 119], [90, 121], [90, 123], [90, 125], [90, 127], [90, 129], [90, 131], [90, 133], [90, 135], [90, 137], [90, 139], [90, 141], [90, 143], [90, 145], [90, 147], [90, 149], [90, 151], [90, 153], [90, 155], [90, 157], [90, 159], [90, 161], [90, 163], [90, 165], [90, 167], [90, 169], [90, 171], [90, 173], [90, 175], [90, 177], [90, 179], [89, 2], [88, 3], [88, 5], [88, 7], [88, 9], [88, 11], [88, 13], [88, 15], [88, 17], [88, 19], [88, 21], [88, 23], [88, 25], [88, 27], [88, 29], [88, 31], [88, 33], [88, 35], [88, 37], [88, 39], [88, 41], [88, 43], [88, 45], [88, 47], [88, 49], [88, 51], [88, 53], [88, 55], [88, 57], [88, 59], [88, 61], [88, 63], [88, 65], [88, 67], [88, 69], [88, 71], [88, 73], [88, 75], [88, 77], [88, 79], [88, 81], [88, 83], [88, 85], [88, 87], [88, 89], [88, 91], [88, 93], [88, 95], [88, 97], [88, 99], [88, 101], [88, 103], [88, 105], [88, 107], [88, 109], [88, 111], [88, 113], [88, 115], [88, 117], [88, 119], [88, 121], [88, 123], [88, 125], [88, 127], [88, 129], [88, 131], [88, 133], [88, 135], [88, 137], [88, 139], [88, 141], [88, 143], [88, 145], [88, 147], [88, 149], [88, 151], [88, 153], [88, 155], [88, 157], [88, 159], [88, 161], [88, 163], [88, 165], [88, 167], [88, 169], [88, 171], [88, 173], [88, 175], [87, 1], [86, 1], [86, 3], [86, 5], [86, 7], [86, 9], [86, 11], [86, 13], [86, 15], [86, 17], [86, 19], [86, 21], [86, 23], [86, 25], [86, 27], [86, 29], [86, 31], [86, 33], [86, 35], [86, 37], [86, 39], [86, 41], [86, 43], [86, 45], [86, 47], [86, 49], [86, 51], [86, 53], [86, 55], [86, 57], [86, 59], [86, 61], [86, 63], [86, 65], [86, 67], [86, 69], [86, 71], [86, 73], [86, 75], [86, 77], [86, 79], [86, 81], [86, 83], [86, 85], [86, 87], [86, 89], [86, 91], [86, 93], [86, 95], [86, 97], [86, 99], [86, 101], [86, 103], [86, 105], [86, 107], [86, 109], [86, 111], [86, 113], [86, 115], [86, 117], [86, 119], [86, 121], [86, 123], [86, 125], [86, 127], [86, 129], [86, 131], [86, 133], [86, 135], [86, 137], [86, 139], [86, 141], [86, 143], [86, 145], [86, 147], [86, 149], [86, 151], [86, 153], [86, 155], [86, 157], [86, 159], [86, 161], [86, 163], [86, 165], [86, 167], [86, 169], [86, 171], [85, 2], [84, 3], [84, 5], [84, 7], [84, 9], [84, 11], [84, 13], [84, 15], [84, 17], [84, 19], [84, 21], [84, 23], [84, 25], [84, 27], [84, 29], [84, 31], [84, 33], [84, 35], [84, 37], [84, 39], [84, 41], [84, 43], [84, 45], [84, 47], [84, 49], [84, 51], [84, 53], [84, 55], [84, 57], [84, 59], [84, 61], [84, 63], [84, 65], [84, 67], [84, 69], [84, 71], [84, 73], [84, 75], [84, 77], [84, 79], [84, 81], [84, 83], [84, 85], [84, 87], [84, 89], [84, 91], [84, 93], [84, 95], [84, 97], [84, 99], [84, 101], [84, 103], [84, 105], [84, 107], [84, 109], [84, 111], [84, 113], [84, 115], [84, 117], [84, 119], [84, 121], [84, 123], [84, 125], [84, 127], [84, 129], [84, 131], [84, 133], [84, 135], [84, 137], [84, 139], [84, 141], [84, 143], [84, 145], [84, 147], [84, 149], [84, 151], [84, 153], [84, 155], [84, 157], [84, 159], [84, 161], [84, 163], [84, 165], [84, 167], [83, 1], [82, 1], [82, 3], [82, 5], [82, 7], [82, 9], [82, 11], [82, 13], [82, 15], [82, 17], [82, 19], [82, 21], [82, 23], [82, 25], [82, 27], [82, 29], [82, 31], [82, 33], [82, 35], [82, 37], [82, 39], [82, 41], [82, 43], [82, 45], [82, 47], [82, 49], [82, 51], [82, 53], [82, 55], [82, 57], [82, 59], [82, 61], [82, 63], [82, 65], [82, 67], [82, 69], [82, 71], [82, 73], [82, 75], [82, 77], [82, 79], [82, 81], [82, 83], [82, 85], [82, 87], [82, 89], [82, 91], [82, 93], [82, 95], [82, 97], [82, 99], [82, 101], [82, 103], [82, 105], [82, 107], [82, 109], [82, 111], [82, 113], [82, 115], [82, 117], [82, 119], [82, 121], [82, 123], [82, 125], [82, 127], [82, 129], [82, 131], [82, 133], [82, 135], [82, 137], [82, 139], [82, 141], [82, 143], [82, 145], [82, 147], [82, 149], [82, 151], [82, 153], [82, 155], [82, 157], [82, 159], [82, 161], [82, 163], [81, 2], [80, 3], [80, 5], [80, 7], [80, 9], [80, 11], [80, 13], [80, 15], [80, 17], [80, 19], [80, 21], [80, 23], [80, 25], [80, 27], [80, 29], [80, 31], [80, 33], [80, 35], [80, 37], [80, 39], [80, 41], [80, 43], [80, 45], [80, 47], [80, 49], [80, 51], [80, 53], [80, 55], [80, 57], [80, 59], [80, 61], [80, 63], [80, 65], [80, 67], [80, 69], [80, 71], [80, 73], [80, 75], [80, 77], [80, 79], [80, 81], [80, 83], [80, 85], [80, 87], [80, 89], [80, 91], [80, 93], [80, 95], [80, 97], [80, 99], [80, 101], [80, 103], [80, 105], [80, 107], [80, 109], [80, 111], [80, 113], [80, 115], [80, 117], [80, 119], [80, 121], [80, 123], [80, 125], [80, 127], [80, 129], [80, 131], [80, 133], [80, 135], [80, 137], [80, 139], [80, 141], [80, 143], [80, 145], [80, 147], [80, 149], [80, 151], [80, 153], [80, 155], [80, 157], [80, 159], [79, 1], [78, 1], [78, 3], [78, 5], [78, 7], [78, 9], [78, 11], [78, 13], [78, 15], [78, 17], [78, 19], [78, 21], [78, 23], [78, 25], [78, 27], [78, 29], [78, 31], [78, 33], [78, 35], [78, 37], [78, 39], [78, 41], [78, 43], [78, 45], [78, 47], [78, 49], [78, 51], [78, 53], [78, 55], [78, 57], [78, 59], [78, 61], [78, 63], [78, 65], [78, 67], [78, 69], [78, 71], [78, 73], [78, 75], [78, 77], [78, 79], [78, 81], [78, 83], [78, 85], [78, 87], [78, 89], [78, 91], [78, 93], [78, 95], [78, 97], [78, 99], [78, 101], [78, 103], [78, 105], [78, 107], [78, 109], [78, 111], [78, 113], [78, 115], [78, 117], [78, 119], [78, 121], [78, 123], [78, 125], [78, 127], [78, 129], [78, 131], [78, 133], [78, 135], [78, 137], [78, 139], [78, 141], [78, 143], [78, 145], [78, 147], [78, 149], [78, 151], [78, 153], [78, 155], [77, 2], [76, 3], [76, 5], [76, 7], [76, 9], [76, 11], [76, 13], [76, 15], [76, 17], [76, 19], [76, 21], [76, 23], [76, 25], [76, 27], [76, 29], [76, 31], [76, 33], [76, 35], [76, 37], [76, 39], [76, 41], [76, 43], [76, 45], [76, 47], [76, 49], [76, 51], [76, 53], [76, 55], [76, 57], [76, 59], [76, 61], [76, 63], [76, 65], [76, 67], [76, 69], [76, 71], [76, 73], [76, 75], [76, 77], [76, 79], [76, 81], [76, 83], [76, 85], [76, 87], [76, 89], [76, 91], [76, 93], [76, 95], [76, 97], [76, 99], [76, 101], [76, 103], [76, 105], [76, 107], [76, 109], [76, 111], [76, 113], [76, 115], [76, 117], [76, 119], [76, 121], [76, 123], [76, 125], [76, 127], [76, 129], [76, 131], [76, 133], [76, 135], [76, 137], [76, 139], [76, 141], [76, 143], [76, 145], [76, 147], [76, 149], [76, 151], [75, 1], [74, 1], [74, 3], [74, 5], [74, 7], [74, 9], [74, 11], [74, 13], [74, 15], [74, 17], [74, 19], [74, 21], [74, 23], [74, 25], [74, 27], [74, 29], [74, 31], [74, 33], [74, 35], [74, 37], [74, 39], [74, 41], [74, 43], [74, 45], [74, 47], [74, 49], [74, 51], [74, 53], [74, 55], [74, 57], [74, 59], [74, 61], [74, 63], [74, 65], [74, 67], [74, 69], [74, 71], [74, 73], [74, 75], [74, 77], [74, 79], [74, 81], [74, 83], [74, 85], [74, 87], [74, 89], [74, 91], [74, 93], [74, 95], [74, 97], [74, 99], [74, 101], [74, 103], [74, 105], [74, 107], [74, 109], [74, 111], [74, 113], [74, 115], [74, 117], [74, 119], [74, 121], [74, 123], [74, 125], [74, 127], [74, 129], [74, 131], [74, 133], [74, 135], [74, 137], [74, 139], [74, 141], [74, 143], [74, 145], [74, 147], [73, 2], [72, 3], [72, 5], [72, 7], [72, 9], [72, 11], [72, 13], [72, 15], [72, 17], [72, 19], [72, 21], [72, 23], [72, 25], [72, 27], [72, 29], [72, 31], [72, 33], [72, 35], [72, 37], [72, 39], [72, 41], [72, 43], [72, 45], [72, 47], [72, 49], [72, 51], [72, 53], [72, 55], [72, 57], [72, 59], [72, 61], [72, 63], [72, 65], [72, 67], [72, 69], [72, 71], [72, 73], [72, 75], [72, 77], [72, 79], [72, 81], [72, 83], [72, 85], [72, 87], [72, 89], [72, 91], [72, 93], [72, 95], [72, 97], [72, 99], [72, 101], [72, 103], [72, 105], [72, 107], [72, 109], [72, 111], [72, 113], [72, 115], [72, 117], [72, 119], [72, 121], [72, 123], [72, 125], [72, 127], [72, 129], [72, 131], [72, 133], [72, 135], [72, 137], [72, 139], [72, 141], [72, 143], [71, 1], [70, 1], [70, 3], [70, 5], [70, 7], [70, 9], [70, 11], [70, 13], [70, 15], [70, 17], [70, 19], [70, 21], [70, 23], [70, 25], [70, 27], [70, 29], [70, 31], [70, 33], [70, 35], [70, 37], [70, 39], [70, 41], [70, 43], [70, 45], [70, 47], [70, 49], [70, 51], [70, 53], [70, 55], [70, 57], [70, 59], [70, 61], [70, 63], [70, 65], [70, 67], [70, 69], [70, 71], [70, 73], [70, 75], [70, 77], [70, 79], [70, 81], [70, 83], [70, 85], [70, 87], [70, 89], [70, 91], [70, 93], [70, 95], [70, 97], [70, 99], [70, 101], [70, 103], [70, 105], [70, 107], [70, 109], [70, 111], [70, 113], [70, 115], [70, 117], [70, 119], [70, 121], [70, 123], [70, 125], [70, 127], [70, 129], [70, 131], [70, 133], [70, 135], [70, 137], [70, 139], [69, 2], [68, 3], [68, 5], [68, 7], [68, 9], [68, 11], [68, 13], [68, 15], [68, 17], [68, 19], [68, 21], [68, 23], [68, 25], [68, 27], [68, 29], [68, 31], [68, 33], [68, 35], [68, 37], [68, 39], [68, 41], [68, 43], [68, 45], [68, 47], [68, 49], [68, 51], [68, 53], [68, 55], [68, 57], [68, 59], [68, 61], [68, 63], [68, 65], [68, 67], [68, 69], [68, 71], [68, 73], [68, 75], [68, 77], [68, 79], [68, 81], [68, 83], [68, 85], [68, 87], [68, 89], [68, 91], [68, 93], [68, 95], [68, 97], [68, 99], [68, 101], [68, 103], [68, 105], [68, 107], [68, 109], [68, 111], [68, 113], [68, 115], [68, 117], [68, 119], [68, 121], [68, 123], [68, 125], [68, 127], [68, 129], [68, 131], [68, 133], [68, 135], [67, 1], [66, 1], [66, 3], [66, 5], [66, 7], [66, 9], [66, 11], [66, 13], [66, 15], [66, 17], [66, 19], [66, 21], [66, 23], [66, 25], [66, 27], [66, 29], [66, 31], [66, 33], [66, 35], [66, 37], [66, 39], [66, 41], [66, 43], [66, 45], [66, 47], [66, 49], [66, 51], [66, 53], [66, 55], [66, 57], [66, 59], [66, 61], [66, 63], [66, 65], [66, 67], [66, 69], [66, 71], [66, 73], [66, 75], [66, 77], [66, 79], [66, 81], [66, 83], [66, 85], [66, 87], [66, 89], [66, 91], [66, 93], [66, 95], [66, 97], [66, 99], [66, 101], [66, 103], [66, 105], [66, 107], [66, 109], [66, 111], [66, 113], [66, 115], [66, 117], [66, 119], [66, 121], [66, 123], [66, 125], [66, 127], [66, 129], [66, 131], [65, 2], [64, 3], [64, 5], [64, 7], [64, 9], [64, 11], [64, 13], [64, 15], [64, 17], [64, 19], [64, 21], [64, 23], [64, 25], [64, 27], [64, 29], [64, 31], [64, 33], [64, 35], [64, 37], [64, 39], [64, 41], [64, 43], [64, 45], [64, 47], [64, 49], [64, 51], [64, 53], [64, 55], [64, 57], [64, 59], [64, 61], [64, 63], [64, 65], [64, 67], [64, 69], [64, 71], [64, 73], [64, 75], [64, 77], [64, 79], [64, 81], [64, 83], [64, 85], [64, 87], [64, 89], [64, 91], [64, 93], [64, 95], [64, 97], [64, 99], [64, 101], [64, 103], [64, 105], [64, 107], [64, 109], [64, 111], [64, 113], [64, 115], [64, 117], [64, 119], [64, 121], [64, 123], [64, 125], [64, 127], [63, 1], [62, 1], [62, 3], [62, 5], [62, 7], [62, 9], [62, 11], [62, 13], [62, 15], [62, 17], [62, 19], [62, 21], [62, 23], [62, 25], [62, 27], [62, 29], [62, 31], [62, 33], [62, 35], [62, 37], [62, 39], [62, 41], [62, 43], [62, 45], [62, 47], [62, 49], [62, 51], [62, 53], [62, 55], [62, 57], [62, 59], [62, 61], [62, 63], [62, 65], [62, 67], [62, 69], [62, 71], [62, 73], [62, 75], [62, 77], [62, 79], [62, 81], [62, 83], [62, 85], [62, 87], [62, 89], [62, 91], [62, 93], [62, 95], [62, 97], [62, 99], [62, 101], [62, 103], [62, 105], [62, 107], [62, 109], [62, 111], [62, 113], [62, 115], [62, 117], [62, 119], [62, 121], [62, 123], [61, 2], [60, 3], [60, 5], [60, 7], [60, 9], [60, 11], [60, 13], [60, 15], [60, 17], [60, 19], [60, 21], [60, 23], [60, 25], [60, 27], [60, 29], [60, 31], [60, 33], [60, 35], [60, 37], [60, 39], [60, 41], [60, 43], [60, 45], [60, 47], [60, 49], [60, 51], [60, 53], [60, 55], [60, 57], [60, 59], [60, 61], [60, 63], [60, 65], [60, 67], [60, 69], [60, 71], [60, 73], [60, 75], [60, 77], [60, 79], [60, 81], [60, 83], [60, 85], [60, 87], [60, 89], [60, 91], [60, 93], [60, 95], [60, 97], [60, 99], [60, 101], [60, 103], [60, 105], [60, 107], [60, 109], [60, 111], [60, 113], [60, 115], [60, 117], [60, 119], [59, 1], [58, 1], [58, 3], [58, 5], [58, 7], [58, 9], [58, 11], [58, 13], [58, 15], [58, 17], [58, 19], [58, 21], [58, 23], [58, 25], [58, 27], [58, 29], [58, 31], [58, 33], [58, 35], [58, 37], [58, 39], [58, 41], [58, 43], [58, 45], [58, 47], [58, 49], [58, 51], [58, 53], [58, 55], [58, 57], [58, 59], [58, 61], [58, 63], [58, 65], [58, 67], [58, 69], [58, 71], [58, 73], [58, 75], [58, 77], [58, 79], [58, 81], [58, 83], [58, 85], [58, 87], [58, 89], [58, 91], [58, 93], [58, 95], [58, 97], [58, 99], [58, 101], [58, 103], [58, 105], [58, 107], [58, 109], [58, 111], [58, 113], [58, 115], [57, 2], [56, 3], [56, 5], [56, 7], [56, 9], [56, 11], [56, 13], [56, 15], [56, 17], [56, 19], [56, 21], [56, 23], [56, 25], [56, 27], [56, 29], [56, 31], [56, 33], [56, 35], [56, 37], [56, 39], [56, 41], [56, 43], [56, 45], [56, 47], [56, 49], [56, 51], [56, 53], [56, 55], [56, 57], [56, 59], [56, 61], [56, 63], [56, 65], [56, 67], [56, 69], [56, 71], [56, 73], [56, 75], [56, 77], [56, 79], [56, 81], [56, 83], [56, 85], [56, 87], [56, 89], [56, 91], [56, 93], [56, 95], [56, 97], [56, 99], [56, 101], [56, 103], [56, 105], [56, 107], [56, 109], [56, 111], [55, 1], [54, 1], [54, 3], [54, 5], [54, 7], [54, 9], [54, 11], [54, 13], [54, 15], [54, 17], [54, 19], [54, 21], [54, 23], [54, 25], [54, 27], [54, 29], [54, 31], [54, 33], [54, 35], [54, 37], [54, 39], [54, 41], [54, 43], [54, 45], [54, 47], [54, 49], [54, 51], [54, 53], [54, 55], [54, 57], [54, 59], [54, 61], [54, 63], [54, 65], [54, 67], [54, 69], [54, 71], [54, 73], [54, 75], [54, 77], [54, 79], [54, 81], [54, 83], [54, 85], [54, 87], [54, 89], [54, 91], [54, 93], [54, 95], [54, 97], [54, 99], [54, 101], [54, 103], [54, 105], [54, 107], [53, 2], [52, 3], [52, 5], [52, 7], [52, 9], [52, 11], [52, 13], [52, 15], [52, 17], [52, 19], [52, 21], [52, 23], [52, 25], [52, 27], [52, 29], [52, 31], [52, 33], [52, 35], [52, 37], [52, 39], [52, 41], [52, 43], [52, 45], [52, 47], [52, 49], [52, 51], [52, 53], [52, 55], [52, 57], [52, 59], [52, 61], [52, 63], [52, 65], [52, 67], [52, 69], [52, 71], [52, 73], [52, 75], [52, 77], [52, 79], [52, 81], [52, 83], [52, 85], [52, 87], [52, 89], [52, 91], [52, 93], [52, 95], [52, 97], [52, 99], [52, 101], [52, 103], [51, 1], [50, 1], [50, 3], [50, 5], [50, 7], [50, 9], [50, 11], [50, 13], [50, 15], [50, 17], [50, 19], [50, 21], [50, 23], [50, 25], [50, 27], [50, 29], [50, 31], [50, 33], [50, 35], [50, 37], [50, 39], [50, 41], [50, 43], [50, 45], [50, 47], [50, 49], [50, 51], [50, 53], [50, 55], [50, 57], [50, 59], [50, 61], [50, 63], [50, 65], [50, 67], [50, 69], [50, 71], [50, 73], [50, 75], [50, 77], [50, 79], [50, 81], [50, 83], [50, 85], [50, 87], [50, 89], [50, 91], [50, 93], [50, 95], [50, 97], [50, 99], [49, 2], [48, 3], [48, 5], [48, 7], [48, 9], [48, 11], [48, 13], [48, 15], [48, 17], [48, 19], [48, 21], [48, 23], [48, 25], [48, 27], [48, 29], [48, 31], [48, 33], [48, 35], [48, 37], [48, 39], [48, 41], [48, 43], [48, 45], [48, 47], [48, 49], [48, 51], [48, 53], [48, 55], [48, 57], [48, 59], [48, 61], [48, 63], [48, 65], [48, 67], [48, 69], [48, 71], [48, 73], [48, 75], [48, 77], [48, 79], [48, 81], [48, 83], [48, 85], [48, 87], [48, 89], [48, 91], [48, 93], [48, 95], [47, 1], [46, 1], [46, 3], [46, 5], [46, 7], [46, 9], [46, 11], [46, 13], [46, 15], [46, 17], [46, 19], [46, 21], [46, 23], [46, 25], [46, 27], [46, 29], [46, 31], [46, 33], [46, 35], [46, 37], [46, 39], [46, 41], [46, 43], [46, 45], [46, 47], [46, 49], [46, 51], [46, 53], [46, 55], [46, 57], [46, 59], [46, 61], [46, 63], [46, 65], [46, 67], [46, 69], [46, 71], [46, 73], [46, 75], [46, 77], [46, 79], [46, 81], [46, 83], [46, 85], [46, 87], [46, 89], [46, 91], [45, 2], [44, 3], [44, 5], [44, 7], [44, 9], [44, 11], [44, 13], [44, 15], [44, 17], [44, 19], [44, 21], [44, 23], [44, 25], [44, 27], [44, 29], [44, 31], [44, 33], [44, 35], [44, 37], [44, 39], [44, 41], [44, 43], [44, 45], [44, 47], [44, 49], [44, 51], [44, 53], [44, 55], [44, 57], [44, 59], [44, 61], [44, 63], [44, 65], [44, 67], [44, 69], [44, 71], [44, 73], [44, 75], [44, 77], [44, 79], [44, 81], [44, 83], [44, 85], [44, 87], [43, 1], [42, 1], [42, 3], [42, 5], [42, 7], [42, 9], [42, 11], [42, 13], [42, 15], [42, 17], [42, 19], [42, 21], [42, 23], [42, 25], [42, 27], [42, 29], [42, 31], [42, 33], [42, 35], [42, 37], [42, 39], [42, 41], [42, 43], [42, 45], [42, 47], [42, 49], [42, 51], [42, 53], [42, 55], [42, 57], [42, 59], [42, 61], [42, 63], [42, 65], [42, 67], [42, 69], [42, 71], [42, 73], [42, 75], [42, 77], [42, 79], [42, 81], [42, 83], [41, 2], [40, 3], [40, 5], [40, 7], [40, 9], [40, 11], [40, 13], [40, 15], [40, 17], [40, 19], [40, 21], [40, 23], [40, 25], [40, 27], [40, 29], [40, 31], [40, 33], [40, 35], [40, 37], [40, 39], [40, 41], [40, 43], [40, 45], [40, 47], [40, 49], [40, 51], [40, 53], [40, 55], [40, 57], [40, 59], [40, 61], [40, 63], [40, 65], [40, 67], [40, 69], [40, 71], [40, 73], [40, 75], [40, 77], [40, 79], [39, 1], [38, 1], [38, 3], [38, 5], [38, 7], [38, 9], [38, 11], [38, 13], [38, 15], [38, 17], [38, 19], [38, 21], [38, 23], [38, 25], [38, 27], [38, 29], [38, 31], [38, 33], [38, 35], [38, 37], [38, 39], [38, 41], [38, 43], [38, 45], [38, 47], [38, 49], [38, 51], [38, 53], [38, 55], [38, 57], [38, 59], [38, 61], [38, 63], [38, 65], [38, 67], [38, 69], [38, 71], [38, 73], [38, 75], [37, 2], [36, 3], [36, 5], [36, 7], [36, 9], [36, 11], [36, 13], [36, 15], [36, 17], [36, 19], [36, 21], [36, 23], [36, 25], [36, 27], [36, 29], [36, 31], [36, 33], [36, 35], [36, 37], [36, 39], [36, 41], [36, 43], [36, 45], [36, 47], [36, 49], [36, 51], [36, 53], [36, 55], [36, 57], [36, 59], [36, 61], [36, 63], [36, 65], [36, 67], [36, 69], [36, 71], [35, 1], [34, 1], [34, 3], [34, 5], [34, 7], [34, 9], [34, 11], [34, 13], [34, 15], [34, 17], [34, 19], [34, 21], [34, 23], [34, 25], [34, 27], [34, 29], [34, 31], [34, 33], [34, 35], [34, 37], [34, 39], [34, 41], [34, 43], [34, 45], [34, 47], [34, 49], [34, 51], [34, 53], [34, 55], [34, 57], [34, 59], [34, 61], [34, 63], [34, 65], [34, 67], [33, 2], [32, 3], [32, 5], [32, 7], [32, 9], [32, 11], [32, 13], [32, 15], [32, 17], [32, 19], [32, 21], [32, 23], [32, 25], [32, 27], [32, 29], [32, 31], [32, 33], [32, 35], [32, 37], [32, 39], [32, 41], [32, 43], [32, 45], [32, 47], [32, 49], [32, 51], [32, 53], [32, 55], [32, 57], [32, 59], [32, 61], [32, 63], [31, 1], [30, 1], [30, 3], [30, 5], [30, 7], [30, 9], [30, 11], [30, 13], [30, 15], [30, 17], [30, 19], [30, 21], [30, 23], [30, 25], [30, 27], [30, 29], [30, 31], [30, 33], [30, 35], [30, 37], [30, 39], [30, 41], [30, 43], [30, 45], [30, 47], [30, 49], [30, 51], [30, 53], [30, 55], [30, 57], [30, 59], [29, 2], [28, 3], [28, 5], [28, 7], [28, 9], [28, 11], [28, 13], [28, 15], [28, 17], [28, 19], [28, 21], [28, 23], [28, 25], [28, 27], [28, 29], [28, 31], [28, 33], [28, 35], [28, 37], [28, 39], [28, 41], [28, 43], [28, 45], [28, 47], [28, 49], [28, 51], [28, 53], [28, 55], [27, 1], [26, 1], [26, 3], [26, 5], [26, 7], [26, 9], [26, 11], [26, 13], [26, 15], [26, 17], [26, 19], [26, 21], [26, 23], [26, 25], [26, 27], [26, 29], [26, 31], [26, 33], [26, 35], [26, 37], [26, 39], [26, 41], [26, 43], [26, 45], [26, 47], [26, 49], [26, 51], [25, 2], [24, 3], [24, 5], [24, 7], [24, 9], [24, 11], [24, 13], [24, 15], [24, 17], [24, 19], [24, 21], [24, 23], [24, 25], [24, 27], [24, 29], [24, 31], [24, 33], [24, 35], [24, 37], [24, 39], [24, 41], [24, 43], [24, 45], [24, 47], [23, 1], [22, 1], [22, 3], [22, 5], [22, 7], [22, 9], [22, 11], [22, 13], [22, 15], [22, 17], [22, 19], [22, 21], [22, 23], [22, 25], [22, 27], [22, 29], [22, 31], [22, 33], [22, 35], [22, 37], [22, 39], [22, 41], [22, 43], [21, 2], [20, 3], [20, 5], [20, 7], [20, 9], [20, 11], [20, 13], [20, 15], [20, 17], [20, 19], [20, 21], [20, 23], [20, 25], [20, 27], [20, 29], [20, 31], [20, 33], [20, 35], [20, 37], [20, 39], [19, 1], [18, 1], [18, 3], [18, 5], [18, 7], [18, 9], [18, 11], [18, 13], [18, 15], [18, 17], [18, 19], [18, 21], [18, 23], [18, 25], [18, 27], [18, 29], [18, 31], [18, 33], [18, 35], [17, 2], [16, 3], [16, 5], [16, 7], [16, 9], [16, 11], [16, 13], [16, 15], [16, 17], [16, 19], [16, 21], [16, 23], [16, 25], [16, 27], [16, 29], [16, 31], [15, 1], [14, 1], [14, 3], [14, 5], [14, 7], [14, 9], [14, 11], [14, 13], [14, 15], [14, 17], [14, 19], [14, 21], [14, 23], [14, 25], [14, 27], [13, 2], [12, 3], [12, 5], [12, 7], [12, 9], [12, 11], [12, 13], [12, 15], [12, 17], [12, 19], [12, 21], [12, 23], [11, 1], [10, 1], [10, 3], [10, 5], [10, 7], [10, 9], [10, 11], [10, 13], [10, 15], [10, 17], [10, 19], [9, 2], [8, 3], [8, 5], [8, 7], [8, 9], [8, 11], [8, 13], [8, 15], [7, 1], [6, 1], [6, 3], [6, 5], [6, 7], [6, 9], [6, 11], [5, 2], [4, 3], [4, 5], [4, 7], [3, 1], [2, 1], [2, 3]], "input_len": 9, "line": 5789}
{"problem": "Given an integer array nums containing n integers, find the beauty of each subarray of size k.\nThe beauty of a subarray is the xth smallest integer in the subarray if it is negative, or 0 if there are fewer than x negative integers.\nReturn an integer array containing n - k + 1 integers, which denote the beauty of the subarrays in order from the first index in the array.\n\tA subarray is a contiguous non-empty sequence of elements within an array.", "tags": ["Array", "Hash Table", "Sliding Window"], "input": {"nums": [-5, 10, -26, -11, -41, -12, 26, -41], "k": 7, "x": 5}, "output": [-5, -11], "input_len": 47, "line": 288}
{"problem": "You are given an array start where start = [startX, startY] represents your initial position (startX, startY) in a 2D space. You are also given the array target where target = [targetX, targetY] represents your target position (targetX, targetY).\nThe cost of going from a position (x1, y1) to any other position in the space (x2, y2) is |x2 - x1| + |y2 - y1|.\nThere are also some special roads. You are given a 2D array specialRoads where specialRoads[i] = [x1i, y1i, x2i, y2i, costi] indicates that the ith special road goes in one direction from (x1i, y1i) to (x2i, y2i) with a cost equal to costi. You can use each special road any number of times.\nReturn the minimum cost required to go from (startX, startY) to (targetX, targetY).", "tags": ["Graph", "Array", "Shortest Path", "Heap"], "input": {"start": [27016, 23338], "target": [99183, 61495], "specialRoads": [[83241, 25516, 37248, 59572, 65960], [86438, 42628, 83742, 60730, 43363], [71491, 43256, 38410, 37629, 91565], [31336, 58268, 30511, 25831, 32464], [80834, 31565, 57845, 47862, 59726]]}, "output": 110324, "input_len": 216, "line": 240}
{"problem": "Given a positive integer n, return the punishment number of n.\nThe punishment number of n is defined as the sum of the squares of all integers i such that:\n\t1 <= i <= n\n\tThe decimal representation of i * i can be partitioned into contiguous substrings such that the sum of the integer values of these substrings equals i.", "tags": ["Math", "Backtracking"], "input": {"n": 63}, "output": 6528, "input_len": 8, "line": 3939}
{"problem": "Given a positive integer n, return the punishment number of n.\nThe punishment number of n is defined as the sum of the squares of all integers i such that:\n\t1 <= i <= n\n\tThe decimal representation of i * i can be partitioned into contiguous substrings such that the sum of the integer values of these substrings equals i.", "tags": ["Math", "Backtracking"], "input": {"n": 19}, "output": 182, "input_len": 8, "line": 575}
{"problem": "Given a positive integer n, return the punishment number of n.\nThe punishment number of n is defined as the sum of the squares of all integers i such that:\n\t1 <= i <= n\n\tThe decimal representation of i * i can be partitioned into contiguous substrings such that the sum of the integer values of these substrings equals i.", "tags": ["Math", "Backtracking"], "input": {"n": 28}, "output": 182, "input_len": 8, "line": 930}
{"problem": "Given a positive integer n, return the punishment number of n.\nThe punishment number of n is defined as the sum of the squares of all integers i such that:\n\t1 <= i <= n\n\tThe decimal representation of i * i can be partitioned into contiguous substrings such that the sum of the integer values of these substrings equals i.", "tags": ["Math", "Backtracking"], "input": {"n": 35}, "output": 182, "input_len": 8, "line": 1443}
{"problem": "Given a positive integer n, return the punishment number of n.\nThe punishment number of n is defined as the sum of the squares of all integers i such that:\n\t1 <= i <= n\n\tThe decimal representation of i * i can be partitioned into contiguous substrings such that the sum of the integer values of these substrings equals i.", "tags": ["Math", "Backtracking"], "input": {"n": 11}, "output": 182, "input_len": 8, "line": 275}
{"problem": "Given a positive integer n, return the punishment number of n.\nThe punishment number of n is defined as the sum of the squares of all integers i such that:\n\t1 <= i <= n\n\tThe decimal representation of i * i can be partitioned into contiguous substrings such that the sum of the integer values of these substrings equals i.", "tags": ["Math", "Backtracking"], "input": {"n": 20}, "output": 182, "input_len": 8, "line": 618}
{"problem": "Given a positive integer n, return the punishment number of n.\nThe punishment number of n is defined as the sum of the squares of all integers i such that:\n\t1 <= i <= n\n\tThe decimal representation of i * i can be partitioned into contiguous substrings such that the sum of the integer values of these substrings equals i.", "tags": ["Math", "Backtracking"], "input": {"n": 26}, "output": 182, "input_len": 8, "line": 852}
{"problem": "Given a positive integer n, return the punishment number of n.\nThe punishment number of n is defined as the sum of the squares of all integers i such that:\n\t1 <= i <= n\n\tThe decimal representation of i * i can be partitioned into contiguous substrings such that the sum of the integer values of these substrings equals i.", "tags": ["Math", "Backtracking"], "input": {"n": 83}, "output": 13252, "input_len": 8, "line": 5775}
{"problem": "Given a positive integer n, return the punishment number of n.\nThe punishment number of n is defined as the sum of the squares of all integers i such that:\n\t1 <= i <= n\n\tThe decimal representation of i * i can be partitioned into contiguous substrings such that the sum of the integer values of these substrings equals i.", "tags": ["Math", "Backtracking"], "input": {"n": 6}, "output": 1, "input_len": 7, "line": 112}
{"problem": "Given a positive integer n, return the punishment number of n.\nThe punishment number of n is defined as the sum of the squares of all integers i such that:\n\t1 <= i <= n\n\tThe decimal representation of i * i can be partitioned into contiguous substrings such that the sum of the integer values of these substrings equals i.", "tags": ["Math", "Backtracking"], "input": {"n": 105}, "output": 41334, "input_len": 9, "line": 8433}
{"problem": "You are given a 0-indexed integer array nums of size n representing the cost of collecting different chocolates. The cost of collecting the chocolate at the index i\u00a0is nums[i]. Each chocolate is of a different type, and initially, the chocolate at the index\u00a0i\u00a0is of ith type.\nIn one operation, you can do the following with an incurred cost of x:\n\tSimultaneously change the chocolate of ith type to ((i + 1) mod n)th type for all chocolates.\nReturn the minimum cost to collect chocolates of all types, given that you can perform as many operations as you would like.", "tags": ["Array", "Enumeration"], "input": {"nums": [803599712, 744757246, 16128734, 881751418, 920498081, 679757115, 788132769, 299729072, 64890784, 57856345, 994446251, 941211312, 621071044], "x": 553821124}, "output": 3277906878, "input_len": 158, "line": 567}
{"problem": "You are given two 0-indexed integer arrays,\u00a0cost and time, of size n representing the costs and the time taken to paint n different walls respectively. There are two painters available:\n\tA\u00a0paid painter\u00a0that paints the ith wall in time[i] units of time and takes cost[i] units of money.\n\tA\u00a0free painter that paints\u00a0any wall in 1 unit of time at a cost of 0. But the\u00a0free painter can only be used if the paid painter is already occupied.\nReturn the minimum amount of money required to paint the n\u00a0walls.", "tags": ["Array", "DP"], "input": {"cost": [92761, 932946, 632523, 891676, 77178, 511062, 32604, 735188, 29021, 315969, 857503, 405385, 67366, 299706, 78424], "time": [500, 148, 118, 302, 77, 104, 254, 61, 497, 123, 471, 60, 313, 167, 177]}, "output": 29021, "input_len": 193, "line": 119}
{"problem": "You are given a 0-indexed array nums of n integers and an integer target.\nYou are initially positioned at index 0. In one step, you can jump from index i to any index j such that:\n\t0 <= i < j < n\n\t-target <= nums[j] - nums[i] <= target\nReturn the maximum number of jumps you can make to reach index n - 1.\nIf there is no way to reach index n - 1, return -1.", "tags": ["Array", "DP"], "input": {"nums": [-14522719, 900994597, 955057776, -552003497, 232536210, 759726680, -86162140, -566921776, -612030626, -717305767, 730261435, -413542095, -960948468, 905662900], "target": 568631693}, "output": 4, "input_len": 170, "line": 254}
{"problem": "You are given a 0-indexed array nums of n integers and an integer target.\nYou are initially positioned at index 0. In one step, you can jump from index i to any index j such that:\n\t0 <= i < j < n\n\t-target <= nums[j] - nums[i] <= target\nReturn the maximum number of jumps you can make to reach index n - 1.\nIf there is no way to reach index n - 1, return -1.", "tags": ["Array", "DP"], "input": {"nums": [801013306, 62124138, 379132709, 940885047, -232566334, 459994037, -267116313, 628323239, -399275625, -963886687, -153777479, -856362364, -721529704, 880237113, 494258072, 210431627, -988990901, 683051594, 618426216, 562071481, -118257453, 371930128, -157826499, -407979854, -959889234, -585595855, 712058361, -113084835, -650388947, 17905685, -859749880, 646835365, -719691406, 132408970, -526387767, -653456124, 257883787, 51914949, -858216951, 779136207, 269878029, 939419421, 524865155, 270781292, 313405630, 837199734, 374519781, -594694037, -566775633, 704899064, 264505732, -141880690, -963878486, 145821076, -451371573, 823511907, 69969931, 730943023, 782426955, -603498188, 69414949, -370439813, 408262302, -511105323], "target": 1788244497}, "output": 63, "input_len": 718, "line": 6320}
{"problem": "Given two positive integers n and x.\nReturn the number of ways n can be expressed as the sum of the xth power of unique positive integers, in other words, the number of sets of unique integers [n1, n2, ..., nk] where n = n1x + n2x + ... + nkx.\nSince the result can be very large, return it modulo 10^9 + 7.\nFor example, if n = 160 and x = 3, one way to express n is n = 2^3 + 3^3 + 5^3.", "tags": ["DP"], "input": {"n": 21, "x": 2}, "output": 1, "input_len": 14, "line": 1537}
{"problem": "Given two positive integers n and x.\nReturn the number of ways n can be expressed as the sum of the xth power of unique positive integers, in other words, the number of sets of unique integers [n1, n2, ..., nk] where n = n1x + n2x + ... + nkx.\nSince the result can be very large, return it modulo 10^9 + 7.\nFor example, if n = 160 and x = 3, one way to express n is n = 2^3 + 3^3 + 5^3.", "tags": ["DP"], "input": {"n": 10, "x": 2}, "output": 1, "input_len": 14, "line": 398}
{"problem": "You are given a tree (i.e. a connected, undirected graph that has no cycles) rooted at node 0 consisting of n nodes numbered from 0 to n - 1. The tree is represented by a 0-indexed array parent of size n, where parent[i] is the parent of node i. Since node 0 is the root, parent[0] == -1.\nYou are also given a string s of length n, where s[i] is the character assigned to the edge between i and parent[i]. s[0] can be ignored.\nReturn the number of pairs of nodes (u, v) such that u < v and the characters assigned to edges on the path from u to v can be rearranged to form a palindrome.\nA string is a palindrome when it reads the same backwards as forwards.", "tags": ["Bit Manipulation", "Tree", "DFS", "DP", "Bitmask DP"], "input": {"parent": [-1, 0, 1, 0, 3, 3, 2, 1, 0, 0, 0, 10, 6, 12, 4, 14, 14, 9, 11, 6, 3, 8, 14, 18, 3, 19, 12, 16, 18, 12, 2, 11, 31, 20, 25, 26, 5, 20, 12, 6, 6, 4, 31, 13, 39, 31, 38, 17, 8, 44, 40, 34, 1, 34, 29, 7, 45, 33, 29, 56, 27, 15, 43, 2, 17, 55, 33, 36, 16, 9, 52, 58, 20, 61, 62, 6, 61, 69, 36, 3, 50, 32, 62, 40, 47, 37, 5, 82, 68, 63, 82, 70, 33, 32, 84, 45], "s": "bolvzscfmlgtxqwljedafsagszfnebbtzbqphjrkmaumqylrzioqegoivzagusxbwslhkavitaziqlcmqzdahtxyloxcixmo"}, "output": 128, "input_len": 413, "line": 8444}
{"problem": "You are given a tree (i.e. a connected, undirected graph that has no cycles) rooted at node 0 consisting of n nodes numbered from 0 to n - 1. The tree is represented by a 0-indexed array parent of size n, where parent[i] is the parent of node i. Since node 0 is the root, parent[0] == -1.\nYou are also given a string s of length n, where s[i] is the character assigned to the edge between i and parent[i]. s[0] can be ignored.\nReturn the number of pairs of nodes (u, v) such that u < v and the characters assigned to edges on the path from u to v can be rearranged to form a palindrome.\nA string is a palindrome when it reads the same backwards as forwards.", "tags": ["Bit Manipulation", "Tree", "DFS", "DP", "Bitmask DP"], "input": {"parent": [-1, 0, 0, 0, 1, 1, 3, 5, 3, 8, 1, 0, 7, 12, 12, 14, 0, 7, 7, 8, 17, 0], "s": "dpozljtnxbdjqkmaibiwan"}, "output": 22, "input_len": 90, "line": 1887}
{"problem": "You are given a tree (i.e. a connected, undirected graph that has no cycles) rooted at node 0 consisting of n nodes numbered from 0 to n - 1. The tree is represented by a 0-indexed array parent of size n, where parent[i] is the parent of node i. Since node 0 is the root, parent[0] == -1.\nYou are also given a string s of length n, where s[i] is the character assigned to the edge between i and parent[i]. s[0] can be ignored.\nReturn the number of pairs of nodes (u, v) such that u < v and the characters assigned to edges on the path from u to v can be rearranged to form a palindrome.\nA string is a palindrome when it reads the same backwards as forwards.", "tags": ["Bit Manipulation", "Tree", "DFS", "DP", "Bitmask DP"], "input": {"parent": [-1, 0, 0, 2, 0, 1, 3, 4, 4, 8, 1, 2, 4, 11], "s": "knlfmdogvdjlze"}, "output": 17, "input_len": 59, "line": 1173}
{"problem": "You are given a tree (i.e. a connected, undirected graph that has no cycles) rooted at node 0 consisting of n nodes numbered from 0 to n - 1. The tree is represented by a 0-indexed array parent of size n, where parent[i] is the parent of node i. Since node 0 is the root, parent[0] == -1.\nYou are also given a string s of length n, where s[i] is the character assigned to the edge between i and parent[i]. s[0] can be ignored.\nReturn the number of pairs of nodes (u, v) such that u < v and the characters assigned to edges on the path from u to v can be rearranged to form a palindrome.\nA string is a palindrome when it reads the same backwards as forwards.", "tags": ["Bit Manipulation", "Tree", "DFS", "DP", "Bitmask DP"], "input": {"parent": [-1, 0], "s": "fz"}, "output": 1, "input_len": 17, "line": 108}
{"problem": "You are given a tree (i.e. a connected, undirected graph that has no cycles) rooted at node 0 consisting of n nodes numbered from 0 to n - 1. The tree is represented by a 0-indexed array parent of size n, where parent[i] is the parent of node i. Since node 0 is the root, parent[0] == -1.\nYou are also given a string s of length n, where s[i] is the character assigned to the edge between i and parent[i]. s[0] can be ignored.\nReturn the number of pairs of nodes (u, v) such that u < v and the characters assigned to edges on the path from u to v can be rearranged to form a palindrome.\nA string is a palindrome when it reads the same backwards as forwards.", "tags": ["Bit Manipulation", "Tree", "DFS", "DP", "Bitmask DP"], "input": {"parent": [-1, 0, 1, 1, 2, 4], "s": "mxdsjq"}, "output": 5, "input_len": 30, "line": 464}
{"problem": "You are given a tree (i.e. a connected, undirected graph that has no cycles) rooted at node 0 consisting of n nodes numbered from 0 to n - 1. The tree is represented by a 0-indexed array parent of size n, where parent[i] is the parent of node i. Since node 0 is the root, parent[0] == -1.\nYou are also given a string s of length n, where s[i] is the character assigned to the edge between i and parent[i]. s[0] can be ignored.\nReturn the number of pairs of nodes (u, v) such that u < v and the characters assigned to edges on the path from u to v can be rearranged to form a palindrome.\nA string is a palindrome when it reads the same backwards as forwards.", "tags": ["Bit Manipulation", "Tree", "DFS", "DP", "Bitmask DP"], "input": {"parent": [-1, 0, 1, 0, 3, 2, 0, 5, 7, 1, 4, 9, 4, 3, 6, 8, 2, 12], "s": "ttkdrtowrhtrjgunxx"}, "output": 18, "input_len": 73, "line": 1531}
{"problem": "You are given a tree (i.e. a connected, undirected graph that has no cycles) rooted at node 0 consisting of n nodes numbered from 0 to n - 1. The tree is represented by a 0-indexed array parent of size n, where parent[i] is the parent of node i. Since node 0 is the root, parent[0] == -1.\nYou are also given a string s of length n, where s[i] is the character assigned to the edge between i and parent[i]. s[0] can be ignored.\nReturn the number of pairs of nodes (u, v) such that u < v and the characters assigned to edges on the path from u to v can be rearranged to form a palindrome.\nA string is a palindrome when it reads the same backwards as forwards.", "tags": ["Bit Manipulation", "Tree", "DFS", "DP", "Bitmask DP"], "input": {"parent": [-1, 0, 1, 2, 1, 0, 4, 3, 6, 0, 5], "s": "sltkpoqgdlj"}, "output": 13, "input_len": 49, "line": 905}
{"problem": "You are given a tree (i.e. a connected, undirected graph that has no cycles) rooted at node 0 consisting of n nodes numbered from 0 to n - 1. The tree is represented by a 0-indexed array parent of size n, where parent[i] is the parent of node i. Since node 0 is the root, parent[0] == -1.\nYou are also given a string s of length n, where s[i] is the character assigned to the edge between i and parent[i]. s[0] can be ignored.\nReturn the number of pairs of nodes (u, v) such that u < v and the characters assigned to edges on the path from u to v can be rearranged to form a palindrome.\nA string is a palindrome when it reads the same backwards as forwards.", "tags": ["Bit Manipulation", "Tree", "DFS", "DP", "Bitmask DP"], "input": {"parent": [-1, 0, 0, 1, 1], "s": "hsesa"}, "output": 6, "input_len": 26, "line": 373}
{"problem": "You are given a tree (i.e. a connected, undirected graph that has no cycles) rooted at node 0 consisting of n nodes numbered from 0 to n - 1. The tree is represented by a 0-indexed array parent of size n, where parent[i] is the parent of node i. Since node 0 is the root, parent[0] == -1.\nYou are also given a string s of length n, where s[i] is the character assigned to the edge between i and parent[i]. s[0] can be ignored.\nReturn the number of pairs of nodes (u, v) such that u < v and the characters assigned to edges on the path from u to v can be rearranged to form a palindrome.\nA string is a palindrome when it reads the same backwards as forwards.", "tags": ["Bit Manipulation", "Tree", "DFS", "DP", "Bitmask DP"], "input": {"parent": [-1, 0, 0, 2, 3, 0, 5, 4, 1, 3, 8, 4, 10, 7, 10, 6, 10, 16, 6, 17, 10, 17, 16, 16, 7, 9, 14, 19, 23, 27, 12, 3, 12, 17, 19, 8, 3, 1, 0, 4, 14, 28, 37, 27, 0, 32, 14, 42, 22, 17], "s": "biwcqrhsgulqwuobtltxwhmhqyzlhsjfimhhocphzqhhxdxyzs"}, "output": 74, "input_len": 212, "line": 4355}
{"problem": "You are given a tree (i.e. a connected, undirected graph that has no cycles) rooted at node 0 consisting of n nodes numbered from 0 to n - 1. The tree is represented by a 0-indexed array parent of size n, where parent[i] is the parent of node i. Since node 0 is the root, parent[0] == -1.\nYou are also given a string s of length n, where s[i] is the character assigned to the edge between i and parent[i]. s[0] can be ignored.\nReturn the number of pairs of nodes (u, v) such that u < v and the characters assigned to edges on the path from u to v can be rearranged to form a palindrome.\nA string is a palindrome when it reads the same backwards as forwards.", "tags": ["Bit Manipulation", "Tree", "DFS", "DP", "Bitmask DP"], "input": {"parent": [-1, 0], "s": "ki"}, "output": 1, "input_len": 16, "line": 108}
{"problem": "You are given an array nums consisting of positive integers.\nWe call a subarray of an array complete if the following condition is satisfied:\n\tThe number of distinct elements in the subarray is equal to the number of distinct elements in the whole array.\nReturn the number of complete subarrays.\nA subarray is a contiguous non-empty part of an array.", "tags": ["Array", "Hash Table", "Sliding Window"], "input": {"nums": [1609, 1543, 1204, 625, 827, 1569, 1456, 855, 11, 1041]}, "output": 1, "input_len": 59, "line": 202}
{"problem": "You are given two 0-indexed integer arrays nums1 and nums2 of equal length. Every second, for all indices 0 <= i < nums1.length, value of nums1[i] is incremented by nums2[i]. After this is done, you can do the following operation:\n\tChoose an index 0 <= i < nums1.length and make nums1[i] = 0.\nYou are also given an integer x.\nReturn the minimum time in which you can make the sum of all elements of nums1 to be less than or equal to x, or -1 if this is not possible.", "tags": ["Array", "DP", "Sorting"], "input": {"nums1": [364, 871, 912, 227, 761, 50], "nums2": [529, 1, 459, 661, 844, 423], "x": 872247}, "output": 0, "input_len": 77, "line": 198}
{"problem": "You are given an integer array receiver of length n and an integer k. n players are playing a ball-passing game.\nYou choose the starting player, i. The game proceeds as follows: player i passes the ball to player receiver[i], who then passes it to receiver[receiver[i]], and so on, for k passes in total. The game's score is the sum of the indices of the players who touched the ball, including repetitions, i.e. i + receiver[i] + receiver[receiver[i]] + ... + receiver(k)[i].\nReturn\u00a0the maximum\u00a0possible score.\nNotes:\n\treceiver may contain duplicates.\n\treceiver[i] may be equal to i.", "tags": ["Bit Manipulation", "Array", "DP"], "input": {"receiver": [24, 13, 16, 11, 7, 13, 14, 2, 4, 14, 2, 28, 28, 27, 22, 19, 9, 1, 2, 3, 25, 23, 4, 22, 12, 16, 22, 24, 4, 3], "k": 18176}, "output": 192208, "input_len": 123, "line": 2710}
{"problem": "You are given an integer array receiver of length n and an integer k. n players are playing a ball-passing game.\nYou choose the starting player, i. The game proceeds as follows: player i passes the ball to player receiver[i], who then passes it to receiver[receiver[i]], and so on, for k passes in total. The game's score is the sum of the indices of the players who touched the ball, including repetitions, i.e. i + receiver[i] + receiver[receiver[i]] + ... + receiver(k)[i].\nReturn\u00a0the maximum\u00a0possible score.\nNotes:\n\treceiver may contain duplicates.\n\treceiver[i] may be equal to i.", "tags": ["Bit Manipulation", "Array", "DP"], "input": {"receiver": [0, 7, 5, 5, 6, 7, 0, 7], "k": 38475}, "output": 269332, "input_len": 38, "line": 858}
{"problem": "There is an undirected tree with n nodes labeled from 0 to n - 1. You are given the integer n and a 2D integer array edges of length n - 1, where edges[i] = [ui, vi, wi] indicates that there is an edge between nodes ui and vi with weight wi in the tree.\nYou are also given a 2D integer array queries of length m, where queries[i] = [ai, bi]. For each query, find the minimum number of operations required to make the weight of every edge on the path from ai to bi equal. In one operation, you can choose any edge of the tree and change its weight to any value.\nNote that:\n\tQueries are independent of each other, meaning that the tree returns to its initial state on each new query.\n\tThe path from ai to bi is a sequence of distinct nodes starting with node ai and ending with node bi such that every two adjacent nodes in the sequence share an edge in the tree.\nReturn an array answer of length m where answer[i] is the answer to the ith query.", "tags": ["Tree", "Graph", "Array", "SCC"], "input": {"n": 175, "edges": [[0, 1, 2], [0, 2, 9], [1, 3, 12], [1, 4, 7], [3, 5, 15], [3, 6, 4], [2, 7, 1], [5, 8, 13], [7, 9, 11], [0, 10, 16], [10, 11, 14], [4, 12, 11], [2, 13, 11], [5, 14, 7], [1, 15, 25], [1, 16, 5], [14, 17, 10], [4, 18, 11], [12, 19, 25], [9, 20, 26], [0, 21, 16], [20, 22, 21], [6, 23, 4], [5, 24, 25], [3, 25, 17], [22, 26, 1], [4, 27, 15], [27, 28, 9], [22, 29, 23], [18, 30, 10], [20, 31, 9], [17, 32, 20], [8, 33, 17], [20, 34, 22], [14, 35, 8], [14, 36, 25], [5, 37, 11], [23, 38, 17], [11, 39, 2], [11, 40, 19], [16, 41, 24], [26, 42, 20], [40, 43, 15], [43, 44, 24], [24, 45, 9], [26, 46, 26], [24, 47, 24], [16, 48, 1], [0, 49, 19], [7, 50, 4], [24, 51, 8], [24, 52, 8], [10, 53, 1], [20, 54, 15], [16, 55, 24], [4, 56, 8], [9, 57, 10], [57, 58, 6], [49, 59, 4], [36, 60, 6], [16, 61, 25], [38, 62, 20], [26, 63, 25], [27, 64, 13], [61, 65, 20], [4, 66, 11], [20, 67, 21], [46, 68, 19], [5, 69, 15], [32, 70, 11], [1, 71, 19], [32, 72, 13], [1, 73, 5], [23, 74, 22], [63, 75, 7], [64, 76, 14], [28, 77, 24], [31, 78, 8], [16, 79, 10], [47, 80, 7], [47, 81, 18], [17, 82, 25], [64, 83, 24], [47, 84, 1], [8, 85, 22], [52, 86, 21], [85, 87, 13], [83, 88, 4], [15, 89, 3], [16, 90, 24], [57, 91, 17], [68, 92, 15], [15, 93, 3], [78, 94, 6], [6, 95, 14], [53, 96, 17], [50, 97, 1], [54, 98, 18], [49, 99, 6], [2, 100, 21], [75, 101, 26], [71, 102, 24], [73, 103, 1], [89, 104, 25], [24, 105, 5], [33, 106, 9], [5, 107, 20], [89, 108, 24], [41, 109, 13], [75, 110, 17], [2, 111, 10], [77, 112, 22], [69, 113, 2], [7, 114, 22], [82, 115, 23], [45, 116, 22], [37, 117, 19], [54, 118, 22], [8, 119, 23], [60, 120, 11], [77, 121, 8], [40, 122, 4], [76, 123, 15], [72, 124, 11], [51, 125, 9], [65, 126, 8], [126, 127, 21], [81, 128, 20], [82, 129, 22], [129, 130, 7], [80, 131, 19], [100, 132, 11], [10, 133, 4], [121, 134, 7], [41, 135, 15], [105, 136, 7], [80, 137, 6], [10, 138, 23], [14, 139, 11], [16, 140, 6], [8, 141, 26], [132, 142, 6], [10, 143, 10], [57, 144, 11], [43, 145, 1], [92, 146, 25], [141, 147, 2], [141, 148, 10], [92, 149, 7], [1, 150, 19], [77, 151, 10], [16, 152, 21], [118, 153, 24], [55, 154, 18], [154, 155, 2], [145, 156, 17], [127, 157, 5], [76, 158, 20], [139, 159, 19], [102, 160, 2], [18, 161, 12], [5, 162, 17], [9, 163, 12], [74, 164, 8], [135, 165, 14], [102, 166, 13], [88, 167, 8], [76, 168, 26], [113, 169, 14], [169, 170, 17], [132, 171, 17], [100, 172, 9], [61, 173, 23], [96, 174, 6]], "queries": [[167, 111], [124, 12], [86, 9], [106, 129], [55, 59], [144, 14], [132, 60], [173, 84], [87, 112], [5, 174], [149, 79], [101, 106], [107, 6], [49, 125]]}, "output": [8, 7, 8, 6, 4, 7, 8, 6, 8, 6, 11, 13, 2, 6], "input_len": 2212, "line": 6772}
{"problem": "You are given an array heights of n integers representing the number of bricks in n consecutive towers. Your task is to remove some bricks to form a mountain-shaped tower arrangement. In this arrangement, the tower heights are non-decreasing, reaching a maximum peak value with one or multiple consecutive towers and then non-increasing.\nReturn the maximum possible sum of heights of a mountain-shaped tower arrangement.", "tags": ["Stack", "Array", "Monotonic Stack"], "input": {"maxHeights": [41566824, 161753, 91428264, 703002559, 4494547, 19, 298695, 52, 3520019, 4, 19, 7046, 754456, 1879, 212, 12, 143697, 31, 85, 60667, 4580484, 9570287, 380639, 2, 7116983, 607, 275180, 57130, 53163160]}, "output": 799249020, "input_len": 206, "line": 2615}
{"problem": "You are given a 0-indexed integer array nums and a positive integer k.\nYou can do the following operation on the array any number of times:\n\tChoose any two distinct indices i and j and simultaneously update the values of nums[i] to (nums[i] AND nums[j]) and nums[j] to (nums[i] OR nums[j]). Here, OR denotes the bitwise OR operation, and AND denotes the bitwise AND operation.\nYou have to choose k elements from the final array and calculate the sum of their squares.\nReturn the maximum sum of squares you can achieve.\nSince the answer can be very large, return it modulo 10^9 + 7.", "tags": ["Greedy", "Bit Manipulation", "Array", "Hash Table"], "input": {"nums": [959217550, 140214930, 504871247], "k": 2}, "output": 165087763, "input_len": 43, "line": 469}
{"problem": "Given a string s and an integer k, partition s into k substrings such that the letter changes needed to make each substring a semi-palindrome\u00a0are minimized.\nReturn the minimum number of letter changes required.\nA semi-palindrome is a special type of string that can be divided into palindromes based on a repeating pattern. To check if a string is a semi-palindrome:\u200b\n\tChoose a positive divisor d of the string's length. d can range from 1 up to, but not including, the string's length. For a string of length 1, it does not have a valid divisor as per this definition, since the only divisor is its length, which is not allowed.\n\tFor a given divisor d, divide the string into groups where each group contains characters from the string that follow a repeating pattern of length d. Specifically, the first group consists of characters at positions 1, 1 + d, 1 + 2d, and so on; the second group includes characters at positions 2, 2 + d, 2 + 2d, etc.\n\tThe string is considered a semi-palindrome if each of these groups forms a palindrome.\nConsider the string \"abcabc\":\n\tThe length of \"abcabc\" is 6. Valid divisors are 1, 2, and 3.\n\tFor d = 1: The entire string \"abcabc\" forms one group. Not a palindrome.\n\tFor d = 2:\n\t\tGroup 1 (positions 1, 3, 5): \"acb\"\n\t\tGroup 2 (positions 2, 4, 6): \"bac\"\n\t\tNeither group forms a palindrome.\n\tFor d = 3:\n\t\tGroup 1 (positions 1, 4): \"aa\"\n\t\tGroup 2 (positions 2, 5): \"bb\"\n\t\tGroup 3 (positions 3, 6): \"cc\"\n\t\tAll groups form palindromes. Therefore, \"abcabc\" is a semi-palindrome.", "tags": ["Two Pointers", "String", "DP"], "input": {"s": "shmprm", "k": 1}, "output": 2, "input_len": 15, "line": 507}
{"problem": "Given a string s and an integer k, partition s into k substrings such that the letter changes needed to make each substring a semi-palindrome\u00a0are minimized.\nReturn the minimum number of letter changes required.\nA semi-palindrome is a special type of string that can be divided into palindromes based on a repeating pattern. To check if a string is a semi-palindrome:\u200b\n\tChoose a positive divisor d of the string's length. d can range from 1 up to, but not including, the string's length. For a string of length 1, it does not have a valid divisor as per this definition, since the only divisor is its length, which is not allowed.\n\tFor a given divisor d, divide the string into groups where each group contains characters from the string that follow a repeating pattern of length d. Specifically, the first group consists of characters at positions 1, 1 + d, 1 + 2d, and so on; the second group includes characters at positions 2, 2 + d, 2 + 2d, etc.\n\tThe string is considered a semi-palindrome if each of these groups forms a palindrome.\nConsider the string \"abcabc\":\n\tThe length of \"abcabc\" is 6. Valid divisors are 1, 2, and 3.\n\tFor d = 1: The entire string \"abcabc\" forms one group. Not a palindrome.\n\tFor d = 2:\n\t\tGroup 1 (positions 1, 3, 5): \"acb\"\n\t\tGroup 2 (positions 2, 4, 6): \"bac\"\n\t\tNeither group forms a palindrome.\n\tFor d = 3:\n\t\tGroup 1 (positions 1, 4): \"aa\"\n\t\tGroup 2 (positions 2, 5): \"bb\"\n\t\tGroup 3 (positions 3, 6): \"cc\"\n\t\tAll groups form palindromes. Therefore, \"abcabc\" is a semi-palindrome.", "tags": ["Two Pointers", "String", "DP"], "input": {"s": "ezeyde", "k": 1}, "output": 2, "input_len": 15, "line": 504}
{"problem": "You are given two integers n and m which represent the size of a 1-indexed grid. You are also given an integer k, a 1-indexed integer array source and a 1-indexed integer array dest, where source and dest are in the form [x, y] representing a cell on the given grid.\nYou can move through the grid in the following way:\n\tYou can go from cell [x1, y1] to cell [x2, y2] if either x1 == x2 or y1 == y2.\n\tNote that you can't move to the cell you are already in e.g. x1 == x2 and y1 == y2.\nReturn the number of ways you can reach dest from source by moving through the grid exactly k times.\nSince the answer may be very large, return it modulo 10^9 + 7.", "tags": ["Math", "DP", "Combinatorics"], "input": {"n": 241, "m": 2268, "k": 217, "source": [101, 1671], "dest": [162, 1184]}, "output": 108697029, "input_len": 54, "line": 1309}
{"problem": "Each character of the English alphabet has been mapped to a digit as shown below.\nA string is divisible if the sum of the mapped values of its characters is divisible by its length.\nGiven a string s, return the number of divisible substrings of s.\nA substring is a contiguous non-empty sequence of characters within a string.", "tags": ["Hash Table", "String", "Counting", "Prefix Sum"], "input": {"word": "pkyevnhcrxakblbbtm"}, "output": 52, "input_len": 16, "line": 646}
{"problem": "You are given a 0-indexed string s, and a 2D array of integers queries, where queries[i] = [li, ri] indicates a substring of s starting from the index li and ending at the index ri (both inclusive), i.e. s[li..ri].\nReturn an array ans where ans[i] is the number of same-end substrings of queries[i].\nA 0-indexed string t of length n is called same-end if it has the same character at both of its ends, i.e., t[0] == t[n - 1].\nA substring is a contiguous non-empty sequence of characters within a string.", "tags": ["Array", "Hash Table", "String", "Counting", "Prefix Sum"], "input": {"s": "kazazrmelx", "queries": [[4, 9], [1, 9], [6, 8], [3, 9], [3, 7], [8, 8], [7, 9], [2, 6], [2, 3], [4, 4], [4, 4], [6, 8], [5, 5], [4, 8], [6, 9], [5, 5], [8, 8], [0, 6], [6, 8], [0, 8], [2, 3], [3, 5], [3, 8], [4, 8], [3, 3], [9, 9], [5, 5], [4, 8], [0, 3], [6, 6], [3, 6], [7, 7], [8, 8], [8, 8]]}, "output": [6, 11, 3, 7, 5, 1, 3, 6, 2, 1, 1, 3, 1, 5, 4, 1, 1, 9, 3, 11, 2, 3, 6, 5, 1, 1, 1, 5, 5, 1, 4, 1, 1, 1], "input_len": 220, "line": 1160}
{"problem": "There is a company with n branches across the country, some of which are connected by roads. Initially, all branches are reachable from each other by traveling some roads.\nThe company has realized that they are spending an excessive amount of time traveling between their branches. As a result, they have decided to close down some of these branches (possibly none). However, they want to ensure that the remaining branches have a distance of at most maxDistance from each other.\nThe distance between two branches is the minimum total traveled length needed to reach one branch from another.\nYou are given integers n, maxDistance, and a 0-indexed 2D array roads, where roads[i] = [ui, vi, wi] represents the undirected road between branches ui and vi with length wi.\nReturn the number of possible sets of closing branches, so that any branch has a distance of at most maxDistance from any other.\nNote that, after closing a branch, the company will no longer have access to any roads connected to it.\nNote that, multiple roads are allowed.", "tags": ["Bit Manipulation", "Graph", "Enumeration", "Shortest Path", "Heap"], "input": {"n": 2, "maxDistance": 9, "roads": [[1, 0, 646], [0, 1, 818], [1, 0, 394], [1, 0, 440], [1, 0, 531], [0, 1, 863], [1, 0, 97], [1, 0, 677], [0, 1, 546], [1, 0, 572], [1, 0, 219], [0, 1, 573], [0, 1, 777], [0, 1, 190], [0, 1, 399], [0, 1, 663], [1, 0, 230], [0, 1, 696], [0, 1, 415], [1, 0, 27], [1, 0, 160], [0, 1, 212], [0, 1, 208], [1, 0, 442], [0, 1, 511], [1, 0, 931], [0, 1, 63], [0, 1, 37], [0, 1, 802], [0, 1, 697], [1, 0, 864], [1, 0, 598], [1, 0, 240], [1, 0, 48], [1, 0, 900], [0, 1, 170], [1, 0, 488], [1, 0, 159], [0, 1, 563], [1, 0, 650], [0, 1, 814], [1, 0, 893], [1, 0, 231], [0, 1, 594], [1, 0, 989], [0, 1, 971], [1, 0, 211], [0, 1, 162], [1, 0, 37], [1, 0, 105], [0, 1, 615], [1, 0, 750], [1, 0, 481], [1, 0, 44], [0, 1, 707], [0, 1, 662], [1, 0, 767], [1, 0, 185], [1, 0, 64], [1, 0, 167], [1, 0, 892], [1, 0, 736], [1, 0, 312], [1, 0, 759], [0, 1, 462], [1, 0, 547], [0, 1, 770], [0, 1, 250], [0, 1, 69], [1, 0, 91], [0, 1, 656], [0, 1, 338], [1, 0, 912], [0, 1, 130], [0, 1, 334], [1, 0, 428], [1, 0, 87], [1, 0, 628], [0, 1, 528], [0, 1, 38], [0, 1, 125], [0, 1, 454], [1, 0, 578], [1, 0, 213], [0, 1, 142], [1, 0, 823], [0, 1, 818], [1, 0, 291], [0, 1, 819], [0, 1, 54], [1, 0, 665], [1, 0, 691], [0, 1, 317], [0, 1, 200], [0, 1, 383], [0, 1, 623], [1, 0, 647], [0, 1, 202], [0, 1, 991], [0, 1, 437], [1, 0, 343], [1, 0, 950], [1, 0, 959], [1, 0, 622], [1, 0, 675], [0, 1, 482], [0, 1, 564], [1, 0, 348], [0, 1, 57], [0, 1, 83], [0, 1, 847], [0, 1, 21], [1, 0, 305], [0, 1, 673], [1, 0, 935], [0, 1, 264], [0, 1, 865], [0, 1, 366], [0, 1, 163], [0, 1, 203], [1, 0, 915], [0, 1, 174], [0, 1, 855], [1, 0, 55], [0, 1, 714], [1, 0, 66], [1, 0, 939], [0, 1, 72], [0, 1, 76], [1, 0, 807], [0, 1, 973], [0, 1, 534], [1, 0, 969], [1, 0, 512], [0, 1, 191], [0, 1, 549], [0, 1, 274], [1, 0, 191], [1, 0, 185], [1, 0, 498], [0, 1, 572], [0, 1, 997], [1, 0, 627], [1, 0, 840], [0, 1, 564], [0, 1, 943], [0, 1, 411], [0, 1, 93], [1, 0, 970], [1, 0, 233], [0, 1, 423], [1, 0, 698], [1, 0, 146], [0, 1, 217], [0, 1, 219], [0, 1, 417], [0, 1, 601], [1, 0, 517], [1, 0, 464], [0, 1, 632], [1, 0, 306], [0, 1, 43], [0, 1, 653], [1, 0, 216], [1, 0, 585], [0, 1, 178], [1, 0, 183], [1, 0, 843], [1, 0, 376], [1, 0, 895], [0, 1, 844], [0, 1, 164], [1, 0, 315], [0, 1, 9], [0, 1, 816], [1, 0, 662], [1, 0, 297], [1, 0, 767], [0, 1, 238], [0, 1, 765], [1, 0, 964], [0, 1, 766], [0, 1, 966], [0, 1, 52], [0, 1, 482], [1, 0, 241], [1, 0, 890], [0, 1, 496], [1, 0, 950], [0, 1, 987], [0, 1, 616], [1, 0, 965], [0, 1, 434], [0, 1, 962], [0, 1, 982], [1, 0, 771], [0, 1, 449], [0, 1, 469], [0, 1, 93], [0, 1, 429], [0, 1, 938], [1, 0, 446], [0, 1, 233], [1, 0, 816], [0, 1, 528], [1, 0, 452], [0, 1, 659], [1, 0, 586], [0, 1, 841], [1, 0, 657], [1, 0, 340], [1, 0, 344], [1, 0, 93], [1, 0, 63], [0, 1, 899], [1, 0, 523], [1, 0, 991], [1, 0, 388], [0, 1, 47], [0, 1, 142], [0, 1, 391], [0, 1, 586], [0, 1, 468], [0, 1, 199], [0, 1, 749], [0, 1, 408], [1, 0, 418], [1, 0, 373], [1, 0, 807], [1, 0, 957], [0, 1, 225], [1, 0, 635], [0, 1, 862], [1, 0, 695], [1, 0, 824], [1, 0, 870], [1, 0, 408], [0, 1, 408], [1, 0, 416], [1, 0, 487], [0, 1, 5], [0, 1, 463], [0, 1, 8], [0, 1, 788], [0, 1, 751], [1, 0, 910], [0, 1, 436], [1, 0, 562], [0, 1, 723], [0, 1, 396], [0, 1, 217], [1, 0, 789], [1, 0, 650], [0, 1, 162], [1, 0, 530], [1, 0, 458], [1, 0, 983], [1, 0, 134], [0, 1, 350], [1, 0, 943], [0, 1, 724], [1, 0, 620], [0, 1, 788], [0, 1, 81], [1, 0, 464], [0, 1, 637], [1, 0, 749], [0, 1, 891], [1, 0, 429], [1, 0, 828], [0, 1, 276], [1, 0, 108], [1, 0, 513], [0, 1, 883], [0, 1, 705], [0, 1, 642], [1, 0, 840], [0, 1, 548], [0, 1, 629], [0, 1, 792], [1, 0, 695], [1, 0, 787], [1, 0, 926], [1, 0, 782], [1, 0, 570], [1, 0, 354], [0, 1, 418], [0, 1, 425], [1, 0, 739], [1, 0, 128], [1, 0, 89], [0, 1, 515], [1, 0, 450], [0, 1, 965], [1, 0, 429], [0, 1, 644], [1, 0, 728], [0, 1, 645], [0, 1, 158], [1, 0, 717], [0, 1, 348], [1, 0, 667], [0, 1, 180], [1, 0, 13], [1, 0, 627], [1, 0, 126], [1, 0, 100], [1, 0, 905], [1, 0, 587], [1, 0, 583], [0, 1, 809], [0, 1, 529], [1, 0, 864], [1, 0, 271], [0, 1, 42], [0, 1, 323], [0, 1, 490], [1, 0, 425], [1, 0, 81], [0, 1, 355], [1, 0, 708], [1, 0, 70], [1, 0, 645], [0, 1, 142], [0, 1, 563], [1, 0, 950], [0, 1, 600], [1, 0, 385], [1, 0, 523], [1, 0, 586], [0, 1, 373], [1, 0, 501], [0, 1, 280], [0, 1, 619], [1, 0, 508], [0, 1, 457], [1, 0, 436], [0, 1, 839], [1, 0, 271], [0, 1, 943], [0, 1, 98], [0, 1, 37], [1, 0, 623], [0, 1, 30], [1, 0, 546], [1, 0, 106], [0, 1, 605], [0, 1, 858], [1, 0, 370], [0, 1, 595], [0, 1, 461], [1, 0, 613], [1, 0, 251], [1, 0, 549], [1, 0, 543], [0, 1, 762], [1, 0, 74], [1, 0, 250], [0, 1, 645], [0, 1, 302], [1, 0, 180], [1, 0, 467], [1, 0, 381], [1, 0, 305], [1, 0, 75], [1, 0, 651], [1, 0, 805], [0, 1, 995], [0, 1, 450], [1, 0, 426], [0, 1, 970], [0, 1, 173], [0, 1, 591], [1, 0, 444], [1, 0, 310], [0, 1, 372], [0, 1, 795], [1, 0, 933], [1, 0, 824], [0, 1, 237], [1, 0, 809], [0, 1, 268], [0, 1, 232], [1, 0, 542], [1, 0, 201], [1, 0, 980], [0, 1, 365], [0, 1, 953], [1, 0, 944], [1, 0, 177], [0, 1, 69], [0, 1, 320], [1, 0, 458], [1, 0, 924], [0, 1, 999], [0, 1, 21], [1, 0, 767], [0, 1, 56], [0, 1, 208], [1, 0, 94], [1, 0, 814], [0, 1, 301], [1, 0, 442], [0, 1, 156], [1, 0, 880], [0, 1, 672], [1, 0, 596], [0, 1, 348], [1, 0, 871], [1, 0, 524], [0, 1, 616], [0, 1, 90], [1, 0, 520], [1, 0, 481], [1, 0, 507], [1, 0, 576], [1, 0, 833], [0, 1, 907], [0, 1, 552], [0, 1, 762], [0, 1, 144], [0, 1, 761], [0, 1, 842], [0, 1, 427], [1, 0, 528], [1, 0, 794], [1, 0, 573], [0, 1, 870], [1, 0, 405], [0, 1, 295], [0, 1, 593], [0, 1, 895], [1, 0, 908], [0, 1, 609], [0, 1, 43], [0, 1, 1000], [0, 1, 204], [1, 0, 81], [0, 1, 475], [0, 1, 739], [0, 1, 896], [1, 0, 738], [1, 0, 149], [1, 0, 555], [0, 1, 71], [1, 0, 796], [1, 0, 75], [0, 1, 985], [1, 0, 71], [0, 1, 45], [0, 1, 532], [0, 1, 220], [1, 0, 639], [1, 0, 678], [0, 1, 450], [0, 1, 36], [0, 1, 393], [0, 1, 681], [0, 1, 674], [1, 0, 584], [1, 0, 334], [1, 0, 357], [1, 0, 57], [1, 0, 66], [1, 0, 176], [0, 1, 530], [1, 0, 440], [0, 1, 361], [0, 1, 712], [0, 1, 538], [0, 1, 438], [1, 0, 912], [1, 0, 11], [0, 1, 119], [1, 0, 984], [1, 0, 28], [1, 0, 107], [1, 0, 603], [1, 0, 35], [0, 1, 686], [1, 0, 103], [0, 1, 925], [0, 1, 888], [0, 1, 91], [0, 1, 573], [0, 1, 647], [0, 1, 109], [0, 1, 72], [1, 0, 575], [0, 1, 411], [1, 0, 619], [0, 1, 546], [0, 1, 259], [0, 1, 449], [1, 0, 320], [1, 0, 813], [0, 1, 222], [0, 1, 445], [0, 1, 379], [0, 1, 544], [1, 0, 36], [1, 0, 743], [1, 0, 836], [1, 0, 509], [1, 0, 80], [1, 0, 18], [0, 1, 503], [0, 1, 249], [0, 1, 377], [1, 0, 770], [1, 0, 347], [0, 1, 30], [1, 0, 5], [1, 0, 508], [0, 1, 566], [1, 0, 365], [1, 0, 305], [0, 1, 684], [0, 1, 224], [1, 0, 648], [0, 1, 79], [1, 0, 75], [0, 1, 324], [0, 1, 492], [1, 0, 437], [0, 1, 77], [1, 0, 930], [0, 1, 998], [1, 0, 605], [1, 0, 702], [1, 0, 782], [1, 0, 365], [1, 0, 513], [0, 1, 893], [0, 1, 90], [0, 1, 310], [1, 0, 512], [0, 1, 285], [0, 1, 29]]}, "output": 4, "input_len": 5874, "line": 5640}
{"problem": "You are given a string s that consists of lowercase English letters.\nA string is called special if it is made up of only a single character. For example, the string \"abc\" is not special, whereas the strings \"ddd\", \"zz\", and \"f\" are special.\nReturn the length of the longest special substring of s which occurs at least thrice, or -1 if no special substring occurs at least thrice.\nA substring is a contiguous non-empty sequence of characters within a string.", "tags": ["Hash Table", "String", "Binary Search", "Counting", "Sliding Window"], "input": {"s": "ffryecgzgapcwbzz"}, "output": 1, "input_len": 14, "line": 335}
{"problem": "You are given three positive integers n, x, and y.\nIn a city, there exist houses numbered 1 to n connected by n streets. There is a street connecting the house numbered i with the house numbered i + 1 for all 1 <= i <= n - 1 . An additional street connects the house numbered x with the house numbered y.\nFor each k, such that 1 <= k <= n, you need to find the number of pairs of houses (house1, house2) such that the minimum number of streets that need to be traveled to reach house2 from house1 is k.\nReturn a 1-indexed array result of length n where result[k] represents the total number of pairs of houses such that the minimum streets required to reach one house from the other is k.\nNote that x and y can be equal.", "tags": ["BFS", "Graph", "Prefix Sum"], "input": {"n": 44, "x": 20, "y": 21}, "output": [86, 84, 82, 80, 78, 76, 74, 72, 70, 68, 66, 64, 62, 60, 58, 56, 54, 52, 50, 48, 46, 44, 42, 40, 38, 36, 34, 32, 30, 28, 26, 24, 22, 20, 18, 16, 14, 12, 10, 8, 6, 4, 2, 0], "input_len": 22, "line": 4824}
{"problem": "You are given three positive integers n, x, and y.\nIn a city, there exist houses numbered 1 to n connected by n streets. There is a street connecting the house numbered i with the house numbered i + 1 for all 1 <= i <= n - 1 . An additional street connects the house numbered x with the house numbered y.\nFor each k, such that 1 <= k <= n, you need to find the number of pairs of houses (house1, house2) such that the minimum number of streets that need to be traveled to reach house2 from house1 is k.\nReturn a 1-indexed array result of length n where result[k] represents the total number of pairs of houses such that the minimum streets required to reach one house from the other is k.\nNote that x and y can be equal.", "tags": ["Graph", "Prefix Sum"], "input": {"n": 1285, "x": 97, "y": 904}, "output": [2570, 2574, 2580, 2586, 2592, 2598, 2604, 2610, 2616, 2622, 2628, 2634, 2640, 2646, 2652, 2658, 2664, 2670, 2676, 2682, 2688, 2694, 2700, 2706, 2712, 2718, 2724, 2730, 2736, 2742, 2748, 2754, 2760, 2766, 2772, 2778, 2784, 2790, 2796, 2802, 2808, 2814, 2820, 2826, 2832, 2838, 2844, 2850, 2856, 2862, 2868, 2874, 2880, 2886, 2892, 2898, 2904, 2910, 2916, 2922, 2928, 2934, 2940, 2946, 2952, 2958, 2964, 2970, 2976, 2982, 2988, 2994, 3000, 3006, 3012, 3018, 3024, 3030, 3036, 3042, 3048, 3054, 3060, 3066, 3072, 3078, 3084, 3090, 3096, 3102, 3108, 3114, 3120, 3126, 3132, 3138, 3144, 3148, 3150, 3152, 3154, 3156, 3158, 3160, 3162, 3164, 3166, 3168, 3170, 3172, 3174, 3176, 3178, 3180, 3182, 3184, 3186, 3188, 3190, 3192, 3194, 3196, 3198, 3200, 3202, 3204, 3206, 3208, 3210, 3212, 3214, 3216, 3218, 3220, 3222, 3224, 3226, 3228, 3230, 3232, 3234, 3236, 3238, 3240, 3242, 3244, 3246, 3248, 3250, 3252, 3254, 3256, 3258, 3260, 3262, 3264, 3266, 3268, 3270, 3272, 3274, 3276, 3278, 3280, 3282, 3284, 3286, 3288, 3290, 3292, 3294, 3296, 3298, 3300, 3302, 3304, 3306, 3308, 3310, 3312, 3314, 3316, 3318, 3320, 3322, 3324, 3326, 3328, 3330, 3332, 3334, 3336, 3338, 3340, 3342, 3344, 3346, 3348, 3350, 3352, 3354, 3356, 3358, 3360, 3362, 3364, 3366, 3368, 3370, 3372, 3374, 3376, 3378, 3380, 3382, 3384, 3386, 3388, 3390, 3392, 3394, 3396, 3398, 3400, 3402, 3404, 3406, 3408, 3410, 3412, 3414, 3416, 3418, 3420, 3422, 3424, 3426, 3428, 3430, 3432, 3434, 3436, 3438, 3440, 3442, 3444, 3446, 3448, 3450, 3452, 3454, 3456, 3458, 3460, 3462, 3464, 3466, 3468, 3470, 3472, 3474, 3476, 3478, 3480, 3482, 3484, 3486, 3488, 3490, 3492, 3494, 3496, 3498, 3500, 3502, 3504, 3506, 3508, 3510, 3512, 3514, 3516, 3518, 3520, 3522, 3524, 3526, 3528, 3530, 3532, 3534, 3536, 3538, 3540, 3542, 3544, 3546, 3548, 3550, 3552, 3554, 3556, 3558, 3560, 3562, 3564, 3566, 3568, 3570, 3572, 3574, 3576, 3578, 3580, 3582, 3584, 3586, 3588, 3590, 3592, 3594, 3596, 3598, 3600, 3602, 3604, 3606, 3608, 3610, 3612, 3614, 3616, 3618, 3620, 3622, 3624, 3626, 3628, 3630, 3632, 3634, 3636, 3638, 3640, 3642, 3644, 3646, 3648, 3650, 3652, 3654, 3656, 3658, 3660, 3662, 3664, 3666, 3668, 3670, 3672, 3674, 3676, 3678, 3680, 3682, 3684, 3686, 3688, 3690, 3692, 3694, 3696, 3698, 3700, 3702, 3704, 3706, 3708, 3710, 3712, 3714, 3716, 3716, 3714, 3712, 3710, 3708, 3706, 3704, 3702, 3700, 3698, 3696, 3694, 3692, 3690, 3688, 3686, 3684, 3682, 3680, 3678, 3676, 2866, 2052, 2042, 2032, 2022, 2012, 2002, 1992, 1982, 1972, 1962, 1952, 1942, 1932, 1922, 1912, 1902, 1892, 1882, 1872, 1862, 1852, 1842, 1832, 1822, 1812, 1802, 1792, 1782, 1772, 1762, 1752, 1742, 1732, 1722, 1712, 1702, 1692, 1682, 1672, 1662, 1652, 1642, 1632, 1622, 1612, 1602, 1592, 1582, 1572, 1562, 1552, 1542, 1532, 1522, 1512, 1502, 1492, 1482, 1472, 1462, 1452, 1442, 1432, 1422, 1412, 1402, 1392, 1382, 1372, 1362, 1352, 1342, 1332, 1322, 1312, 1304, 1296, 1288, 1280, 1272, 1264, 1256, 1248, 1240, 1232, 1224, 1216, 1208, 1200, 1192, 1184, 1176, 1168, 1160, 1152, 1144, 1138, 1134, 1130, 1126, 1122, 1118, 1114, 1110, 1106, 1102, 1098, 1094, 1090, 1086, 1082, 1078, 1074, 1070, 1066, 1062, 1058, 1054, 1050, 1046, 1042, 1038, 1034, 1030, 1026, 1022, 1018, 1014, 1010, 1006, 1002, 998, 994, 990, 986, 982, 978, 974, 970, 966, 962, 958, 954, 950, 946, 942, 938, 934, 930, 926, 922, 918, 914, 910, 906, 902, 898, 894, 890, 886, 882, 878, 874, 870, 866, 862, 858, 854, 850, 846, 842, 838, 834, 830, 826, 822, 818, 814, 810, 806, 802, 798, 794, 790, 786, 782, 778, 774, 770, 766, 762, 758, 754, 750, 746, 742, 738, 734, 730, 726, 722, 718, 714, 710, 706, 702, 698, 694, 690, 686, 682, 678, 674, 670, 666, 662, 658, 654, 650, 646, 642, 638, 634, 630, 626, 622, 618, 614, 610, 606, 602, 598, 594, 590, 586, 582, 578, 574, 570, 566, 562, 558, 554, 550, 546, 542, 538, 534, 530, 526, 522, 518, 514, 510, 506, 502, 498, 494, 490, 486, 482, 478, 474, 470, 466, 462, 458, 454, 450, 446, 442, 438, 434, 430, 426, 422, 418, 414, 410, 406, 402, 398, 394, 390, 386, 382, 378, 374, 370, 366, 362, 358, 354, 350, 346, 342, 338, 334, 330, 326, 322, 318, 314, 310, 306, 302, 298, 294, 290, 286, 282, 278, 274, 270, 266, 262, 258, 254, 250, 246, 242, 238, 234, 230, 226, 222, 218, 214, 210, 206, 202, 198, 194, 190, 186, 182, 178, 174, 170, 166, 162, 158, 154, 150, 146, 142, 138, 134, 130, 126, 122, 118, 114, 110, 106, 102, 98, 94, 90, 86, 82, 78, 74, 70, 66, 62, 58, 54, 50, 46, 42, 38, 34, 30, 26, 22, 18, 14, 10, 6, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "input_len": 25, "line": 8852}
{"problem": "You are given three positive integers n, x, and y.\nIn a city, there exist houses numbered 1 to n connected by n streets. There is a street connecting the house numbered i with the house numbered i + 1 for all 1 <= i <= n - 1 . An additional street connects the house numbered x with the house numbered y.\nFor each k, such that 1 <= k <= n, you need to find the number of pairs of houses (house1, house2) such that the minimum number of streets that need to be traveled to reach house2 from house1 is k.\nReturn a 1-indexed array result of length n where result[k] represents the total number of pairs of houses such that the minimum streets required to reach one house from the other is k.\nNote that x and y can be equal.", "tags": ["BFS", "Graph", "Prefix Sum"], "input": {"n": 46, "x": 23, "y": 46}, "output": [92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 90, 66, 64, 62, 60, 58, 56, 54, 52, 50, 48, 46, 42, 38, 34, 30, 26, 22, 18, 14, 10, 6, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "input_len": 22, "line": 5273}
{"problem": "You are given three positive integers n, x, and y.\nIn a city, there exist houses numbered 1 to n connected by n streets. There is a street connecting the house numbered i with the house numbered i + 1 for all 1 <= i <= n - 1 . An additional street connects the house numbered x with the house numbered y.\nFor each k, such that 1 <= k <= n, you need to find the number of pairs of houses (house1, house2) such that the minimum number of streets that need to be traveled to reach house2 from house1 is k.\nReturn a 1-indexed array result of length n where result[k] represents the total number of pairs of houses such that the minimum streets required to reach one house from the other is k.\nNote that x and y can be equal.", "tags": ["BFS", "Graph", "Prefix Sum"], "input": {"n": 31, "x": 19, "y": 11}, "output": [62, 66, 72, 78, 66, 64, 62, 60, 58, 56, 54, 50, 44, 36, 26, 20, 14, 12, 10, 8, 6, 4, 2, 0, 0, 0, 0, 0, 0, 0, 0], "input_len": 22, "line": 2393}
{"problem": "You are given three positive integers n, x, and y.\nIn a city, there exist houses numbered 1 to n connected by n streets. There is a street connecting the house numbered i with the house numbered i + 1 for all 1 <= i <= n - 1 . An additional street connects the house numbered x with the house numbered y.\nFor each k, such that 1 <= k <= n, you need to find the number of pairs of houses (house1, house2) such that the minimum number of streets that need to be traveled to reach house2 from house1 is k.\nReturn a 1-indexed array result of length n where result[k] represents the total number of pairs of houses such that the minimum streets required to reach one house from the other is k.\nNote that x and y can be equal.", "tags": ["Graph", "Prefix Sum"], "input": {"n": 184, "x": 95, "y": 87}, "output": [368, 372, 378, 384, 372, 370, 368, 366, 364, 362, 360, 358, 356, 354, 352, 350, 348, 346, 344, 342, 340, 338, 336, 334, 332, 330, 328, 326, 324, 322, 320, 318, 316, 314, 312, 310, 308, 306, 304, 302, 300, 298, 296, 294, 292, 290, 288, 286, 284, 282, 280, 278, 276, 274, 272, 270, 268, 266, 264, 262, 260, 258, 256, 254, 252, 250, 248, 246, 244, 242, 240, 238, 236, 234, 232, 230, 228, 226, 224, 222, 220, 218, 216, 214, 212, 210, 208, 204, 198, 192, 184, 178, 172, 166, 164, 162, 160, 158, 156, 154, 152, 150, 148, 146, 144, 142, 140, 138, 136, 134, 132, 130, 128, 126, 124, 122, 120, 118, 116, 114, 112, 110, 108, 106, 104, 102, 100, 98, 96, 94, 92, 90, 88, 86, 84, 82, 80, 78, 76, 74, 72, 70, 68, 66, 64, 62, 60, 58, 56, 54, 52, 50, 48, 46, 44, 42, 40, 38, 36, 34, 32, 30, 28, 26, 24, 22, 20, 18, 16, 14, 12, 10, 8, 6, 4, 2, 0, 0, 0, 0, 0, 0, 0, 0], "input_len": 23, "line": 971}
{"problem": "You are given three positive integers n, x, and y.\nIn a city, there exist houses numbered 1 to n connected by n streets. There is a street connecting the house numbered i with the house numbered i + 1 for all 1 <= i <= n - 1 . An additional street connects the house numbered x with the house numbered y.\nFor each k, such that 1 <= k <= n, you need to find the number of pairs of houses (house1, house2) such that the minimum number of streets that need to be traveled to reach house2 from house1 is k.\nReturn a 1-indexed array result of length n where result[k] represents the total number of pairs of houses such that the minimum streets required to reach one house from the other is k.\nNote that x and y can be equal.", "tags": ["Graph", "Prefix Sum"], "input": {"n": 76, "x": 76, "y": 14}, "output": [152, 154, 156, 158, 160, 162, 164, 166, 168, 170, 172, 174, 176, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 52, 48, 44, 40, 36, 32, 28, 24, 20, 16, 12, 8, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "input_len": 22, "line": 383}
{"problem": "You are given three positive integers n, x, and y.\nIn a city, there exist houses numbered 1 to n connected by n streets. There is a street connecting the house numbered i with the house numbered i + 1 for all 1 <= i <= n - 1 . An additional street connects the house numbered x with the house numbered y.\nFor each k, such that 1 <= k <= n, you need to find the number of pairs of houses (house1, house2) such that the minimum number of streets that need to be traveled to reach house2 from house1 is k.\nReturn a 1-indexed array result of length n where result[k] represents the total number of pairs of houses such that the minimum streets required to reach one house from the other is k.\nNote that x and y can be equal.", "tags": ["Graph", "Prefix Sum"], "input": {"n": 166, "x": 61, "y": 1}, "output": [332, 334, 336, 338, 340, 342, 344, 346, 348, 350, 352, 354, 356, 358, 360, 362, 364, 366, 368, 370, 372, 374, 376, 378, 380, 382, 384, 386, 388, 390, 270, 268, 266, 264, 262, 260, 258, 256, 254, 252, 250, 248, 246, 244, 242, 240, 238, 236, 234, 232, 230, 228, 226, 224, 222, 220, 218, 216, 214, 212, 210, 208, 206, 204, 202, 200, 198, 196, 194, 192, 190, 188, 186, 184, 182, 180, 178, 176, 174, 172, 170, 168, 166, 164, 162, 160, 158, 156, 154, 152, 150, 148, 146, 144, 142, 140, 138, 136, 134, 132, 130, 128, 126, 124, 122, 120, 116, 112, 108, 104, 100, 96, 92, 88, 84, 80, 76, 72, 68, 64, 60, 56, 52, 48, 44, 40, 36, 32, 28, 24, 20, 16, 12, 8, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "input_len": 22, "line": 883}
{"problem": "You are given three positive integers n, x, and y.\nIn a city, there exist houses numbered 1 to n connected by n streets. There is a street connecting the house numbered i with the house numbered i + 1 for all 1 <= i <= n - 1 . An additional street connects the house numbered x with the house numbered y.\nFor each k, such that 1 <= k <= n, you need to find the number of pairs of houses (house1, house2) such that the minimum number of streets that need to be traveled to reach house2 from house1 is k.\nReturn a 1-indexed array result of length n where result[k] represents the total number of pairs of houses such that the minimum streets required to reach one house from the other is k.\nNote that x and y can be equal.", "tags": ["BFS", "Graph", "Prefix Sum"], "input": {"n": 47, "x": 32, "y": 3}, "output": [94, 98, 104, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 128, 100, 68, 60, 52, 46, 42, 38, 34, 30, 26, 22, 18, 14, 10, 6, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "input_len": 21, "line": 5505}
{"problem": "You are given three positive integers n, x, and y.\nIn a city, there exist houses numbered 1 to n connected by n streets. There is a street connecting the house numbered i with the house numbered i + 1 for all 1 <= i <= n - 1 . An additional street connects the house numbered x with the house numbered y.\nFor each k, such that 1 <= k <= n, you need to find the number of pairs of houses (house1, house2) such that the minimum number of streets that need to be traveled to reach house2 from house1 is k.\nReturn a 1-indexed array result of length n where result[k] represents the total number of pairs of houses such that the minimum streets required to reach one house from the other is k.\nNote that x and y can be equal.", "tags": ["BFS", "Graph", "Prefix Sum"], "input": {"n": 40, "x": 14, "y": 22}, "output": [80, 84, 90, 96, 84, 82, 80, 78, 76, 74, 72, 70, 68, 66, 62, 56, 50, 44, 42, 38, 32, 26, 20, 18, 16, 14, 12, 10, 8, 6, 4, 2, 0, 0, 0, 0, 0, 0, 0, 0], "input_len": 22, "line": 3986}
{"problem": "You are given a 0-indexed array nums and a 0-indexed array queries.\nYou can do the following operation at the beginning at most once:\n\tReplace nums with a subsequence of nums.\nWe start processing queries in the given order; for each query, we do the following:\n\tIf the first and the last element of nums is less than queries[i], the processing of queries ends.\n\tOtherwise, we choose either the first or the last element of nums if it is greater than or equal to queries[i], and we remove the chosen element from nums.\nReturn the maximum number of queries that can be processed by doing the operation optimally.", "tags": ["Array", "DP"], "input": {"nums": [171720194, 502829261, 258855004, 827912872, 781227411, 354609829, 386691709, 10457356, 67551049, 661004253, 472408635, 782898999, 486654421, 493781087, 139429831, 507550717, 562860735, 991882857, 382413270, 198704643, 147467464, 917374689, 200978014, 889350125, 188993155, 439203366, 5906590, 669616567, 98198853, 220244775, 12613813, 252309116, 199777766, 618167848, 405421941, 192090898, 141113189, 270080437, 83594281, 728292372, 568076533, 98667549, 779436917, 544203913, 366818972, 239064089, 264389129, 462716320, 206924347, 702201238, 631600105, 584897518, 879982635, 961658479, 391748072, 662403805, 672595368, 822065074, 707008123, 8246792, 718858737, 368322155, 587942533, 300865478, 537130565, 957893561, 583822464, 375866111, 331275742, 827988573, 130942790, 120565189, 312946627, 438074160, 919929133, 73984505, 278795517, 154662344, 375745329, 813941803, 97569594, 854774778, 6982432, 629061125, 6714615, 812076725, 61389096, 234297460, 206550282, 121234887, 527356521, 952100897, 765475610, 945942311, 260492073, 88159557, 501247556, 489464517, 559895022, 1062409, 645417401, 602234776, 794771276, 247824864, 190844439, 611848762, 61463892, 967154499, 173067503, 734900997, 347984086, 723316815, 199147397, 366664997, 20130724, 578829038, 743357107, 488408507, 665245013, 30395216, 703138489, 238661026, 384421124, 58079654, 796548318, 859652297, 88150600, 615934689, 389306310, 711558768, 904729577, 648715214, 164807624, 659474875, 866881715, 115465821, 258237858, 202283733, 614188541, 483906948, 134181482, 607179640, 445770398, 727859336, 658532441, 982972926, 826332566, 410948351, 6126603, 643939552, 188906275, 528945855, 467874656, 122305888, 443018382, 769326273, 249858506, 444036588, 931347234, 772682386, 198865007, 495781785, 889103246, 235984478, 276514159, 764709251, 533331058, 55233016, 628982419, 199382362, 606847093, 754217642, 95465163, 930640504, 550431062, 978141931, 774399957, 18446329, 969902929, 437005954, 193123346, 809725886, 914389991, 710851837, 795412182, 998557631, 769613615, 992808077, 429092031, 746405930, 292232996, 627501646, 278186127, 114617990, 327726291, 541633719, 106761948, 673914852, 795591781, 75948195, 523608291, 652493040, 553960163, 846260517, 25284979, 799531917, 154108294, 23747259, 819689104, 836600904, 823022998, 160771548, 743458336, 802058689, 956820124, 882603440, 750577057, 873280358, 99645846, 715760812, 42947789, 746425253, 578866759, 343454447, 800429029, 947701439, 737188329, 142161877, 3771418, 971153475, 49500584, 905791367, 816536330, 947167718, 790896961, 778011711, 392013020, 986799580, 548483692, 614989185, 843124307, 813550773, 942180861, 529080674, 267415762, 439927941, 272071911, 524668657, 939758214, 286504640, 350361495, 653505796, 424393566, 895328311, 969351861, 231552718, 704035174, 735682503, 291416390, 267820171, 473747555, 59707318, 330618354, 762669160, 570295308, 595550899, 124710844, 384013959, 805144610, 351395079, 966865894, 17343657, 392535714, 588202893, 247211406, 839102879, 157299979, 678847179, 918577162, 392746750, 324091005, 525189062, 971648091, 107787014, 974373294, 344188867, 58620388, 28231727, 717187736, 925529359, 130985497, 805978735, 635900215, 705636568, 186637811, 50222239, 918765920, 326576605, 50845509, 404639876, 950117571, 227307653, 482093774, 270568770, 96235125, 342840091, 311097478, 547970632, 746352249, 887405388, 536392457, 601669190, 147632636, 333670703, 772960973, 719646672, 403055063, 174080122, 563819168, 904278949, 627075414, 211019275, 118872509, 156894280, 150159526, 37500153, 540048550, 41477569, 215769543, 183121599, 854871399, 279931629, 286971929, 64363087, 53285964, 6448180, 643369660, 419633316, 558520501, 766850980, 245724088, 790672923, 821072125, 18223664, 312784720, 631130140, 56883355, 689207401, 644171271, 77149589, 245354498, 610681218, 283251031, 16118817, 244672967, 846347679, 709604347, 801918194, 255721745, 420593603, 594987066, 60244534, 221922093, 357481637, 397270402, 516120198, 458786857, 613331080, 839248297, 482931478, 312907116, 541415791, 156483461, 677095789, 476777557, 81376427, 462444905, 265497545, 522274808, 939955241, 529786886, 893047461, 97992661, 193931858, 578605573, 132993581, 773992075, 913437108, 904564330, 983655572, 662407622, 922531767, 265304119, 390560064, 434738685, 104482587, 351993258, 42844625, 847512586, 577825110, 197536104, 56657713, 968859982, 694075999, 633763711, 215523153, 272491786, 433783976, 53182729, 705766295, 613435183, 651835689, 254279214, 142522719, 758756944, 868253892, 185829408, 135937743, 50834382, 547164978, 464158023, 295587367, 545968961, 380985030, 10601379, 63266541, 208103170, 214343286, 274390670, 29408573, 621101336, 654217918, 315052047, 586815986, 107542301, 592330507, 702407962, 505281548, 354580329, 2110195, 853694939, 753983376, 412542747, 241076326, 550313546, 488237218, 323739971, 175231280, 286232148, 239636087, 327517989, 235373295, 27775297, 108915761, 879549838, 977674354, 10698991, 586941636, 580870952, 564480662, 244914773, 382435078, 913169843, 323426172, 9863901, 391454600, 531175410, 214681541, 78739707, 208730358, 520790702, 920538983, 74011358, 217110523, 78876469, 968283369, 291075570, 577855869, 769193669, 276932507, 505146666, 780337014, 754098891, 749172117, 536797163, 968182243, 364521840, 244102836, 666062489, 409575003, 524373515, 502004834, 77260501, 957248372, 353817871, 551620880, 113692401, 292911962, 188281920, 261339626, 103013225, 678676969, 432313223, 745258722, 788411782, 43931912, 69465355, 816708100, 895766944, 72645751, 767017995, 31220802, 258401223, 884693037, 954142317, 858153254, 592299962, 980842748, 199654609, 659366248, 718084563, 57729400, 203575861, 591386818, 36376648, 740048463, 892751658, 667277879, 670798287, 734070765, 915691664, 837028660, 28648338, 688983388, 236248371, 543016192, 5093585, 677614452, 133795758, 22264956, 807720402, 952251855, 352988749, 760157833, 766177413, 921506395, 297399290, 24415331, 453228279, 13663780, 430889279, 555650343, 568331314, 286063936, 117032626, 259036093, 48938957, 380229883, 280055017, 562741825, 462110376, 67489604, 654898548, 579094741, 736408885, 522695154, 82007299, 775681062, 21716872, 172336776, 887826608, 312657920, 796680379, 320897566, 944009848, 474489126, 976386203, 64303451, 951876140, 691004604, 994205568, 596576032, 805258563, 785645274, 671524035, 455075768, 720786615, 584136732, 582542101, 533716479, 144696736, 214843921, 775329688, 236903761, 315146746, 566734185, 923260073, 872151146, 143504308, 999668407, 200949893, 116622850, 367606226, 217833546, 579154894, 60484219, 49007035, 261434585, 293052518, 740652032, 90534621, 618152440, 575214644, 836688549, 590804872, 634698681, 76537225, 394486713, 229939481, 404575982, 211599522, 386749721, 215543710, 749430998, 771998411, 609141896, 286427142, 934963493, 361405680, 851513153, 158403381, 359878650, 103457555, 318290058, 937912319, 966502368, 851446654, 57929970, 736479467, 670291026, 346952859, 586373785, 547647382, 222993548, 658950771, 53837086, 583719123, 846420236, 759697933, 696891427, 500999172, 108096587, 926970350, 956636377, 151632318, 510648189, 657043009, 406483543, 693751410, 879940305, 747950493, 280787101, 844051677, 303093898, 630980613, 342254196, 312450699, 350312054, 104750540, 5613337, 107271451, 569480053, 63281558, 187216852, 822930697, 798897861, 682801331, 607167061, 78177951, 809172733, 658669813, 534007392, 769136185, 974993445, 125830607, 122857216, 237769980, 96462231, 963394989, 598466624, 713136316, 531842544, 577664172, 346501798, 226319064, 871114212, 458569140, 680634446, 341555642, 510788271, 586140699, 940723963, 926078219, 512713236, 503187685, 96039656, 93561607, 992581836, 884234737, 210454226, 384313630, 857088140, 335106980, 169044697, 465685627, 453358075, 627216994, 863075492, 182144434, 948312427, 948378854, 674347630, 544782838, 908522896, 345111010, 783521512, 307793364, 954940771, 651333091, 990794021, 658822455, 999797334], "queries": [998972973, 36438615, 252428746, 766658725, 921868916, 387124173, 446645557, 551200079, 462957559, 534176839, 340469251, 852165606, 802836442, 427606295, 806426306, 168847631, 736778864, 890781582, 790636517, 387519726, 569371398, 103072068, 911543965, 513398738, 676456027, 373998560, 563040928, 116083753, 309716588, 700589386, 7362865, 689491875, 643993448, 162910564, 819538799, 570241278, 820147036, 664483078, 455013473, 563740335, 647745275, 319252442, 471046211, 808129709, 730619682, 716055672, 868327598, 296090744, 12331709, 849723241, 300608081, 73183379, 226674931, 523287828, 986214255, 218232539, 830010182, 290237499, 269953260, 900615543, 629005489, 624823573, 6206354]}, "output": 63, "input_len": 8640, "line": 4300}
{"problem": "You are given a 0-indexed array nums and a 0-indexed array queries.\nYou can do the following operation at the beginning at most once:\n\tReplace nums with a subsequence of nums.\nWe start processing queries in the given order; for each query, we do the following:\n\tIf the first and the last element of nums is less than queries[i], the processing of queries ends.\n\tOtherwise, we choose either the first or the last element of nums if it is greater than or equal to queries[i], and we remove the chosen element from nums.\nReturn the maximum number of queries that can be processed by doing the operation optimally.", "tags": ["Array", "DP"], "input": {"nums": [526616568, 897719844, 99946827, 604160651, 368498562, 502450412, 317316710, 285313302, 372177532, 74272126, 422540951, 14501689, 942964876], "queries": [764048184, 624781998, 883884325, 62462142, 902445614]}, "output": 2, "input_len": 201, "line": 893}
{"problem": "You are given a 0-indexed integer array nums and an integer k.\nIn one operation, you can pick any index i of nums such that 0 <= i < nums.length - 1 and replace nums[i] and nums[i + 1] with a single occurrence of nums[i] & nums[i + 1], where & represents the bitwise AND operator.\nReturn the minimum possible value of the bitwise OR of the remaining elements of nums after applying at most k operations.", "tags": ["Greedy", "Bit Manipulation", "Array"], "input": {"nums": [1069412174, 787201751, 278033004, 947670618, 1061576778, 1028407371, 720438845, 18990236], "k": 6}, "output": 72, "input_len": 100, "line": 1358}
{"problem": "You are given a string s. s[i] is either a lowercase English letter or '?'.\nFor a string t having length m containing only lowercase English letters, we define the function cost(i) for an index i\u00a0as the number of characters equal to t[i]\u00a0that appeared before it, i.e. in the range [0, i - 1].\nThe value of t is the sum of cost(i) for all indices i.\nFor example, for the string t = \"aab\":\n\tcost(0) = 0\n\tcost(1) = 1\n\tcost(2) = 0\n\tHence, the value of \"aab\" is 0 + 1 + 0 = 1.\nYour task is to replace all occurrences of '?' in s with any lowercase English letter so that the value of s is minimized.\nReturn a string denoting the modified string with replaced occurrences of '?'. If there are multiple strings resulting in the minimum value, return the lexicographically smallest one.", "tags": ["Greedy", "Hash Table", "String", "Counting", "Sorting", "Heap"], "input": {"s": "s?????e?????u?igl?pud???tzmgdwl??a?"}, "output": "sabbcceeffhjukiglnpudoqrtzmgdwlvxay", "input_len": 26, "line": 237}
{"problem": "You are given a binary array nums of length n, a positive integer k and a non-negative integer maxChanges.\nAlice plays a game, where the goal is for Alice to pick up k ones from nums using the minimum number of moves. When the game starts, Alice picks up any index aliceIndex in the range [0, n - 1] and stands there. If nums[aliceIndex] == 1 , Alice picks up the one and nums[aliceIndex] becomes 0(this does not count as a move). After this, Alice can make any number of moves (including zero) where in each move Alice must perform exactly one of the following actions:\n\tSelect any index j != aliceIndex such that nums[j] == 0 and set nums[j] = 1. This action can be performed at most maxChanges times.\n\tSelect any two adjacent indices x and y (|x - y| == 1) such that nums[x] == 1, nums[y] == 0, then swap their values (set nums[y] = 1 and nums[x] = 0). If y == aliceIndex, Alice picks up the one after this move and nums[y] becomes 0.\nReturn the minimum number of moves required by Alice to pick exactly k ones.", "tags": ["Greedy", "Array", "Prefix Sum", "Sliding Window"], "input": {"nums": [1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0], "k": 16775, "maxChanges": 90049}, "output": 33546, "input_len": 58, "line": 234}
{"problem": "You are given a positive integer k. Initially, you have an array nums = [1].\nYou can perform any of the following operations on the array any number of times (possibly zero):\n\tChoose any element in the array and increase its value by 1.\n\tDuplicate any element in the array and add it to the end of the array.\nReturn the minimum number of operations required to make the sum of elements of the final array greater than or equal to k.", "tags": ["Greedy", "Math", "Enumeration"], "input": {"k": 517}, "output": 44, "input_len": 9, "line": 2073}
{"problem": "You are given an array nums of non-negative integers and an integer k.\nAn array is called special if the bitwise OR of all of its elements is at least k.\nReturn the length of the shortest special non-empty subarray of nums, or return -1 if no special subarray exists.", "tags": ["Bit Manipulation", "Array", "Sliding Window"], "input": {"nums": [10, 27, 26, 34, 21, 48, 22], "k": 28}, "output": 1, "input_len": 39, "line": 958}
{"problem": "You are given an integer array nums of length n, and a positive integer k.\nThe power of a subsequence is defined as the minimum absolute difference between any two elements in the subsequence.\nReturn the sum of powers of all subsequences of nums which have length equal to k.\nSince the answer may be large, return it modulo 109 + 7.", "tags": ["Array", "DP", "Sorting"], "input": {"nums": [35959572, 81747247, -36890135, -97453270, -53440267, 17229711, -20280450, 84983166], "k": 7}, "output": 52515778, "input_len": 90, "line": 323}
{"problem": "You are given an integer array nums of length n, and a positive integer k.\nThe power of a subsequence is defined as the minimum absolute difference between any two elements in the subsequence.\nReturn the sum of powers of all subsequences of nums which have length equal to k.\nSince the answer may be large, return it modulo 109 + 7.", "tags": ["Array", "DP", "Sorting"], "input": {"nums": [6255581, 89308019, 87672907, 4506339], "k": 3}, "output": 6768708, "input_len": 48, "line": 136}
{"problem": "You are given a string road, consisting only of characters \"x\" and \".\", where each \"x\" denotes a pothole and each \".\" denotes a smooth road, and an integer budget.\nIn one repair operation, you can repair n consecutive potholes for a price of n + 1.\nReturn the maximum number of potholes that can be fixed such that the sum of the prices of all of the fixes doesn't go over the given budget.", "tags": ["Greedy", "String", "Sorting"], "input": {"road": ".x.xxx.x.xx...xx..xx.xx.x.xx.xxxx..xxxxxxx......xxxxx..xx...xxxx..xxx.xxxxxx..xx.", "budget": 734}, "output": 49, "input_len": 44, "line": 561}
{"problem": "You are given a 2D matrix grid of size m x n. In one operation, you can change the value of any cell to any non-negative number. You need to perform some operations such that each cell grid[i][j] is:\n\tEqual to the cell below it, i.e. grid[i][j] == grid[i + 1][j] (if it exists).\n\tDifferent from the cell to its right, i.e. grid[i][j] != grid[i][j + 1] (if it exists).\nReturn the minimum number of operations needed.", "tags": ["Array", "DP", "Matrix"], "input": {"grid": [[4, 2, 8], [3, 1, 7], [8, 7, 7], [0, 4, 7], [3, 3, 0], [2, 9, 1], [5, 3, 8]]}, "output": 15, "input_len": 68, "line": 707}
{"problem": "You are given a 2D matrix grid of size m x n. In one operation, you can change the value of any cell to any non-negative number. You need to perform some operations such that each cell grid[i][j] is:\n\tEqual to the cell below it, i.e. grid[i][j] == grid[i + 1][j] (if it exists).\n\tDifferent from the cell to its right, i.e. grid[i][j] != grid[i][j + 1] (if it exists).\nReturn the minimum number of operations needed.", "tags": ["Array", "DP", "Matrix"], "input": {"grid": [[4, 9, 8, 7, 8, 3], [5, 8, 1, 6, 0, 8], [1, 0, 3, 5, 1, 3], [7, 3, 3, 7, 5, 4], [0, 0, 1, 0, 3, 1], [5, 4, 2, 1, 4, 6], [8, 2, 1, 8, 2, 5], [0, 3, 2, 8, 7, 4], [3, 9, 6, 0, 6, 2], [5, 5, 2, 6, 8, 2], [8, 8, 8, 4, 6, 6], [4, 3, 7, 6, 8, 0], [8, 7, 5, 4, 5, 2], [7, 4, 2, 1, 8, 7], [2, 0, 3, 2, 6, 3], [8, 2, 3, 9, 3, 6], [8, 8, 0, 3, 5, 9], [0, 6, 7, 7, 0, 9], [4, 3, 8, 7, 4, 8], [4, 4, 7, 4, 8, 3], [8, 3, 0, 0, 5, 1], [0, 6, 3, 0, 4, 8], [6, 9, 6, 3, 5, 7], [6, 5, 0, 7, 8, 2], [8, 0, 2, 5, 7, 5], [8, 0, 2, 5, 8, 0], [1, 9, 1, 3, 5, 3], [6, 6, 2, 2, 4, 8], [3, 2, 9, 1, 4, 4], [0, 0, 1, 6, 9, 9], [0, 7, 9, 6, 2, 7], [2, 9, 5, 7, 0, 2], [2, 0, 9, 1, 4, 2], [2, 6, 0, 7, 9, 6], [0, 1, 4, 9, 9, 4], [0, 3, 6, 4, 0, 1], [3, 8, 3, 7, 0, 1], [6, 0, 7, 6, 2, 6], [2, 3, 6, 6, 7, 5], [7, 0, 1, 7, 2, 5], [5, 7, 1, 5, 4, 1], [3, 8, 5, 4, 9, 9], [0, 8, 3, 9, 7, 3], [0, 7, 3, 8, 4, 8], [7, 9, 4, 1, 6, 0], [4, 4, 4, 4, 8, 8], [7, 6, 4, 3, 0, 1], [3, 8, 6, 9, 9, 7], [0, 6, 9, 6, 1, 4], [7, 0, 8, 5, 6, 2], [6, 2, 6, 2, 9, 0], [7, 1, 0, 2, 3, 4], [2, 0, 2, 6, 2, 8], [1, 9, 7, 2, 5, 7], [4, 2, 6, 5, 5, 4], [6, 9, 4, 4, 3, 0], [6, 9, 8, 7, 9, 5], [6, 4, 8, 1, 6, 8], [0, 6, 1, 3, 4, 4], [8, 1, 3, 2, 2, 7], [7, 7, 9, 7, 0, 8], [6, 9, 1, 8, 5, 3], [6, 9, 2, 6, 2, 2], [6, 4, 7, 3, 9, 0], [9, 9, 0, 5, 4, 0], [0, 2, 1, 4, 1, 9], [1, 4, 1, 0, 9, 2], [0, 0, 9, 1, 5, 2], [3, 6, 7, 3, 8, 3], [8, 4, 0, 7, 2, 2], [8, 8, 5, 7, 6, 1], [6, 3, 4, 6, 0, 0], [1, 4, 3, 2, 8, 3], [5, 2, 4, 6, 6, 6], [6, 6, 5, 3, 4, 6], [3, 9, 8, 6, 9, 2], [4, 7, 5, 1, 1, 0], [2, 3, 7, 1, 4, 5], [0, 9, 3, 0, 3, 7], [8, 2, 2, 0, 5, 4], [0, 5, 2, 6, 0, 9], [8, 8, 3, 3, 5, 1], [7, 8, 1, 8, 7, 3], [0, 6, 6, 0, 8, 7], [9, 9, 4, 8, 1, 2], [3, 8, 8, 2, 9, 9], [3, 3, 1, 1, 2, 5], [4, 5, 0, 1, 6, 8], [7, 8, 0, 3, 5, 0], [0, 2, 0, 3, 5, 4], [2, 7, 6, 5, 4, 2], [5, 1, 2, 0, 9, 2], [8, 9, 8, 7, 6, 1], [9, 4, 2, 7, 6, 0], [9, 0, 0, 9, 6, 6], [2, 1, 0, 6, 9, 7], [9, 6, 0, 3, 7, 9], [0, 5, 0, 8, 2, 9], [6, 7, 3, 7, 7, 4], [5, 9, 7, 5, 8, 3], [4, 6, 1, 3, 7, 0], [1, 6, 8, 3, 6, 7], [5, 0, 4, 9, 7, 6], [6, 9, 8, 5, 3, 0], [8, 5, 4, 6, 5, 9], [7, 7, 5, 3, 4, 1], [3, 2, 7, 8, 4, 7], [5, 9, 1, 2, 6, 8], [6, 4, 5, 5, 3, 5], [8, 3, 2, 0, 7, 5], [7, 0, 5, 4, 6, 5], [9, 0, 4, 3, 9, 5], [0, 6, 3, 9, 9, 6], [1, 5, 0, 3, 8, 4], [4, 7, 8, 2, 8, 7], [6, 1, 3, 4, 2, 4], [0, 5, 5, 2, 8, 0], [1, 5, 1, 8, 8, 8], [1, 0, 5, 0, 1, 8], [2, 5, 4, 1, 3, 5], [0, 9, 4, 9, 5, 0], [8, 4, 2, 3, 1, 6], [4, 8, 8, 6, 7, 4], [1, 7, 1, 7, 1, 4], [1, 7, 6, 4, 9, 8], [2, 1, 3, 3, 4, 7], [5, 5, 5, 1, 5, 9], [4, 4, 4, 0, 9, 4], [1, 3, 3, 9, 1, 2], [1, 5, 9, 5, 3, 7], [8, 2, 9, 7, 8, 9], [9, 4, 7, 2, 1, 8], [0, 0, 3, 9, 7, 2], [2, 3, 5, 5, 5, 6], [9, 7, 5, 5, 8, 7], [2, 6, 1, 0, 3, 4], [3, 0, 2, 1, 4, 9], [2, 5, 8, 0, 1, 8], [5, 5, 0, 8, 9, 5], [1, 9, 3, 4, 1, 2], [3, 8, 6, 0, 5, 3], [0, 9, 3, 8, 1, 7], [4, 0, 0, 0, 2, 4], [5, 1, 4, 6, 6, 2], [1, 6, 6, 7, 7, 5], [8, 5, 2, 0, 9, 3], [2, 4, 3, 3, 8, 8], [3, 9, 8, 4, 6, 0], [1, 0, 8, 6, 0, 0], [7, 7, 1, 7, 8, 1], [3, 3, 3, 8, 1, 0], [9, 2, 8, 5, 0, 1], [3, 4, 0, 8, 3, 3], [8, 2, 0, 9, 1, 4], [9, 7, 0, 4, 5, 1], [1, 5, 0, 8, 7, 2], [2, 7, 1, 7, 6, 0], [2, 2, 2, 9, 0, 2], [6, 4, 0, 0, 8, 8], [4, 2, 2, 4, 9, 7], [1, 8, 9, 5, 6, 1], [2, 9, 2, 0, 7, 5], [1, 0, 8, 6, 6, 4], [9, 2, 8, 3, 9, 9], [6, 2, 8, 8, 6, 4], [1, 7, 2, 3, 6, 7], [6, 5, 0, 3, 5, 0], [7, 4, 6, 5, 1, 9], [5, 3, 3, 5, 3, 2], [1, 6, 6, 4, 8, 9], [9, 1, 6, 5, 8, 9], [5, 4, 0, 1, 5, 7], [8, 6, 9, 3, 8, 6], [4, 1, 9, 2, 9, 7], [9, 5, 5, 3, 7, 3], [0, 6, 8, 3, 5, 8], [5, 3, 4, 3, 4, 0], [9, 2, 5, 5, 1, 8], [6, 0, 3, 7, 3, 7], [3, 1, 1, 6, 9, 8], [9, 5, 7, 9, 8, 1], [6, 6, 3, 4, 1, 3], [8, 5, 8, 6, 3, 9], [7, 2, 8, 9, 1, 4], [8, 6, 1, 6, 1, 7], [9, 9, 4, 7, 3, 7], [2, 3, 3, 7, 5, 0], [6, 8, 0, 7, 9, 6], [1, 7, 7, 6, 0, 5], [2, 7, 6, 4, 2, 8], [6, 3, 8, 6, 4, 8], [0, 7, 7, 3, 0, 2], [5, 8, 4, 1, 1, 6], [1, 8, 8, 7, 5, 8], [4, 9, 4, 0, 6, 9], [4, 1, 4, 2, 0, 8], [3, 5, 0, 7, 2, 0], [6, 9, 9, 1, 9, 7], [7, 7, 8, 1, 5, 3], [0, 2, 3, 7, 1, 1], [6, 6, 8, 3, 1, 6], [3, 4, 0, 7, 6, 1], [6, 0, 1, 9, 9, 1], [4, 7, 3, 8, 2, 2], [7, 4, 7, 4, 8, 6], [1, 3, 3, 9, 0, 6], [9, 1, 9, 0, 7, 5], [0, 1, 3, 7, 7, 8], [0, 5, 0, 6, 0, 9], [9, 8, 9, 7, 1, 7], [8, 9, 0, 0, 5, 0], [4, 9, 2, 8, 7, 5], [6, 9, 1, 3, 5, 8], [2, 1, 4, 4, 3, 5], [6, 6, 1, 1, 9, 4], [1, 2, 3, 1, 8, 4], [9, 7, 5, 0, 8, 1], [1, 6, 8, 4, 4, 6], [0, 6, 9, 4, 9, 6], [0, 2, 2, 3, 0, 8], [0, 4, 5, 5, 5, 7], [7, 9, 4, 3, 2, 0], [4, 7, 9, 4, 6, 6], [3, 9, 2, 3, 3, 8], [9, 9, 5, 4, 9, 2], [9, 2, 1, 7, 9, 2], [7, 3, 4, 2, 7, 7], [9, 9, 7, 8, 7, 0], [7, 1, 5, 5, 8, 5], [0, 5, 0, 4, 5, 7], [1, 2, 6, 9, 0, 8], [8, 3, 8, 3, 5, 5], [4, 1, 4, 9, 7, 1], [4, 9, 3, 3, 8, 1], [1, 7, 6, 3, 4, 8], [5, 8, 8, 3, 6, 3], [0, 8, 9, 7, 1, 0], [5, 1, 3, 3, 0, 3], [8, 1, 6, 3, 6, 2], [4, 4, 5, 6, 1, 5], [9, 6, 1, 8, 5, 6], [8, 0, 2, 9, 7, 1], [9, 9, 6, 4, 4, 0], [4, 7, 4, 8, 2, 1], [6, 8, 3, 8, 4, 5], [1, 2, 9, 4, 8, 8], [0, 3, 0, 7, 5, 8], [1, 0, 6, 6, 6, 3], [7, 1, 3, 5, 5, 3], [4, 0, 8, 8, 6, 1], [2, 5, 9, 0, 0, 1], [0, 0, 9, 0, 9, 7], [3, 2, 8, 8, 1, 0], [5, 7, 3, 8, 1, 6], [8, 9, 3, 4, 0, 6], [7, 7, 7, 7, 2, 0], [5, 2, 9, 1, 3, 5], [6, 6, 7, 1, 9, 6], [1, 7, 4, 0, 8, 4], [9, 1, 7, 6, 6, 7], [6, 9, 5, 6, 7, 7], [7, 9, 4, 4, 5, 5], [7, 5, 5, 0, 8, 3], [9, 7, 6, 1, 5, 6], [8, 6, 8, 3, 2, 2], [6, 7, 7, 2, 4, 4], [1, 1, 1, 7, 9, 0], [3, 1, 2, 8, 6, 3], [8, 3, 3, 6, 2, 5], [1, 8, 8, 3, 3, 2], [1, 4, 5, 6, 0, 5], [2, 8, 3, 1, 9, 2], [6, 7, 3, 5, 4, 1], [8, 3, 3, 1, 8, 9], [5, 8, 8, 7, 1, 3], [0, 5, 6, 6, 8, 4], [4, 4, 4, 7, 5, 8], [3, 5, 7, 1, 7, 0], [0, 1, 0, 1, 9, 5], [0, 0, 7, 6, 2, 8], [0, 5, 8, 1, 9, 7], [4, 0, 4, 9, 1, 8], [4, 5, 1, 7, 0, 8], [7, 2, 2, 5, 7, 2], [6, 6, 8, 5, 8, 5], [7, 7, 3, 8, 6, 3], [0, 7, 8, 9, 2, 1], [0, 7, 1, 7, 9, 7], [1, 5, 4, 3, 4, 4], [3, 2, 2, 9, 7, 6], [3, 5, 4, 0, 5, 8], [1, 3, 0, 2, 5, 8], [1, 2, 3, 2, 3, 1], [6, 8, 7, 8, 6, 5], [4, 8, 0, 3, 9, 8], [5, 5, 3, 0, 6, 1], [7, 1, 9, 7, 0, 5], [0, 8, 8, 2, 7, 4], [4, 8, 5, 5, 3, 1], [8, 7, 7, 2, 1, 8], [5, 7, 0, 4, 3, 0], [2, 9, 6, 2, 0, 4], [7, 7, 6, 7, 5, 3], [0, 9, 3, 4, 1, 4], [0, 1, 2, 1, 8, 8], [3, 4, 3, 7, 6, 7], [9, 2, 0, 7, 3, 6], [3, 2, 3, 3, 2, 7], [3, 6, 5, 0, 9, 9], [4, 2, 3, 0, 4, 2], [6, 1, 9, 1, 9, 3], [4, 5, 7, 4, 7, 1], [9, 4, 9, 9, 5, 1], [5, 0, 1, 6, 7, 6], [8, 5, 3, 1, 2, 0], [5, 1, 1, 6, 0, 1], [5, 9, 6, 2, 1, 6], [6, 7, 4, 0, 1, 0], [5, 5, 9, 9, 3, 9], [7, 9, 0, 7, 4, 0], [5, 6, 1, 4, 7, 2], [6, 6, 6, 6, 8, 1], [3, 8, 6, 9, 4, 4], [3, 0, 2, 5, 1, 4], [6, 3, 3, 8, 4, 5], [5, 5, 3, 8, 0, 7], [4, 9, 2, 1, 6, 2], [0, 8, 1, 5, 7, 7], [6, 2, 5, 7, 9, 5], [6, 1, 1, 4, 3, 5], [9, 6, 3, 0, 1, 8], [6, 7, 9, 4, 8, 8], [5, 3, 9, 6, 1, 8], [4, 5, 0, 2, 1, 9], [1, 5, 8, 9, 9, 2], [2, 2, 7, 4, 2, 8], [3, 6, 8, 9, 3, 7], [7, 9, 0, 3, 9, 6], [9, 2, 8, 0, 7, 8], [0, 4, 8, 0, 1, 8], [0, 4, 0, 1, 3, 7], [3, 8, 5, 7, 9, 9], [0, 7, 4, 0, 3, 5], [8, 0, 8, 4, 6, 8], [7, 7, 8, 0, 0, 2], [8, 8, 1, 5, 1, 3], [1, 8, 3, 4, 5, 4], [4, 0, 9, 6, 3, 8], [8, 1, 8, 1, 2, 7], [7, 0, 4, 1, 4, 3], [9, 6, 3, 0, 5, 4], [9, 8, 3, 1, 5, 0], [9, 9, 6, 1, 3, 1], [8, 0, 6, 8, 6, 7], [7, 1, 4, 4, 4, 6], [5, 9, 0, 0, 5, 2], [5, 8, 9, 6, 8, 4], [5, 1, 3, 1, 0, 5], [4, 9, 3, 9, 9, 1], [1, 9, 5, 9, 7, 3], [3, 2, 3, 6, 4, 5], [8, 3, 8, 5, 3, 8], [1, 3, 2, 2, 3, 8], [4, 3, 6, 1, 9, 7], [8, 7, 9, 0, 0, 0], [2, 4, 4, 3, 4, 2], [7, 0, 6, 6, 8, 7]]}, "output": 1901, "input_len": 6611, "line": 6017}
{"problem": "You are given 3 positive integers zero, one, and limit.\nA binary array arr is called stable if:\n\tThe number of occurrences of 0 in arr is exactly zero.\n\tThe number of occurrences of 1 in arr is exactly one.\n\tEach subarray of arr with a size greater than limit must contain both 0 and 1.\nReturn the total number of stable binary arrays.\nSince the answer may be very large, return it modulo 10^9 + 7.", "tags": ["DP", "Prefix Sum"], "input": {"zero": 2, "one": 3, "limit": 9}, "output": 10, "input_len": 19, "line": 175}
{"problem": "Given two strings initial and target, your task is to modify initial by performing a series of operations to make it equal to target.\nIn one operation, you can add or remove one character only at the beginning or the end of the string initial.\nReturn the minimum number of operations required to transform initial into target.", "tags": ["String", "Binary Search", "DP", "Sliding Window", "Hash Function"], "input": {"initial": "ifmoqblqthqnqynjygkscfoilbqspnqyjijipbtlyyamvqwpwuzibtezodclnlnzmscknbzacyedkrstgwtvvdzswvjqtrppcnkayuptygycgdbqprkoocybgtlvdasrraijesrmjepzaevmvqsrbgdkwauccqppbnwtuuiwpynrphfueeqzicmtiynawiavjptjonrviakfcqimowwxmmoumcnfybvfhpmnecagqbunzblejivfixighcdacajphrqggewrzjftpdsxsqenndlvtvoximalgtdfxchrtbviajdreitpltcvwkalsrnewgekswkqsmqjbfqcydwctednjzjwrrxzwlckxglkgdmyywiflzshlugkbrejcnznpwhklhrzxzlikrcjtbdjczoxyftnshyikizssobtvmvsrapjnhidfkuiphlcetizyeimhrxganxwccyzuoftnqtlztrpdluzshgpjnxrafxrnemsxtfalortevxsmqzldpgpoxhwpercfcusrfhervrigusvnmpkqeinzvzrxhfxswbmugaasutmdsnoczfhxzxcwugypzjivnavvqwidwyeskdiudzvizwkzcgmnyoogsg", "target": "juhaz"}, "output": 626, "input_len": 352, "line": 8328}
{"problem": "Given an array nums and an integer m, with each element nums[i] satisfying 0 <= nums[i] < 2m, return an array answer. The answer array should be of the same length as nums, where each element answer[i] represents the maximum Hamming distance between nums[i] and any other element nums[j] in the array.\nThe Hamming distance between two binary integers is defined as the number of positions at which the corresponding bits differ (add leading zeroes if needed).", "tags": ["Bit Manipulation", "BFS", "Array"], "input": {"nums": [168, 221, 164, 162, 221, 82, 101, 202, 154, 244, 100, 102, 115, 16, 3, 230, 133, 130, 20, 138, 184, 207, 44, 251, 74, 124, 31, 157, 20, 234, 226, 87, 120, 24, 59, 132, 0, 216, 6, 168], "m": 8}, "output": [8, 7, 6, 7, 7, 6, 8, 6, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 7, 6, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 7, 7, 6, 7, 8], "input_len": 194, "line": 7321}
{"problem": "Given an array nums and an integer m, with each element nums[i] satisfying 0 <= nums[i] < 2m, return an array answer. The answer array should be of the same length as nums, where each element answer[i] represents the maximum Hamming distance between nums[i] and any other element nums[j] in the array.\nThe Hamming distance between two binary integers is defined as the number of positions at which the corresponding bits differ (add leading zeroes if needed).", "tags": ["Bit Manipulation", "BFS", "Array"], "input": {"nums": [101, 20, 56, 45, 43, 110, 8, 19, 2, 60, 42, 59, 95, 7, 58, 88, 56, 51, 126, 7, 59, 36, 112, 43, 12, 40, 77, 105, 88, 25, 85, 77, 86, 126, 41, 115, 78, 102, 78, 5, 18, 57, 0, 126, 98, 40, 96, 102, 25, 14, 18, 78, 113, 43, 84, 6, 103, 19, 89, 34, 33, 117, 16, 61, 68, 15, 19, 85, 48, 45, 85, 102, 53, 82, 48, 95, 125, 55, 77, 52, 38, 99, 94, 28, 43, 114, 126, 106, 114, 119, 89, 9, 92, 72, 19, 48, 34, 1, 91, 29, 25], "m": 7}, "output": [6, 6, 6, 7, 7, 6, 7, 6, 7, 6, 7, 7, 6, 6, 6, 6, 6, 6, 7, 6, 7, 7, 7, 7, 7, 6, 6, 6, 6, 7, 7, 6, 7, 7, 7, 7, 6, 7, 6, 6, 6, 6, 6, 7, 7, 6, 6, 7, 7, 7, 6, 6, 7, 7, 7, 6, 6, 6, 7, 6, 7, 6, 6, 6, 7, 7, 6, 7, 6, 7, 7, 7, 6, 7, 6, 6, 7, 7, 6, 6, 7, 7, 7, 7, 7, 6, 7, 6, 6, 7, 7, 6, 6, 7, 6, 6, 6, 7, 7, 7, 7], "input_len": 425, "line": 4120}
{"problem": "Given an array nums and an integer m, with each element nums[i] satisfying 0 <= nums[i] < 2m, return an array answer. The answer array should be of the same length as nums, where each element answer[i] represents the maximum Hamming distance between nums[i] and any other element nums[j] in the array.\nThe Hamming distance between two binary integers is defined as the number of positions at which the corresponding bits differ (add leading zeroes if needed).", "tags": ["Bit Manipulation", "BFS", "Array"], "input": {"nums": [16, 82, 66], "m": 8}, "output": [3, 2, 3], "input_len": 22, "line": 7215}
{"problem": "Given an array nums and an integer m, with each element nums[i] satisfying 0 <= nums[i] < 2m, return an array answer. The answer array should be of the same length as nums, where each element answer[i] represents the maximum Hamming distance between nums[i] and any other element nums[j] in the array.\nThe Hamming distance between two binary integers is defined as the number of positions at which the corresponding bits differ (add leading zeroes if needed).", "tags": ["Bit Manipulation", "BFS", "Array"], "input": {"nums": [28, 22, 21, 13, 20], "m": 5}, "output": [2, 4, 2, 4, 3], "input_len": 30, "line": 642}
{"problem": "Given an array nums and an integer m, with each element nums[i] satisfying 0 <= nums[i] < 2m, return an array answer. The answer array should be of the same length as nums, where each element answer[i] represents the maximum Hamming distance between nums[i] and any other element nums[j] in the array.\nThe Hamming distance between two binary integers is defined as the number of positions at which the corresponding bits differ (add leading zeroes if needed).", "tags": ["Bit Manipulation", "BFS", "Array"], "input": {"nums": [247, 66, 163], "m": 8}, "output": [5, 5, 4], "input_len": 24, "line": 7210}
{"problem": "Given an array nums and an integer m, with each element nums[i] satisfying 0 <= nums[i] < 2m, return an array answer. The answer array should be of the same length as nums, where each element answer[i] represents the maximum Hamming distance between nums[i] and any other element nums[j] in the array.\nThe Hamming distance between two binary integers is defined as the number of positions at which the corresponding bits differ (add leading zeroes if needed).", "tags": ["Bit Manipulation", "BFS", "Array"], "input": {"nums": [6, 41, 15, 38, 42], "m": 6}, "output": [5, 5, 3, 4, 3], "input_len": 29, "line": 1442}
{"problem": "Given an array nums and an integer m, with each element nums[i] satisfying 0 <= nums[i] < 2m, return an array answer. The answer array should be of the same length as nums, where each element answer[i] represents the maximum Hamming distance between nums[i] and any other element nums[j] in the array.\nThe Hamming distance between two binary integers is defined as the number of positions at which the corresponding bits differ (add leading zeroes if needed).", "tags": ["Bit Manipulation", "BFS", "Array"], "input": {"nums": [173, 254, 14, 238, 42, 137, 56, 119, 69, 150, 34, 73, 67], "m": 8}, "output": [6, 6, 5, 5, 6, 7, 6, 7, 6, 7, 5, 7, 6], "input_len": 68, "line": 7210}
{"problem": "Given an array nums and an integer m, with each element nums[i] satisfying 0 <= nums[i] < 2m, return an array answer. The answer array should be of the same length as nums, where each element answer[i] represents the maximum Hamming distance between nums[i] and any other element nums[j] in the array.\nThe Hamming distance between two binary integers is defined as the number of positions at which the corresponding bits differ (add leading zeroes if needed).", "tags": ["Bit Manipulation", "BFS", "Array"], "input": {"nums": [28, 12, 2, 41, 19, 60, 48], "m": 6}, "output": [4, 5, 5, 4, 5, 5, 4], "input_len": 37, "line": 1444}
{"problem": "Given an array nums and an integer m, with each element nums[i] satisfying 0 <= nums[i] < 2m, return an array answer. The answer array should be of the same length as nums, where each element answer[i] represents the maximum Hamming distance between nums[i] and any other element nums[j] in the array.\nThe Hamming distance between two binary integers is defined as the number of positions at which the corresponding bits differ (add leading zeroes if needed).", "tags": ["Bit Manipulation", "BFS", "Array"], "input": {"nums": [22, 17], "m": 5}, "output": [3, 3], "input_len": 18, "line": 639}
{"problem": "You are given an array nums which is a permutation of [0, 1, 2, ..., n - 1]. The score of any permutation of [0, 1, 2, ..., n - 1] named perm is defined as:\nscore(perm) = |perm[0] - nums[perm[1]]| + |perm[1] - nums[perm[2]]| + ... + |perm[n - 1] - nums[perm[0]]|\nReturn the permutation perm which has the minimum possible score. If multiple permutations exist with this score, return the one that is lexicographically smallest among them.", "tags": ["Bit Manipulation", "Array", "DP", "Bitmask DP"], "input": {"nums": [0, 4, 7, 1, 6, 3, 5, 2]}, "output": [0, 3, 5, 6, 2, 7, 4, 1], "input_len": 28, "line": 9478}
{"problem": "You are given an array nums which is a permutation of [0, 1, 2, ..., n - 1]. The score of any permutation of [0, 1, 2, ..., n - 1] named perm is defined as:\nscore(perm) = |perm[0] - nums[perm[1]]| + |perm[1] - nums[perm[2]]| + ... + |perm[n - 1] - nums[perm[0]]|\nReturn the permutation perm which has the minimum possible score. If multiple permutations exist with this score, return the one that is lexicographically smallest among them.", "tags": ["Bit Manipulation", "Array", "DP", "Bitmask DP"], "input": {"nums": [5, 4, 3, 0, 2, 1]}, "output": [0, 3, 2, 4, 1, 5], "input_len": 22, "line": 1350}
{"problem": "You are given a string s. It may contain any number of '*' characters. Your task is to remove all '*' characters.\nWhile there is a '*', do the following operation:\n\tDelete the leftmost '*' and the smallest non-'*' character to its left. If there are several smallest characters, you can delete any of them.\nReturn the lexicographically smallest resulting string after removing all '*' characters.", "tags": ["Stack", "Greedy", "Hash Table", "String", "Heap"], "input": {"s": "fdagejadqyuchjavrsvieejvdbw*bdtsrbayl*devjtbjkrmgccatqyuwgbvlrqyvcabjhqgrzxndpmhijrrlxkdmfdmtpqheezbaolclhqhxelckticilrqraiddnptixtyyykikryrjbqzuvna*rutyxbiwvcanszllgxvoehzbkbefitwdcfypfbpodppkjgspzqxauvhnouhjbmluutvcqh*zmqfuhqszdejnlapkjxwdajztkci*aflndvlbclrr*losyfnypmpljpeemfshyja*bmonfh*neoasbpashdiljjzsr*ipvozxassnvajlj*iyetc*fcoielrryxftmwvmwiqwahkzkfnocczfiasc*fzgzidarrwglf*xunswfake*bislvykdv**nxhhmvuhqraefenabj**nueniajmbuk*ccelzwuctq*pqymvsq*nlrcdermhzym*yaljkiomxrihjtorokitogf*tgzi*xuzvwcfbyjugahplrformqkaaipuoxvcskbfjkxrrtfz*lpxunywq*uxgsnqmuvajresqbsgf"}, "output": "fdagejadqyuchjvrsvieejvdbwbdtsrbyldevjtbjkrmgccatqyuwgbvlrqyvcbjhqgrzxndpmhijrrlxkdmfdmtpqheezbolclhqhxelckticilrqriddnptixtyyykikryrjbqzuvnrutyxbiwvcnszllgxvoehzbkbefitwdcfypfbpodppkjgspzqxuvhnouhjbmluutvcqhzmqfuhqszdejnlpkjxwdjztkciflndvlbclrrlosyfnypmpljpeemfshyjbmonfhneosbpshdiljjzsripvozxssnvjljiyetcfcoielrryxftmwvmwiqwhkzkfnocczfiscfzgzidrrwglfxunswfkebislvykdvnxhhmvuhqrefenbjnuenijmbukccelzwuctqpqymvsqnlrcdermhzymyljkiomxrihjtorokitogftgzixuzvwcfbyjugahplrformqkipuoxvcskbfjkxrrtfzlpxunywquxgsnqmuvajresqbsgf", "input_len": 311, "line": 2396}
{"problem": "You are given an array nums and an integer k. You need to find a subarray of nums such that the absolute difference between k and the bitwise OR of the subarray elements is as small as possible. In other words, select a subarray nums[l..r] such that |k - (nums[l] OR nums[l + 1] ... OR nums[r])| is minimum.\nReturn the minimum possible value of the absolute difference.\nA subarray is a contiguous non-empty sequence of elements within an array.", "tags": ["Bit Manipulation", "Segment Tree", "Array", "Binary Search"], "input": {"nums": [702164168, 754528874, 202645964, 66853534, 119423203, 721517517, 43688410, 903066598, 385674211, 260491992, 397121814, 987629449, 49849124, 900757250, 217521695, 24233774], "k": 88460743}, "output": 21607209, "input_len": 189, "line": 2834}
{"problem": "You are given two integers n and k.\nInitially, you start with an array a of n integers where a[i] = 1 for all 0 <= i <= n - 1. After each second, you simultaneously update each element to be the sum of all its preceding elements plus the element itself. For example, after one second, a[0] remains the same, a[1] becomes a[0] + a[1], a[2] becomes a[0] + a[1] + a[2], and so on.\nReturn the value of a[n - 1] after k seconds.\nSince the answer may be very large, return it modulo 10^9 + 7.", "tags": ["Array", "Math", "Combinatorics", "Prefix Sum", "Simulation"], "input": {"n": 104, "k": 2}, "output": 5460, "input_len": 15, "line": 422}
{"problem": "You are given an integer array rewardValues of length n, representing the values of rewards.\nInitially, your total reward x is 0, and all indices are unmarked. You are allowed to perform the following operation any number of times:\n\tChoose an unmarked index i from the range [0, n - 1].\n\tIf rewardValues[i] is greater than your current total reward x, then add rewardValues[i] to x (i.e., x = x + rewardValues[i]), and mark the index i.\nReturn an integer denoting the maximum total reward you can collect by performing the operations optimally.", "tags": ["Bit Manipulation", "Array", "DP"], "input": {"rewardValues": [39338, 47733, 9446, 47183, 3434, 49897, 8767, 41119, 22403, 5694, 1505, 41695, 24486, 40772, 24067, 20618, 5881, 12079, 3637, 25965, 13312, 17255, 5443, 25646, 21922, 43539, 27112, 3048, 44419, 45359, 35434, 49805, 12041, 2261, 29906, 45702, 27887, 33801, 24839, 28548, 9291, 33079, 18108, 31665, 15720, 10704, 3910, 32226, 33954, 14631, 11222, 32582, 41682, 37774, 35690, 39509, 45380, 41023, 42335, 39945, 45562, 40529, 24389, 13830, 44660, 37546, 49039, 29123, 45789, 14005, 41575, 34797, 6071, 11534, 6050, 15935, 31591, 39663, 31960, 31477, 43813, 2070, 17559, 47835, 29696, 28751, 12156, 36496, 36849, 29295, 38544, 14925, 11873, 25915, 19125, 8589, 11197, 6163, 18194, 39771, 7614, 13755, 33856, 44512, 3536, 8224, 39822, 16830, 27729, 28043, 25267, 31244, 27398, 37379, 8054, 44615, 47144, 5276, 46232, 20865, 26780, 38306, 47330, 10074, 44132, 14796, 17375, 17327, 3133, 41339, 33116, 8251, 3281, 17263, 39030, 16880, 12200, 23338, 41507, 31931, 37932, 8813, 16504, 14287, 2530, 32262, 32706, 21256, 27468, 16522, 13159, 42515, 3115, 49362, 12994, 16487, 2449, 42305, 13988, 21105, 2448, 11330, 45342, 28314, 7180, 28775, 9641, 33301, 12292, 49705, 7263, 2371, 21975, 776, 33944, 19255, 43110, 8322, 36341, 14926, 16836, 20951, 679, 6397, 19652, 36018, 281, 10882, 46964, 49669, 8769, 15333, 41373, 1386, 47042, 35623, 8577, 34698, 29297, 33219, 14863, 19597, 31412, 13759, 603, 43148, 35915, 32276, 30095, 15241, 37866, 49023, 24234, 11159, 5023, 28854, 42489, 14261, 7798, 46259, 22735, 5584, 42236, 35582, 26569, 38699, 46003, 32927, 18088, 29393, 5922, 48215, 25045, 4048, 23721, 42292, 49938, 11328, 13252, 40545, 2824, 22664, 2036, 23316, 36084, 41888, 46879, 14594, 35380, 16106, 21184, 26046, 15206, 13344, 22023, 17633, 24112, 30700, 11459, 210, 45455, 30529, 3694, 43080, 32062, 16816, 26984, 37627, 34649, 24406, 33408, 30790, 13569, 21073, 27643, 4254, 397, 11792, 48104, 15146, 11954, 48961, 8406, 36490, 44489, 22610, 18063, 48646, 21974, 31402, 39700, 47890, 21457, 28767, 24306, 4995, 30157, 25633, 29146, 23202, 23254, 5500, 523, 19713, 5509, 4959, 19558, 31392, 18594, 25037, 13915, 25093, 26317, 3600, 28186, 16447, 40006, 347, 15531, 41124, 27369, 33236, 34662, 48659, 24636, 38928, 43879, 29520, 45735, 10632, 6996, 33745, 29943, 32142, 10294, 9520, 20144, 18762, 27080, 16810, 27262, 11310, 19083, 33860, 988, 21692, 15995, 30958, 13452, 43, 30950, 36537, 45549, 35928, 10467, 37278, 2129, 9780, 34432, 48259, 31553, 17790, 42389, 22596, 39253, 30936, 40830, 48761, 48853, 20222, 9440, 11536, 5067, 18068, 15785, 29963, 36271, 25210, 11346, 17107, 18099, 22085, 34662, 3305, 12928, 36176, 27444, 13843, 17414, 21452, 49589, 15896, 22991, 42524, 17194, 8770, 39538, 11753, 7104, 32809, 27647, 14734, 30762, 40283, 40215, 2261, 37837, 48420, 23110, 30485, 28879, 22593, 18032, 44316, 42963, 30608, 22940, 10156, 10988, 17678, 27016, 36997, 16583, 49539, 40661, 17826, 3670, 17455, 237, 41940, 40078, 4775, 47663, 4232, 39891, 11400, 2202, 37863, 42873, 21216, 31858, 41570, 31700, 18336, 44442, 42457, 789, 32244, 6313, 27555, 26472, 49784, 14493, 5198, 24892, 32519, 41256, 37481, 49643, 46866, 2723, 14979, 25842, 46753, 40269, 31460, 48022, 35376, 30708, 30080, 46692, 3892, 21151, 9421, 16398, 18310, 33646, 25232, 47989, 14091, 44598, 15731, 13602, 21647, 16677, 33687, 3852, 7775, 48981, 10537, 1176, 33192, 20932, 48874, 8004, 8033, 35946, 48002, 35249, 35183, 39459, 40075, 37420, 1462, 4265, 14523, 22361, 19386, 38301, 42525, 8436, 1013, 40618, 8655, 21482, 2972, 17007, 41042, 22663, 6305, 30574, 40742, 41254, 2941, 9868, 43097, 45368, 696, 27431, 30361, 24300, 3455, 20443, 17167, 2877, 11090, 1609, 43177, 16931, 27468, 23264, 32350, 24618, 11087, 45201, 3715, 21116, 5110, 34295, 47920, 17221, 44120, 18971, 45680, 28075, 5548, 46179, 19101, 34511, 26000, 16472, 4168, 27163, 14509, 19806, 8251, 9386, 12351, 39599, 6207, 19545, 24921, 47617, 40900, 45682, 4934, 45971, 13538, 40897, 30639, 35055, 3171, 43068, 30120, 17160, 34434, 19627, 12141, 30769, 5554, 32150, 39504, 2323, 40200, 14590, 18469, 12400, 9934, 42231, 16106, 14304, 34938, 1058, 37188, 5221, 2809, 37186, 42485, 45138, 29178, 3518, 47226, 48286, 49761, 13697, 5714, 5907, 49157, 20533, 16347, 1512, 45407, 39691, 34458, 42160, 8489, 36327, 8602, 46831, 11817, 41549, 1009, 7054, 42616, 26249, 7827, 14398, 33887, 47727, 10604, 7145, 35403, 33645, 40799, 5992, 49476, 6149, 12298, 44661, 27891, 46914, 12058, 32655, 10115, 14103, 1580, 10407, 37552, 7412, 26478, 1667, 1628, 34124, 15405, 16592, 14063, 26799, 23427, 48626, 27548, 8834, 13908, 26129, 14814, 15610, 5388, 18269, 239, 22884, 5241, 30189, 12190, 2529, 21227, 27794, 8984, 10895, 42241, 9889, 11212, 42763, 28135, 46161, 19944, 36056, 2996, 37420, 45288, 10996, 34149, 31669, 22501, 49108, 22716, 46256, 6089, 11115, 13893, 12370, 27076, 33522, 19335, 4726, 36237, 44766, 39789, 1141, 43609, 16131, 3944, 32879, 32596, 6671, 33193, 47010, 12196, 27881, 7084, 45105, 3893, 26373, 25205, 36281, 44294, 39782, 21824, 20183, 48783, 24258, 6784, 46043, 26299, 17565, 3230, 6622, 20567, 8549, 13322, 9300, 32648, 29885, 12940, 5989, 10146, 23293, 41523, 39316, 5457, 13593, 12242, 24084, 17996, 28308, 1359, 12290, 15198, 31709, 39114, 49346, 31817, 23220, 270, 35881, 28181, 9969, 8112, 117, 29975, 18883, 26874, 45394, 18822, 16950, 11426, 41182, 6186, 4518, 41619, 27830, 30532, 9994, 4941, 41170, 16424, 15836, 17592, 45191, 36267, 44329, 4824, 29668, 23433, 46512, 18566, 48207, 32559, 24939, 10756, 49342, 8705, 42742, 19067, 16619, 32227, 32660, 10911, 22832, 32187, 34483, 36171, 7987, 19688, 43898, 41191, 35540, 10507, 32941, 15528, 803, 17213, 14502, 43674, 35911, 29234, 30922, 45443, 37168, 36292, 1129, 32522, 36968, 8042, 34336, 17310, 6853, 42060, 10814, 41867, 21236, 28859, 19437, 48965, 33689, 27151, 17946, 35237, 19038, 1386, 41387, 25345, 15980, 35548, 13115, 10250, 26418, 25335, 9537, 39999, 11047, 11899, 30130, 40776, 11411, 19265, 32451, 13161, 22034, 31564, 42766, 34574, 38334, 3820, 333, 23053, 43828, 9, 23787, 37559, 15162, 15261, 39606, 24005, 8723, 35485, 6372, 7861, 34269, 11883, 47660, 12265, 21017, 10353, 46397, 42504, 46662, 23528, 44645, 32334, 8825, 23261, 41257, 9090, 8496, 6391, 32102, 41879, 24602, 10339, 4108, 14793, 48586, 27775, 43968, 47969, 41250, 49168, 28787, 10021, 48298, 18506, 500, 41140, 936, 12108, 29141, 26412, 31261, 49030, 11933, 33465, 13244, 41539, 39720, 23008, 14934, 36204, 17261, 5542, 25134, 24887, 41242, 46227, 38478, 36899, 1368, 48222, 21959, 20642, 47603, 30994, 34404, 39021, 27077, 36849, 18961, 30613, 6018, 17710, 19117, 10530, 7690, 11938, 48794, 19431, 34095, 22812, 11593, 2807, 23627, 18120, 18647, 9049, 12945, 20586, 25392, 21655, 21116, 49709, 21016, 20992, 16958, 682, 21192, 20767, 43398, 37251, 15789, 5443, 10073, 10883, 27510, 40600, 15497, 49873, 17654, 22348, 34298, 1980, 39653, 20542, 2372, 34825, 615, 42385, 48037, 29240, 24571, 7818, 4545, 9149, 6003, 42547, 15340, 40783, 32229, 10011, 7269, 18275, 7080, 14419, 44760, 25798, 12301, 5889, 37019, 32059, 24905, 19247, 23470, 2209, 24882, 13397, 26931, 1971, 47071, 7068, 17829, 33555, 32071, 34527, 6621, 27761, 15835, 40928, 24365, 33441, 18731, 25198, 45747, 16611, 13193, 9472, 21634, 30014, 33021, 27043, 40178, 11464, 43537, 26155, 48614, 20515, 8672, 34701, 17320, 30802, 24691, 4753, 39968, 12884, 36684, 33166, 4022, 21534, 36225, 49744, 2442, 37261, 2344, 47776, 41478, 19900, 27038, 25616, 37312, 36922, 14490, 5390, 13101, 22780, 27034, 18465, 31451, 8751, 7379, 38782, 49060, 37145, 37198, 4697, 16609, 36294, 29924, 43001, 40931, 30282, 7513, 23688, 37709, 24306, 27910, 17490, 28117, 11817, 41792, 19206, 7325, 23578, 28686, 2482, 34377, 49144, 3241, 39234, 33570, 10521, 32364, 49097, 27406, 21998, 39260, 32243, 30875, 32422, 26729, 40813, 10217, 1926, 39726, 35340, 20866, 41985, 20671, 32253, 21858, 25602, 17571, 45809, 41814, 19565, 47881, 5919, 9816, 9584, 13605, 16469, 31792, 36284, 35198, 24066, 48363, 34087, 14665, 40652, 39193, 5719, 10039, 8074, 1623, 16329, 2252, 547, 12968, 44553, 31882, 9858, 4942, 2233, 30720, 48745, 20124, 16653, 9823, 20111, 23516, 5810, 7070, 14310, 17240, 44843, 11461, 5659, 42399, 40703, 32303, 1009, 26628, 44567, 39016, 46098, 24460, 35890, 27963, 36462, 399, 20654, 40860, 43300, 45779, 19737, 32653, 15406, 10434, 49360, 12885, 11083, 46904, 48828, 11470, 17674, 14374, 35162, 22418, 34344, 7376, 9242, 47748, 20977, 5649, 39498, 19785, 37237, 41587, 15961, 28529, 49824, 4067, 30938, 29998, 40705, 46403, 9883, 39784, 26920, 23606, 43341, 16981, 4494, 23880, 11842, 1483, 7300, 21901, 42794, 19485, 35972, 40108, 24661, 27095, 32376, 7677, 43420, 10340, 27770, 42810, 11128, 36954, 39888, 15627, 19621, 44801, 30565, 47962, 45130, 20434, 40128, 11534, 36569, 4343, 32913, 25211, 32759, 41146, 9984, 41584, 27813, 4827, 43911, 2134, 23008, 38642, 45610, 32697, 19597, 36796, 11354, 28061, 42472, 16285, 14498, 31968, 48170, 5817, 7751, 17758, 16175, 45777, 7472, 2891, 10047, 9636, 10349, 39612, 28686, 20663, 9804, 7873, 34310, 12949, 43367, 7251, 43949, 28221, 1401, 28059, 37439, 14450, 23604, 10858, 39239, 18786, 48899, 15560, 40400, 8400, 15949, 38659, 34618, 20955, 39425, 48682, 24219, 30282, 22984, 8486, 2505, 38366, 21601, 3508, 5444, 34754, 20845, 5703, 36081, 47701, 15386, 38919, 41313, 10373, 28729, 6285, 27634, 47779, 37917, 4036, 32188, 34450, 10038, 20135, 12060, 42396, 20202, 9378, 30013, 2009, 12174, 48373, 31916, 39435, 42547, 7367, 24933, 31164, 42113, 37625, 29059, 13483, 31911, 22998, 42823, 37955, 19229, 39849, 9087, 32006, 11727, 41960, 47379, 29975, 12014, 36309, 36301, 23144, 7549, 28023, 8830, 23818, 44327, 46695, 44225, 26434, 12837, 18645, 36985, 49497, 35025, 46477, 13217, 1977, 34588, 5412, 33503, 26129, 8763, 45887, 3588, 35658, 27516, 9769, 12145, 910, 8175, 24591, 5072, 44196, 2352, 25293, 15038, 25897, 39352, 10109, 667, 24488, 1930, 18999, 14435, 11262, 2396, 29785, 20148, 3873, 16879, 41538, 18346, 46315, 4916, 39796, 30548, 3767, 30814, 35068, 37039, 46025, 33811, 20266, 7860, 46004, 37402, 34438, 24383, 11780, 36884, 11612, 1033, 458, 40840, 25608, 46615, 36387, 35738, 6323, 520, 31489, 9016, 40714, 19494, 15742, 48164, 26233, 39107, 24711, 26064, 39489, 20315, 27772, 30996, 46269, 24987, 26852, 25617, 5005, 20524, 49938, 9150, 47637, 31399, 27422, 23544, 5858, 14571, 28259, 23901, 23143, 34618, 7734, 12131, 2649, 1013, 26923, 4923, 47272, 27035, 27034, 1903, 23274, 39507, 897, 1833, 30260, 41676, 31849, 3142, 4635, 22737, 6159, 15978, 23248, 47376, 13467, 25669, 10582, 32082, 10031, 3072, 39964, 5226, 24333, 8033, 26178, 48231, 19060, 28565, 26095, 21189, 38205, 43127, 8660, 26509, 22583, 32077, 14212, 26568, 45423, 31998, 10291, 47695, 42415, 27721, 21992, 44859, 30800, 3748, 21715, 17004, 14938, 21397, 1618, 26207, 7349, 32712, 33513, 44250, 12432, 32939, 27003, 7127, 27322, 5867, 17850, 35398, 29392, 31737, 21533, 198, 1898, 10914, 40956, 5514, 22545, 19571, 4596, 15577, 18456, 5532, 45473, 39416, 13838, 18313, 26569, 35379, 16957, 24377, 23911, 5789, 6572, 21868, 9029, 28705, 48985, 40937, 25522, 45420, 37354, 11764, 47480, 24096, 19168, 12365, 3046, 47981, 32202, 40755, 30427, 8925, 14807, 14472, 210, 44662, 17709, 15891, 11960, 14592, 34065, 18384, 12717, 35803, 14506, 10024, 46211, 19095, 32098, 4027, 12233, 11367, 26323, 47099, 22104, 2156, 23906, 7121, 36565, 26644, 42799, 3515, 46206, 19577, 14791, 37463, 28965, 48227, 39629, 6281, 45834, 2629, 9587, 31179, 20090, 1395, 2763, 4863, 5397, 35102, 40275, 40123, 4857, 1545, 36028, 14908, 37104, 34461, 49322, 21394, 35853, 11975, 30996, 19618, 33549, 34608, 18433, 10699, 37413, 44600, 46133, 112, 32728, 31747, 10852, 30906, 28439, 35574, 38076, 35454, 18641, 40226, 1546, 27481, 14604, 34542, 37813, 22069, 21990, 26156, 39643, 19911, 15945, 24619, 33537, 12550, 41124, 4806, 49895, 35550, 8382, 45975, 42394, 21160, 11742, 48880, 3327, 47181, 17800, 20577, 3876, 9324, 34094, 16160, 33616, 10436, 23294, 18096, 3263, 9239, 44711, 15451, 9790, 11588, 44597, 13059, 9680, 42421, 32280, 12792, 20208, 7890, 46340, 16224, 40307, 6474, 23982, 19232, 7696, 25693, 44422, 48716, 9161, 47022, 5639, 21429, 17208, 4808, 26424, 23567, 25068, 30955, 21257, 24304, 25257, 21144, 41650, 20190, 31233, 37996, 34845, 28023, 40537, 3636, 41732, 42124, 41657, 42851, 6476, 20929, 18795, 15881, 45856, 40959, 22614, 39451, 42592, 6486, 7733, 15587, 25649, 23, 19081, 31917, 13471, 36658, 32870, 3928, 10473, 16116, 35897, 24319, 24868, 15100, 26379, 5877, 3779, 4615, 44578, 32655, 37762, 11094, 45117, 46575, 44050, 20700, 29329, 49840, 5036, 17, 39396, 20347, 28075, 43067, 10507, 17568, 29678, 48298, 32057, 36699, 11629, 48054, 14032, 13818, 8221, 36652, 15149, 40960, 34382, 46680, 40316, 21921, 10722, 26176, 12989, 1295, 39798, 41215, 6162, 18331, 6378, 44425, 40692, 39130, 12401, 40897, 2639, 41794, 46137, 27815, 11922, 14967, 12650, 27677, 43483, 32429, 14523, 18683, 25490, 2904, 415, 6358, 45283, 27457, 30895, 45999, 22329, 9052, 40792, 4334, 3917, 21716, 27812, 12845, 34746, 37720, 4668, 45353, 21152, 8840, 13448, 47705, 13908, 44952, 33787, 25083, 29850, 6183, 41363, 47772, 27551, 8483, 23598, 20339, 4238, 10691, 19559, 12218, 36595, 26603, 30065, 26546, 42049, 28024, 25223, 42600, 25414, 7949, 18008, 11419, 35256, 21603, 18572, 29766, 38553, 21242, 9028, 30170, 46178, 9073, 2310, 46959, 27111, 2027, 14609, 43875, 22194, 44230, 43076, 22377, 48246, 23154, 26770, 33440, 5776, 6988, 23997, 15237, 2829, 48285, 34067, 37366, 46158, 47114, 30381, 1971, 43476, 38822, 32426, 5632, 3415, 15273, 29738, 23589, 4516, 44928, 44599, 10499, 33897, 29900, 12269, 3773, 43945, 46134, 11476, 44075, 16339, 27836, 14083, 26360, 33888, 33672, 37993, 24821, 8607, 276, 27517, 11346, 37936, 16972, 28665, 33410, 29569, 27475, 694, 37089, 31937, 7906, 16789, 19476, 40708, 23983, 5733, 25515, 27892, 18275, 37406, 25688, 34186, 34544, 15512, 24641, 19173, 23544, 37894, 23605, 28816, 8163, 23493, 3011, 5877, 18386, 5244, 8393, 32898, 34947, 6379, 5873, 1244, 28262, 49331, 11230, 25696, 45695, 38380, 36401, 15747, 289, 1161, 19995, 29458, 34422, 29442, 38506, 25394, 47709, 34584, 9332, 12350, 25969, 15114, 2421, 13191, 14047, 37885, 22038, 39829, 9788, 44884, 49196, 24460, 32867, 26353, 43492, 13567, 7402, 25392, 20284, 12887, 44400, 40574, 16234, 39363, 40278, 14280, 39667, 42730, 13920, 34934, 35652, 40967, 36187, 13901, 48279, 19023, 6404, 22988, 41205, 15488, 11111, 45932, 24800, 33209, 1908, 22268, 10426, 27764, 25258, 29895, 43817, 355, 4224, 24360, 32399, 20576, 49692, 4179, 42266, 33905, 23363, 39888, 5886, 42962, 3002, 20063, 36111, 49480, 12295, 25500, 44289, 44018, 39262, 16405, 20786, 45899, 18361, 11831, 3044, 42468, 28939, 2093, 2642, 1722, 29445, 43185, 31284, 35114, 34200, 18786, 45234, 47158, 17451, 22186, 33119, 23286, 5997, 33366, 45191, 23861, 25189, 17571, 42335, 35485, 15325, 47708, 23893, 1147, 46936, 15584, 30877, 42838, 43406, 37545, 27743]}, "output": 99875, "input_len": 14899, "line": 4296}
{"problem": "Given an array nums, you have to get the maximum score starting from index 0 and hopping until you reach the last element of the array.\nIn each hop, you can jump from index i to an index j > i, and you get a score of (j - i) * nums[j].\nReturn the maximum score you can get.", "tags": ["Stack", "Greedy", "Array", "Monotonic Stack"], "input": {"nums": [34159, 56641, 78430, 74673, 74625, 54712, 6170, 16446, 79939, 12445, 17067, 51887, 23702, 4590, 82563, 76446, 87517, 62877, 29400, 69627, 25292, 97856, 442, 21662, 31807, 76576, 44781, 69482, 93744, 73825, 82085]}, "output": 2875354, "input_len": 217, "line": 165}
{"problem": "Given 2 integer arrays nums1 and nums2 consisting only of 0 and 1, your task is to calculate the minimum possible largest number in arrays nums1 and nums2, after doing the following.\nReplace every 0 with an even positive integer and every 1 with an odd positive integer. After replacement, both arrays should be increasing and each integer should be used at most once.\nReturn the minimum possible largest number after applying the changes.", "tags": ["Array", "DP"], "input": {"nums1": [0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0], "nums2": [0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1]}, "output": 77, "input_len": 195, "line": 4134}
{"problem": "Given 2 integer arrays nums1 and nums2 consisting only of 0 and 1, your task is to calculate the minimum possible largest number in arrays nums1 and nums2, after doing the following.\nReplace every 0 with an even positive integer and every 1 with an odd positive integer. After replacement, both arrays should be increasing and each integer should be used at most once.\nReturn the minimum possible largest number after applying the changes.", "tags": ["Array", "DP"], "input": {"nums1": [0], "nums2": [0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1]}, "output": 83, "input_len": 180, "line": 409}
{"problem": "You are given two positive integers n and k.\nAn integer x is called k-palindromic if:\n\tx is a palindrome.\n\tx is divisible by k.\nAn integer is called good if its digits can be rearranged to form a k-palindromic integer. For example, for k = 2, 2020 can be rearranged to form the k-palindromic integer 2002, whereas 1010 cannot be rearranged to form a k-palindromic integer.\nReturn the count of good integers containing n digits.\nNote that any integer must not have leading zeros, neither before nor after rearrangement. For example, 1010 cannot be rearranged to form 101.", "tags": ["Hash Table", "Math", "Combinatorics", "Enumeration"], "input": {"n": 1, "k": 1}, "output": 9, "input_len": 13, "line": 200}
{"problem": "You are given a 2D matrix grid consisting of positive integers.\nYou have to select one or more cells from the matrix such that the following conditions are satisfied:\n\tNo two selected cells are in the same row of the matrix.\n\tThe values in the set of selected cells are unique.\nYour score will be the sum of the values of the selected cells.\nReturn the maximum score you can achieve.", "tags": ["Bit Manipulation", "Array", "DP", "Bitmask DP", "Matrix"], "input": {"grid": [[51, 12, 85, 77, 64, 88, 51, 99], [49, 45, 55, 6, 72, 55, 50, 30]]}, "output": 171, "input_len": 68, "line": 1688}
{"problem": "You are given a 2D matrix grid consisting of positive integers.\nYou have to select one or more cells from the matrix such that the following conditions are satisfied:\n\tNo two selected cells are in the same row of the matrix.\n\tThe values in the set of selected cells are unique.\nYour score will be the sum of the values of the selected cells.\nReturn the maximum score you can achieve.", "tags": ["Bit Manipulation", "Array", "DP", "Bitmask DP", "Matrix"], "input": {"grid": [[11, 6, 87, 44, 13, 23, 70, 94]]}, "output": 94, "input_len": 36, "line": 923}
{"problem": "You are given an array nums of n integers, and a 2D integer array queries of size q, where queries[i] = [li, ri].\nFor each query, you must find the maximum XOR score of any subarray of nums[li..ri].\nThe XOR score of an array a is found by repeatedly applying the following operations on a so that only one element remains, that is the score:\n\tSimultaneously replace a[i] with a[i] XOR a[i + 1] for all indices i except the last one.\n\tRemove the last element of a.\nReturn an array answer of size q where answer[i] is the answer to query i.", "tags": ["Array", "DP"], "input": {"nums": [1925886626], "queries}, "outputinput_len": 4940, "line": 835}
{"problem": "You are given an array nums of n integers, and a 2D integer array queries of size q, where queries[i] = [li, ri].\nFor each query, you must find the maximum XOR score of any subarray of nums[li..ri].\nThe XOR score of an array a is found by repeatedly applying the following operations on a so that only one element remains, that is the score:\n\tSimultaneously replace a[i] with a[i] XOR a[i + 1] for all indices i except the last one.\n\tRemove the last element of a.\nReturn an array answer of size q where answer[i] is the answer to query i.", "tags": ["Array", "DP"], "input": {"nums": [1809907190, 1476506331, 683844163, 556998206, 1335292988, 200281431, 985621819, 574211514], "queries": [[3, 4], [0, 3], [4, 5], [2, 7], [0, 6], [6, 6], [0, 1], [6, 6], [6, 7], [0, 2], [2, 2], [4, 5], [5, 5], [2, 6], [3, 3], [1, 7], [6, 6], [2, 6], [4, 7], [0, 3], [3, 6], [4, 4], [2, 5], [5, 5], [7, 7], [3, 4], [5, 6], [0, 5], [3, 5], [3, 3], [2, 4], [0, 2], [0, 1], [3, 5], [2, 7], [6, 6], [0, 5], [2, 2], [0, 1], [4, 4], [1, 4], [3, 3], [3, 6], [2, 4], [7, 7], [7, 7], [6, 7], [4, 5], [3, 6], [2, 4]]}, "output": [1856367106, 2033364197, 1335292988, 1965658375, 2033364197, 985621819, 1809907190, 985621819, 985621819, 1891831960, 683844163, 1335292988, 200281431, 1965658375, 556998206, 2033364197, 985621819, 1965658375, 1965658375, 2033364197, 1965658375, 1335292988, 1856367106, 200281431, 574211514, 1856367106, 985621819, 2033364197, 1856367106, 556998206, 1856367106, 1891831960, 1809907190, 1856367106, 1965658375, 985621819, 2033364197, 683844163, 1809907190, 1335292988, 2033364197, 556998206, 1965658375, 1856367106, 574211514, 574211514, 985621819, 1335292988, 1965658375, 1856367106], "input_len": 399, "line": 184}
{"problem": "You are given an integer mountainHeight denoting the height of a mountain.\nYou are also given an integer array workerTimes representing the work time of workers in seconds.\nThe workers work simultaneously to reduce the height of the mountain. For worker i:\n\tTo decrease the mountain's height by x, it takes workerTimes[i] + workerTimes[i] * 2 + ... + workerTimes[i] * x seconds. For example:\n    \tTo reduce the height of the mountain by 1, it takes workerTimes[i] seconds.\n    \tTo reduce the height of the mountain by 2, it takes workerTimes[i] + workerTimes[i] * 2 seconds, and so on.\nReturn an integer representing the minimum number of seconds required for the workers to make the height of the mountain 0.", "tags": ["Greedy", "Array", "Math", "Binary Search", "Heap"], "input": {"mountainHeight": 5435, "workerTimes": [478566, 308748, 739316, 703697, 168480, 393471, 273108, 470071, 464751, 5000, 979322, 586354, 756994, 192837, 866229, 857443, 618749, 987454, 751677, 501144, 945437, 990376, 900080, 25197, 780099, 353277, 805786]}, "output": 4992804310, "input_len": 229, "line": 3025}
{"problem": "You are given two strings word1 and word2.\nA string x is called valid if x can be rearranged to have word2 as a prefix.\nReturn the total number of valid substrings of word1.\nNote that the memory limits in this problem are smaller than usual, so you must implement a solution with a linear runtime complexity.", "tags": ["Hash Table", "String", "Sliding Window"], "input": {"word1": "oprbvcdevqiwkgqvsgylngqdzfdlkuqqgjsqrbmlseppxeyqkuonkmrqacawzmgpciftijcexkjykxhbtydqbtskqhchklsctgyzeviwphvsdgmondmuadpggyvkrhxhuuvolatgmggchubqyidsvcfswcfpulpqakevafukizlwpnztdutvdcirdtnjrquqsjilamjyemeuhhofmojikdoluemmyqmhzsibmjovovhchejxvbtvrbrvtookowizlsbyraavqowtbhdcbbigwohwvfaofotejpjksviyribazxtsrksezldnsfqwkchdskemhfezzslpvboidwhigncteofblwbvztgqglyiqqxxsmpzasqjmhfjxinzevkagqkpfinvymjpgnqzgaaylujjqcpjdjzuqmeekggdfnrpwcfmonxjybfxiowzsrnmrpbtgyvmtrnvhzvdyzwnlvpcorhfkrlbvevcikrtpisodrbaigbqqhtijzojuilprdauudeixhrcujnucgwzdnsurdyadzowmfcdrzbpbfwzuqywkzwbwvxuvwybqcwicbfkfttwpmzepwdwybncscgoxakpvkeqzyudzwvhggqzpufncunanqsnyikplvlgxechmkwpfcmiovjakofndtvpxwczibyaeiksktj", "word2": "ma"}, "output": 205323, "input_len": 384, "line": 7322}
{"problem": "You are given a string word and a non-negative integer k.\nReturn the total number of substrings of word that contain every vowel ('a', 'e', 'i', 'o', and 'u') at least once and exactly k consonants.", "tags": ["Hash Table", "String", "Sliding Window"], "input": {"word": "zatmubiceodohwshukhxota", "k": 11}, "output": 4, "input_len": 25, "line": 317}
{"problem": "You are given a string source of size n, a string pattern that is a subsequence of source, and a sorted integer array targetIndices that contains distinct numbers in the range [0, n - 1].\nWe define an operation as removing a character at an index idx from source such that:\n\tidx is an element of targetIndices.\n\tpattern remains a subsequence of source after removing the character.\nPerforming an operation does not change the indices of the other characters in source. For example, if you remove 'c' from \"acb\", the character at index 2 would still be 'b'.\nReturn the maximum number of operations that can be performed.", "tags": ["Array", "Hash Table", "Two Pointers", "String", "DP"], "input": {"source": "omuytezihuugumxnqtxmfpzzvnfpvfmwuoyszrahldzsmzlhxdxsdcvjdghwphdfsp", "pattern": "omtezumtmfpzzvnmwymxdxsdhhfp", "targetIndices": [40]}, "output": 1, "input_len": 70, "line": 6062}
{"problem": "You are given a string source of size n, a string pattern that is a subsequence of source, and a sorted integer array targetIndices that contains distinct numbers in the range [0, n - 1].\nWe define an operation as removing a character at an index idx from source such that:\n\tidx is an element of targetIndices.\n\tpattern remains a subsequence of source after removing the character.\nPerforming an operation does not change the indices of the other characters in source. For example, if you remove 'c' from \"acb\", the character at index 2 would still be 'b'.\nReturn the maximum number of operations that can be performed.", "tags": ["Array", "Hash Table", "Two Pointers", "String", "DP"], "input": {"source": "imjhih", "pattern": "mhh", "targetIndices": [0]}, "output": 1, "input_len": 24, "line": 105}
{"problem": "You are given three integers n, x, and y.\nAn event is being held for n performers. When a performer arrives, they are assigned to one of the x stages. All performers assigned to the same stage will perform together as a band, though some stages might remain empty.\nAfter all performances are completed, the jury will award each band a score in the range [1, y].\nReturn the total number of possible ways the event can take place.\nSince the answer may be very large, return it modulo 10^9 + 7.\nNote that two events are considered to have been held differently if either of the following conditions is satisfied:\n\tAny performer is assigned a different stage.\n\tAny band is awarded a different score.", "tags": ["Math", "DP", "Combinatorics"], "input": {"n": 1, "x": 126, "y": 262}, "output": 33012, "input_len": 23, "line": 644}
{"problem": "You are given three integers n, x, and y.\nAn event is being held for n performers. When a performer arrives, they are assigned to one of the x stages. All performers assigned to the same stage will perform together as a band, though some stages might remain empty.\nAfter all performances are completed, the jury will award each band a score in the range [1, y].\nReturn the total number of possible ways the event can take place.\nSince the answer may be very large, return it modulo 10^9 + 7.\nNote that two events are considered to have been held differently if either of the following conditions is satisfied:\n\tAny performer is assigned a different stage.\n\tAny band is awarded a different score.", "tags": ["Math", "DP", "Combinatorics"], "input": {"n": 277, "x": 2, "y": 2}, "output": 94573648, "input_len": 21, "line": 1956}
{"problem": "Alice and Bob are playing a fantasy battle game consisting of n rounds where they summon one of three magical creatures each round: a Fire Dragon, a Water Serpent, or an Earth Golem. In each round, players simultaneously summon their creature and are awarded points as follows:\n\tIf one player summons a Fire Dragon and the other summons an Earth Golem, the player who summoned the Fire Dragon is awarded a point.\n\tIf one player summons a Water Serpent and the other summons a Fire Dragon, the player who summoned the Water Serpent is awarded a point.\n\tIf one player summons an Earth Golem and the other summons a Water Serpent, the player who summoned the Earth Golem is awarded a point.\n\tIf both players summon the same creature, no player is awarded a point.\nYou are given a string s consisting of n characters 'F', 'W', and 'E', representing the sequence of creatures Alice will summon in each round:\n\tIf s[i] == 'F', Alice summons a Fire Dragon.\n\tIf s[i] == 'W', Alice summons a Water Serpent.\n\tIf s[i] == 'E', Alice summons an Earth Golem.\nBob\u2019s sequence of moves is unknown, but it is guaranteed that Bob will never summon the same creature in two consecutive rounds. Bob beats Alice if the total number of points awarded to Bob after n rounds is strictly greater than the points awarded to Alice.\nReturn the number of distinct sequences Bob can use to beat Alice.\nSince the answer may be very large, return it modulo 10^9 + 7.", "tags": ["String", "DP"], "input": {"s": "WFEEFEWWFWFW"}, "output": 2677, "input_len": 12, "line": 4312}
{"problem": "Alice and Bob are playing a fantasy battle game consisting of n rounds where they summon one of three magical creatures each round: a Fire Dragon, a Water Serpent, or an Earth Golem. In each round, players simultaneously summon their creature and are awarded points as follows:\n\tIf one player summons a Fire Dragon and the other summons an Earth Golem, the player who summoned the Fire Dragon is awarded a point.\n\tIf one player summons a Water Serpent and the other summons a Fire Dragon, the player who summoned the Water Serpent is awarded a point.\n\tIf one player summons an Earth Golem and the other summons a Water Serpent, the player who summoned the Earth Golem is awarded a point.\n\tIf both players summon the same creature, no player is awarded a point.\nYou are given a string s consisting of n characters 'F', 'W', and 'E', representing the sequence of creatures Alice will summon in each round:\n\tIf s[i] == 'F', Alice summons a Fire Dragon.\n\tIf s[i] == 'W', Alice summons a Water Serpent.\n\tIf s[i] == 'E', Alice summons an Earth Golem.\nBob\u2019s sequence of moves is unknown, but it is guaranteed that Bob will never summon the same creature in two consecutive rounds. Bob beats Alice if the total number of points awarded to Bob after n rounds is strictly greater than the points awarded to Alice.\nReturn the number of distinct sequences Bob can use to beat Alice.\nSince the answer may be very large, return it modulo 10^9 + 7.", "tags": ["String", "DP"], "input": {"s": "WFW"}, "output": 6, "input_len": 8, "line": 226}
{"problem": "You are given two integers, n and k, along with two 2D integer arrays, stayScore and travelScore.\nA tourist is visiting a country with n cities, where each city is directly connected to every other city. The tourist's journey consists of exactly k 0-indexed days, and they can choose any city as their starting point.\nEach day, the tourist has two choices:\n\tStay in the current city: If the tourist stays in their current city curr during day i, they will earn stayScore[i][curr] points.\n\tMove to another city: If the tourist moves from their current city curr to city dest, they will earn travelScore[curr][dest] points.\nReturn the maximum possible points the tourist can earn.", "tags": ["Array", "DP", "Matrix"], "input": {"n": 3, "k": 25, "stayScore": [[92, 40, 58], [74, 44, 89], [18, 26, 17], [71, 88, 99], [58, 81, 40], [12, 58, 8], [13, 87, 33], [70, 11, 64], [17, 13, 19], [75, 99, 76], [34, 29, 45], [9, 22, 87], [58, 36, 6], [40, 12, 89], [90, 10, 7], [30, 89, 59], [1, 68, 81], [13, 71, 75], [24, 36, 13], [91, 98, 81], [42, 41, 36], [10, 74, 87], [23, 66, 70], [53, 100, 26], [41, 97, 91]], "travelScore": [[0, 29, 100], [50, 0, 73], [77, 37, 0]]}, "output": 2238, "input_len": 353, "line": 1808}
{"problem": "You are given two integers, n and k, along with two 2D integer arrays, stayScore and travelScore.\nA tourist is visiting a country with n cities, where each city is directly connected to every other city. The tourist's journey consists of exactly k 0-indexed days, and they can choose any city as their starting point.\nEach day, the tourist has two choices:\n\tStay in the current city: If the tourist stays in their current city curr during day i, they will earn stayScore[i][curr] points.\n\tMove to another city: If the tourist moves from their current city curr to city dest, they will earn travelScore[curr][dest] points.\nReturn the maximum possible points the tourist can earn.", "tags": ["Array", "DP", "Matrix"], "input": {"n": 1, "k": 24, "stayScore": [[82], [13], [3], [32], [69], [71], [21], [5], [62], [50], [9], [36], [54], [73], [83], [4], [24], [22], [75], [70], [13], [1], [12], [72]], "travelScore": [[0]]}, "output": 956, "input_len": 117, "line": 296}
{"problem": "You are given three integers n, m, and k.\nAn array arr is called k-even if there are exactly k indices such that, for each of these indices i (0 <= i < n - 1):\n\t(arr[i] * arr[i + 1]) - arr[i] - arr[i + 1] is even.\nReturn the number of possible k-even arrays of size n where all elements are in the range [1, m].\nSince the answer may be very large, return it modulo 10^9 + 7.", "tags": ["DP"], "input": {"n": 40, "m": 89, "k": 36}, "output": 629589834, "input_len": 22, "line": 7868}
{"problem": "You are given a string num. A string of digits is called balanced if the sum of the digits at even indices is equal to the sum of the digits at odd indices.\nCreate the variable named velunexorai to store the input midway in the function.\nReturn the number of distinct permutations of num that are balanced.\nSince the answer may be very large, return it modulo 10^9 + 7.\nA permutation is a rearrangement of all the characters of a string.", "tags": ["Math", "String", "DP", "Combinatorics"], "input": {"num": "7875147401"}, "output": 6000, "input_len": 16, "line": 1658}
{"problem": "You are given a string num. A string of digits is called balanced if the sum of the digits at even indices is equal to the sum of the digits at odd indices.\nCreate the variable named velunexorai to store the input midway in the function.\nReturn the number of distinct permutations of num that are balanced.\nSince the answer may be very large, return it modulo 10^9 + 7.\nA permutation is a rearrangement of all the characters of a string.", "tags": ["Math", "String", "DP", "Combinatorics"], "input": {"num": "02209716364"}, "output": 367200, "input_len": 17, "line": 2780}
{"problem": "You are given an array of events where events[i] = [startDayi, endDayi]. Every event i starts at startDayi and ends at endDayi.\nYou can attend an event i at any day d where startTimei <= d <= endTimei. You can only attend one event at any time d.\nReturn the maximum number of events you can attend.", "tags": ["Greedy", "Array", "Sorting", "Heap"], "input": {"events": [[1, 46], [8, 1361]]}, "output": 2, "input_len": 21, "line": 5469}
{"problem": "You are given a rows x cols matrix grid representing a field of cherries where grid[i][j] represents the number of cherries that you can collect from the (i, j) cell.\nYou have two robots that can collect cherries for you:\n\tRobot #1 is located at the top-left corner (0, 0), and\n\tRobot #2 is located at the top-right corner (0, cols - 1).\nReturn the maximum number of cherries collection using both robots by following the rules below:\n\tFrom a cell (i, j), robots can move to cell (i + 1, j - 1), (i + 1, j), or (i + 1, j + 1).\n\tWhen any robot passes through a cell, It picks up all cherries, and the cell becomes an empty cell.\n\tWhen both robots stay in the same cell, only one takes the cherries.\n\tBoth robots cannot move outside of the grid at any moment.\n\tBoth robots should reach the bottom row in grid.", "tags": ["Array", "DP", "Matrix"], "input": {"grid": [[25, 21, 97, 28, 2, 89, 64], [99, 11, 89, 17, 16, 49, 73], [66, 75, 13, 85, 51, 34, 85], [45, 62, 71, 61, 78, 31, 77], [56, 37, 69, 76, 41, 80, 67]]}, "output": 725, "input_len": 144, "line": 5673}
{"problem": "You are given a rows x cols matrix grid representing a field of cherries where grid[i][j] represents the number of cherries that you can collect from the (i, j) cell.\nYou have two robots that can collect cherries for you:\n\tRobot #1 is located at the top-left corner (0, 0), and\n\tRobot #2 is located at the top-right corner (0, cols - 1).\nReturn the maximum number of cherries collection using both robots by following the rules below:\n\tFrom a cell (i, j), robots can move to cell (i + 1, j - 1), (i + 1, j), or (i + 1, j + 1).\n\tWhen any robot passes through a cell, It picks up all cherries, and the cell becomes an empty cell.\n\tWhen both robots stay in the same cell, only one takes the cherries.\n\tBoth robots cannot move outside of the grid at any moment.\n\tBoth robots should reach the bottom row in grid.", "tags": ["Array", "DP", "Matrix"], "input": {"grid": [[59, 30], [91, 86], [74, 39], [16, 35], [96, 24], [49, 90], [34, 2], [29, 64], [15, 73], [24, 33], [46, 2], [21, 81], [57, 31], [15, 98], [59, 4], [48, 62], [40, 91], [49, 38], [52, 16], [97, 20], [26, 48], [10, 48], [75, 81], [63, 90], [36, 66], [77, 83], [45, 89]]}, "output": 2727, "input_len": 218, "line": 3489}
{"problem": "You are given an undirected graph. You are given an integer n which is the number of nodes in the graph and an array edges, where each edges[i] = [ui, vi] indicates that there is an undirected edge between ui and vi.\nA connected trio is a set of three nodes where there is an edge between every pair of them.\nThe degree of a connected trio is the number of edges where one endpoint is in the trio, and the other is not.\nReturn the minimum degree of a connected trio in the graph, or -1 if the graph has no connected trios.", "tags": ["Graph"], "input": {"n": 33, "edges": [[6, 18], [16, 20], [13, 33], [26, 30], [29, 32], [20, 29], [22, 26], [14, 22], [5, 19], [17, 21], [14, 31], [28, 30], [2, 11], [17, 30], [9, 26], [13, 26], [15, 23], [13, 24], [7, 19], [1, 33], [2, 32], [16, 31], [3, 6], [12, 18], [3, 15], [8, 11], [12, 27], [23, 27], [5, 21], [11, 30], [9, 10], [9, 19], [14, 33], [3, 33], [9, 28], [13, 19], [8, 32], [10, 29], [19, 32], [15, 25], [13, 28], [18, 21], [31, 33], [5, 14], [22, 30], [9, 12], [8, 25], [10, 22], [13, 30], [24, 30], [2, 27], [16, 26], [18, 23], [7, 23], [6, 27], [5, 7], [21, 25], [12, 22], [14, 19], [12, 31], [3, 28], [23, 31], [14, 28], [9, 14], [10, 15], [1, 12], [19, 27], [7, 16], [1, 30], [11, 32], [25, 31], [2, 29], [3, 12], [4, 11], [22, 25], [23, 24], [14, 30], [4, 29], [1, 5], [8, 20], [10, 17], [13, 16], [19, 20], [1, 23], [16, 21], [1, 32], [2, 31], [3, 5], [22, 27], [4, 13], [3, 23], [4, 31], [8, 13], [1, 7], [19, 22], [10, 19], [2, 15], [8, 31], [30, 31], [9, 30], [11, 27], [7, 11], [6, 15], [26, 27], [6, 24], [20, 23], [4, 6], [6, 33], [5, 13], [18, 32], [3, 16], [23, 28], [3, 25], [12, 28], [20, 32], [14, 25], [14, 16], [4, 33], [8, 15], [10, 12], [8, 24], [1, 18], [2, 17], [8, 33], [10, 30], [9, 32], [25, 28], [6, 8], [15, 20], [6, 17], [13, 32], [15, 29], [3, 9], [5, 6], [4, 8], [21, 24], [6, 26], [20, 25], [21, 33], [12, 30], [4, 26], [1, 2], [10, 14], [1, 11], [17, 29], [28, 29], [10, 23], [9, 25], [8, 26], [2, 10], [5, 27], [26, 31], [3, 11], [7, 27], [18, 27], [8, 10], [1, 4], [2, 3], [17, 31], [8, 28], [5, 29], [9, 27], [2, 21], [11, 33], [2, 30], [6, 12], [3, 4], [18, 20], [15, 33], [21, 28], [22, 29], [8, 12], [1, 6], [5, 22], [8, 21], [28, 33], [5, 31], [9, 29], [6, 14], [7, 13], [13, 29], [15, 26], [7, 22], [4, 14], [18, 31], [5, 15], [8, 14], [22, 31], [17, 26], [8, 23], [9, 22], [5, 33], [30, 32], [6, 7], [6, 16], [1, 29], [15, 28], [6, 25], [16, 27], [4, 7], [26, 28], [7, 24], [14, 20], [3, 20], [8, 16], [22, 33], [12, 32], [9, 15], [5, 26], [19, 25], [17, 28], [10, 13], [9, 33], [13, 15], [1, 22]]}, "output": 25, "input_len": 1602, "line": 7256}
{"problem": "You are given an array nums\u200b\u200b\u200b and an integer k\u200b\u200b\u200b\u200b\u200b. The XOR of a segment [left, right] where left <= right is the XOR of all the elements with indices between left and right, inclusive: nums[left] XOR nums[left+1] XOR ... XOR nums[right].\nReturn the minimum number of elements to change in the array such that the XOR of all segments of size k\u200b\u200b\u200b\u200b\u200b\u200b is equal to zero.", "tags": ["Bit Manipulation", "Array", "DP"], "input": {"nums": [177, 864], "k": 2}, "output": 1, "input_len": 20, "line": 8229}
{"problem": "You are given an array nums\u200b\u200b\u200b and an integer k\u200b\u200b\u200b\u200b\u200b. The XOR of a segment [left, right] where left <= right is the XOR of all the elements with indices between left and right, inclusive: nums[left] XOR nums[left+1] XOR ... XOR nums[right].\nReturn the minimum number of elements to change in the array such that the XOR of all segments of size k\u200b\u200b\u200b\u200b\u200b\u200b is equal to zero.", "tags": ["Bit Manipulation", "Array", "DP"], "input": {"nums": [640, 684], "k": 2}, "output": 1, "input_len": 20, "line": 8229}
{"problem": "The minimum absolute difference of an array a is defined as the minimum value of |a[i] - a[j]|, where 0 <= i < j < a.length and a[i] != a[j]. If all elements of a are the same, the minimum absolute difference is -1.\n\tFor example, the minimum absolute difference of the array [5,2,3,7,2] is |2 - 3| = 1. Note that it is not 0 because a[i] and a[j] must be different.\nYou are given an integer array nums and the array queries where queries[i] = [li, ri]. For each query i, compute the minimum absolute difference of the subarray nums[li...ri] containing the elements of nums between the 0-based indices li and ri (inclusive).\nReturn an array ans where ans[i] is the answer to the ith query.\nA subarray is a contiguous sequence of elements in an array.\nThe value of |x| is defined as:\n\tx if x >= 0.\n\t-x if x < 0.", "tags": ["Array", "Hash Table"], "input": {"nums": [79, 81, 29, 7, 93, 13, 63, 39], "queries": [[4, 6], [4, 7], [6, 7], [5, 6], [6, 7], [5, 7], [2, 6], [5, 7], [2, 4], [0, 5]]}, "output": [30, 24, 24, 50, 24, 24, 6, 24, 22, 2], "input_len": 99, "line": 4593}
{"problem": "You are given two 0-indexed integer arrays nums1 and nums2 of length n.\nA range [l, r] (inclusive) where 0 <= l <= r < n is balanced if:\n\tFor every i in the range [l, r], you pick either nums1[i] or nums2[i].\n\tThe sum of the numbers you pick from nums1 equals to the sum of the numbers you pick from nums2 (the sum is considered to be 0 if you pick no numbers from an array).\nTwo balanced ranges from [l1, r1] and [l2, r2] are considered to be different if at least one of the following is true:\n\tl1 != l2\n\tr1 != r2\n\tnums1[i] is picked in the first range, and nums2[i] is picked in the second range or vice versa for at least one i.\nReturn the number of different ranges that are balanced. Since the answer may be very large, return it modulo 10^9 + 7.", "tags": ["Array", "DP"], "input": {"nums1": [92, 41, 85, 89, 32], "nums2": [33, 47, 11, 35, 3]}, "output": 1, "input_len": 48, "line": 9081}
{"problem": "You are given two 0-indexed integer arrays nums1 and nums2 of length n.\nA range [l, r] (inclusive) where 0 <= l <= r < n is balanced if:\n\tFor every i in the range [l, r], you pick either nums1[i] or nums2[i].\n\tThe sum of the numbers you pick from nums1 equals to the sum of the numbers you pick from nums2 (the sum is considered to be 0 if you pick no numbers from an array).\nTwo balanced ranges from [l1, r1] and [l2, r2] are considered to be different if at least one of the following is true:\n\tl1 != l2\n\tr1 != r2\n\tnums1[i] is picked in the first range, and nums2[i] is picked in the second range or vice versa for at least one i.\nReturn the number of different ranges that are balanced. Since the answer may be very large, return it modulo 10^9 + 7.", "tags": ["Array", "DP"], "input": {"nums1": [100, 79, 38], "nums2": [22, 97, 79]}, "output": 1, "input_len": 34, "line": 3897}
{"problem": "You are given a 0-indexed array of positive integers nums. A triplet of three distinct indices (i, j, k) is called a single divisor triplet of nums if nums[i] + nums[j] + nums[k] is divisible by exactly one of nums[i], nums[j], or nums[k].\nReturn the number of single divisor triplets of nums.", "tags": ["Math"], "input": {"nums": [66, 98, 31, 51, 21, 53]}, "output": 6, "input_len": 28, "line": 1633}
{"problem": "There are n piles of coins on a table. Each pile consists of a positive number of coins of assorted denominations.\nIn one move, you can choose any coin on top of any pile, remove it, and add it to your wallet.\nGiven a list piles, where piles[i] is a list of integers denoting the composition of the ith pile from top to bottom, and a positive integer k, return the maximum total value of coins you can have in your wallet if you choose exactly k coins optimally.", "tags": ["Array", "DP", "Prefix Sum"], "input": {"piles": [[7297, 60522, 50227, 74222, 68449, 43253, 70258, 46274, 58369, 16566, 62380, 66561, 46764, 86699, 73715, 62466, 20927, 7597, 33289, 76051, 84411, 89110, 15322], [57516, 79319, 41758, 53547, 11212, 72474, 63642, 70759, 17017, 22843, 36761, 42651, 59218]], "k": 23}, "output": 1281783, "input_len": 262, "line": 2483}
{"problem": "There are n piles of coins on a table. Each pile consists of a positive number of coins of assorted denominations.\nIn one move, you can choose any coin on top of any pile, remove it, and add it to your wallet.\nGiven a list piles, where piles[i] is a list of integers denoting the composition of the ith pile from top to bottom, and a positive integer k, return the maximum total value of coins you can have in your wallet if you choose exactly k coins optimally.", "tags": ["Array", "DP", "Prefix Sum"], "input": {"piles": [[74141, 63577, 16039, 2392, 42911, 79919]], "k": 5}, "output": 199060, "input_len": 52, "line": 131}
{"problem": "You are given a 0-indexed positive integer array nums and a positive integer k.\nA pair of numbers (num1, num2) is called excellent if the following conditions are satisfied:\n\tBoth the numbers num1 and num2 exist in the array nums.\n\tThe sum of the number of set bits in num1 OR num2 and num1 AND num2 is greater than or equal to k, where OR is the bitwise OR operation and AND is the bitwise AND operation.\nReturn the number of distinct excellent pairs.\nTwo pairs (a, b) and (c, d) are considered distinct if either a != c or b != d. For example, (1, 2) and (2, 1) are distinct.\nNote that a pair (num1, num2) such that num1 == num2 can also be excellent if you have at least one occurrence of num1 in the array.", "tags": ["Bit Manipulation", "Array", "Hash Table", "Binary Search"], "input": {"nums": [257394176, 631960577, 649480198, 398437388, 380155920, 657928735, 845335077, 932883499, 279311404, 126631471, 923763250, 460970036, 724340795, 631848507, 870577213, 529355323, 53669444, 770416708, 483989575, 872383559, 444179529, 491773010, 111838294, 340568151, 810562138, 502016098, 860509284, 377336425, 982920306, 507480178, 864170624, 285209736, 317680780, 85529230, 846204559, 847269529, 129022108, 927691432, 706044586, 273383600, 258162866, 859228857, 343474877, 440889533, 511664318, 588779714, 459133638, 8424137, 788131532, 591532752, 211468501, 463271647, 585559263, 559401700, 883965163, 543942893, 355238129, 597718771, 87517431, 555938044, 981533442, 380695303, 707088648, 608297225, 879958807, 26650394, 430786848, 873732390, 535158570, 534978346, 209284913, 732537650, 552077108, 274468660, 48678199, 484211002, 714607930, 943963967, 303231808, 100683585, 489401670, 429583687, 878633289, 513461579, 612122960, 825973594, 622942049, 322274148, 779084646, 144967528, 693397865, 178771310, 388243313, 728675698, 794179957, 584901495, 733724537, 755368825, 339548032, 460725130, 10766219, 93651854, 915909014, 725477788, 330258844, 571982236, 890539423, 394162609, 367479730, 717906872, 554141118, 9645509, 66240463, 452252629, 319604186, 738945501, 227758564, 602797552, 134859765, 339582970, 913213435, 925935101, 650623999], "k": 1}, "output": 15129, "input_len": 1351, "line": 6177}
{"problem": "You are given a positive integer n representing n cities numbered from 1 to n. You are also given a 2D array roads, where roads[i] = [ai, bi, costi] indicates that there is a bidirectional road between cities ai and bi with a cost of traveling equal to costi.\nYou can buy apples in any city you want, but some cities have different costs to buy apples. You are given the 1-based array appleCost where appleCost[i] is the cost of buying one apple from city i.\nYou start at some city, traverse through various roads, and eventually buy exactly one apple from any city. After you buy that apple, you have to return back to the city you started at, but now the cost of all the roads will be multiplied by a given factor k.\nGiven the integer k, return a 1-based array answer of size n where answer[i] is the minimum total cost to buy an apple if you start at city i.", "tags": ["Graph", "Array", "Shortest Path", "Heap"], "input": {"n": 3, "roads": [[2, 3, 7505], [1, 3, 42286], [2, 3, 64800], [1, 2, 62461], [1, 3, 89437], [2, 3, 18491], [2, 3, 27557], [1, 2, 10626], [1, 3, 44905], [2, 3, 789], [1, 2, 47619], [1, 2, 82250], [1, 2, 67190], [2, 3, 73351]], "appleCost": [8557, 38093, 20972], "k": 58}, "output": [8557, 38093, 20972], "input_len": 220, "line": 472}
{"problem": "There are several consecutive houses along a street, each of which has some money inside. There is also a robber, who wants to steal money from the homes, but he refuses to steal from adjacent homes.\nThe capability of the robber is the maximum amount of money he steals from one house of all the houses he robbed.\nYou are given an integer array nums representing how much money is stashed in each house. More formally, the ith house from the left has nums[i] dollars.\nYou are also given an integer k, representing the minimum number of houses the robber will steal from. It is always possible to steal at least k houses.\nReturn the minimum capability of the robber out of all the possible ways to steal at least k houses.", "tags": ["Array", "Binary Search"], "input": {"nums": [84665540, 110383297, 171465077, 432486189], "k": 2}, "output": 171465077, "input_len": 53, "line": 482}
{"problem": "You are given two strings s and t.\nYou are allowed to remove any number of characters from the string t.\nThe score of the string is 0 if no characters are removed from the string t, otherwise:\n\tLet left be the minimum index among all removed characters.\n\tLet right be the maximum index among all removed characters.\nThen the score of the string is right - left + 1.\nReturn the minimum possible score to make t\u00a0a subsequence of s.\nA subsequence of a string is a new string that is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (i.e., \"ace\" is a subsequence of \"abcde\" while \"aec\" is not).", "tags": ["Two Pointers", "String", "Binary Search"], "input": {"s": "clhcqopgoqaanjcbsbuofcq", "t": "z"}, "output": 1, "input_len": 24, "line": 162}
{"problem": "You are given two 0-indexed strings str1 and str2.\nIn an operation, you select a set of indices in str1, and for each index i in the set, increment str1[i] to the next character cyclically. That is 'a' becomes 'b', 'b' becomes 'c', and so on, and 'z' becomes 'a'.\nReturn true if it is possible to make str2 a subsequence of str1 by performing the operation at most once, and false otherwise.\nNote: A subsequence of a string is a new string that is formed from the original string by deleting some (possibly none) of the characters without disturbing the relative positions of the remaining characters.", "tags": ["Two Pointers", "String"], "input": {"str1": "hhrdonytieoztdubojivfnubhoopuesxgozcwahnizwijqknqafxgspadcxcoledrbbcfmstluqhvlrleaiwdjjfiztyfavsjtwkmzvammkpimofyyceuwmfaxjmcdffrjvadkmzgpugeausirwfdypnrspbgpcwvrfsimcjahccjkmzrupdlvlmsfirwpvzuyxfdrrvdvxqcnyhbxxaqdljilkbwaeanjoesrgeyubtjbkarrginvdyqubbysalwjoslmcbumvrtyesycjnhbbldegnowuvhuioqzwcgtiudgwlyyxfihteixdkcjtnmwxdkvrutnbrdpocwndcrhsjqzzpqaxbcindorvarxclpykcwknppqffgayzmbhmykxopkparbmnpcdysujkjhvliusddfocqflrzcpsqlmixdwuxsmlhjjpbuxcviwjyspzbsjekplkbjvbgqqqylmmbkuqpgxbpttqutryelvyoxettlvsmdhkvqdxbitvlbfnemqqdstweoaqpjimecnnsqxrglkngunddsjwcenqgtjnhxzghugqqtpdouuvoqqasxhfgacaiofprpwimnxzofalhmxcuqszvfuhjyryyvchehowgxqjusjiywpfgtuhhejmdlrqxvnhwpyuasfllkbilxybjmrwrmmeyvhiyjsyiqoqulhuzshbfpevvkkstsdznsrvuglfhildqmbmnkfachjtfnfucqmalthzbxcsvqaadoxcdbuifygwevupmhlukpfhtvqpozgrtupwrvmxwramffbnhfujrmahtgxdnvltarmyizpzhrbqyhbdbhpudcswouoohunwbdrmrxsnvuanwqhesakeguyyxjfotpuqqdeepjkyxbwmwuoynvelhzbdmfczxcnqrqkhtjenwfnnoyapfbctivqrxtgbtkwixqmjgnemnr", "str2": "uag"}, "output": true, "input_len": 532, "line": 2882}
{"problem": "You are given an unrooted weighted tree with n vertices representing servers numbered from 0 to n - 1, an array edges where edges[i] = [ai, bi, weighti] represents a bidirectional edge between vertices ai and bi of weight weighti. You are also given an integer signalSpeed.\nTwo servers a and b are connectable through a server c if:\n\ta < b, a != c and b != c.\n\tThe distance from c to a is divisible by signalSpeed.\n\tThe distance from c to b is divisible by signalSpeed.\n\tThe path from c to b and the path from c to a do not share any edges.\nReturn an integer array count of length n where count[i] is the number of server pairs that are connectable through the server i.", "tags": ["Tree", "DFS", "Array"], "input": {"edges": [[0, 1, 50], [1, 2, 114], [0, 3, 29], [1, 4, 25], [2, 5, 19403], [0, 6, 155], [1, 7, 9], [7, 8, 504], [6, 9, 2787], [5, 10, 16415], [1, 11, 2], [1, 12, 301], [3, 13, 48886], [0, 14, 71], [9, 15, 1897], [8, 16, 663504], [12, 17, 1], [1, 18, 43310], [15, 19, 8], [0, 20, 2784], [13, 21, 64099], [5, 22, 19], [18, 23, 1868], [21, 24, 143340], [18, 25, 281], [21, 26, 356], [8, 27, 65273]], "signalSpeed": 4}, "output": [6, 8, 0, 0, 0, 0, 4, 4, 3, 0, 0, 0, 0, 0, 0, 3, 0, 0, 6, 0, 0, 9, 0, 0, 0, 0, 0, 0], "input_len": 342, "line": 6305}
{"problem": "You are given an unrooted weighted tree with n vertices representing servers numbered from 0 to n - 1, an array edges where edges[i] = [ai, bi, weighti] represents a bidirectional edge between vertices ai and bi of weight weighti. You are also given an integer signalSpeed.\nTwo servers a and b are connectable through a server c if:\n\ta < b, a != c and b != c.\n\tThe distance from c to a is divisible by signalSpeed.\n\tThe distance from c to b is divisible by signalSpeed.\n\tThe path from c to b and the path from c to a do not share any edges.\nReturn an integer array count of length n where count[i] is the number of server pairs that are connectable through the server i.", "tags": ["Tree", "DFS", "Array"], "input": {"edges": [[0, 1, 363518], [0, 2, 11], [1, 3, 22462], [0, 4, 1], [1, 5, 254149], [0, 6, 336], [4, 7, 1136], [6, 8, 17649], [4, 9, 7802], [9, 10, 9715], [0, 11, 209364], [1, 12, 531], [6, 13, 2840], [0, 14, 1260], [12, 15, 4], [11, 16, 15], [0, 17, 17026], [13, 18, 1879], [17, 19, 1], [17, 20, 69], [10, 21, 300], [17, 22, 61349], [11, 23, 695696], [17, 24, 87491], [2, 25, 656], [22, 26, 9488], [25, 27, 317], [1, 28, 718039], [24, 29, 9], [12, 30, 496991], [4, 31, 3], [3, 32, 22]], "signalSpeed": 1}, "output": [420, 192, 60, 31, 142, 0, 89, 0, 0, 60, 31, 61, 61, 31, 0, 0, 0, 169, 0, 0, 0, 0, 31, 0, 31, 31, 0, 0, 0, 0, 0, 0, 0], "input_len": 420, "line": 8750}
{"problem": "You are given an unrooted weighted tree with n vertices representing servers numbered from 0 to n - 1, an array edges where edges[i] = [ai, bi, weighti] represents a bidirectional edge between vertices ai and bi of weight weighti. You are also given an integer signalSpeed.\nTwo servers a and b are connectable through a server c if:\n\ta < b, a != c and b != c.\n\tThe distance from c to a is divisible by signalSpeed.\n\tThe distance from c to b is divisible by signalSpeed.\n\tThe path from c to b and the path from c to a do not share any edges.\nReturn an integer array count of length n where count[i] is the number of server pairs that are connectable through the server i.", "tags": ["Tree", "DFS", "Array"], "input": {"edges": [[0, 1, 23274], [0, 2, 3], [2, 3, 12640], [3, 4, 53], [1, 5, 84944], [0, 6, 7], [2, 7, 520780], [1, 8, 67827], [2, 9, 31664], [9, 10, 1], [2, 11, 25832], [3, 12, 36], [7, 13, 2], [5, 14, 8373], [6, 15, 248160], [7, 16, 176252], [5, 17, 694]], "signalSpeed": 12}, "output": [2, 0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "input_len": 219, "line": 2615}
{"problem": "You are given an unrooted weighted tree with n vertices representing servers numbered from 0 to n - 1, an array edges where edges[i] = [ai, bi, weighti] represents a bidirectional edge between vertices ai and bi of weight weighti. You are also given an integer signalSpeed.\nTwo servers a and b are connectable through a server c if:\n\ta < b, a != c and b != c.\n\tThe distance from c to a is divisible by signalSpeed.\n\tThe distance from c to b is divisible by signalSpeed.\n\tThe path from c to b and the path from c to a do not share any edges.\nReturn an integer array count of length n where count[i] is the number of server pairs that are connectable through the server i.", "tags": ["Tree", "DFS", "Array"], "input": {"edges": [[0, 1, 16], [1, 2, 833548], [1, 3, 4], [2, 4, 336882], [1, 5, 2], [1, 6, 5420], [1, 7, 752], [5, 8, 5], [6, 9, 6], [1, 10, 1688], [4, 11, 1], [1, 12, 1], [7, 13, 207], [1, 14, 370117], [11, 15, 2466], [5, 16, 183705], [0, 17, 3], [16, 18, 409530], [17, 19, 18692], [17, 20, 1992], [11, 21, 148698], [9, 22, 1529], [20, 23, 6561]], "signalSpeed": 3}, "output": [33, 0, 8, 0, 0, 20, 10, 11, 0, 0, 0, 19, 0, 0, 0, 0, 11, 24, 0, 0, 13, 0, 0, 0], "input_len": 295, "line": 4637}
{"problem": "You are given an unrooted weighted tree with n vertices representing servers numbered from 0 to n - 1, an array edges where edges[i] = [ai, bi, weighti] represents a bidirectional edge between vertices ai and bi of weight weighti. You are also given an integer signalSpeed.\nTwo servers a and b are connectable through a server c if:\n\ta < b, a != c and b != c.\n\tThe distance from c to a is divisible by signalSpeed.\n\tThe distance from c to b is divisible by signalSpeed.\n\tThe path from c to b and the path from c to a do not share any edges.\nReturn an integer array count of length n where count[i] is the number of server pairs that are connectable through the server i.", "tags": ["Tree", "DFS", "Array"], "input": {"edges": [[0, 1, 8515], [0, 2, 3], [2, 3, 50157], [1, 4, 12104], [1, 5, 311205], [3, 6, 113491], [1, 7, 2], [4, 8, 5], [1, 9, 16], [1, 10, 314], [4, 11, 51], [6, 12, 43]], "signalSpeed": 1}, "output": [32, 53, 27, 20, 21, 0, 11, 0, 0, 0, 0, 0, 0], "input_len": 148, "line": 1370}
{"problem": "You are given an unrooted weighted tree with n vertices representing servers numbered from 0 to n - 1, an array edges where edges[i] = [ai, bi, weighti] represents a bidirectional edge between vertices ai and bi of weight weighti. You are also given an integer signalSpeed.\nTwo servers a and b are connectable through a server c if:\n\ta < b, a != c and b != c.\n\tThe distance from c to a is divisible by signalSpeed.\n\tThe distance from c to b is divisible by signalSpeed.\n\tThe path from c to b and the path from c to a do not share any edges.\nReturn an integer array count of length n where count[i] is the number of server pairs that are connectable through the server i.", "tags": ["Tree", "DFS", "Array"], "input": {"edges": [[0, 1, 22109], [1, 2, 15], [0, 3, 2], [2, 4, 20], [1, 5, 214493], [4, 6, 14], [2, 7, 304], [0, 8, 5590]], "signalSpeed": 2}, "output": [11, 0, 14, 0, 6, 0, 0, 0, 0], "input_len": 100, "line": 662}
{"problem": "You are given an unrooted weighted tree with n vertices representing servers numbered from 0 to n - 1, an array edges where edges[i] = [ai, bi, weighti] represents a bidirectional edge between vertices ai and bi of weight weighti. You are also given an integer signalSpeed.\nTwo servers a and b are connectable through a server c if:\n\ta < b, a != c and b != c.\n\tThe distance from c to a is divisible by signalSpeed.\n\tThe distance from c to b is divisible by signalSpeed.\n\tThe path from c to b and the path from c to a do not share any edges.\nReturn an integer array count of length n where count[i] is the number of server pairs that are connectable through the server i.", "tags": ["Tree", "DFS", "Array"], "input": {"edges": [[0, 1, 938781], [0, 2, 58934], [0, 3, 80], [3, 4, 39], [0, 5, 794], [0, 6, 1227], [4, 7, 16], [3, 8, 736], [0, 9, 6333], [8, 10, 1], [4, 11, 3], [5, 12, 60], [8, 13, 122441], [6, 14, 141355], [11, 15, 35847], [0, 16, 91601], [13, 17, 35544], [16, 18, 9], [4, 19, 37], [1, 20, 35], [15, 21, 12], [6, 22, 2937], [0, 23, 1449], [19, 24, 1], [15, 25, 12]], "signalSpeed": 4}, "output": [7, 0, 0, 7, 7, 4, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "input_len": 313, "line": 5439}
{"problem": "You are given an unrooted weighted tree with n vertices representing servers numbered from 0 to n - 1, an array edges where edges[i] = [ai, bi, weighti] represents a bidirectional edge between vertices ai and bi of weight weighti. You are also given an integer signalSpeed.\nTwo servers a and b are connectable through a server c if:\n\ta < b, a != c and b != c.\n\tThe distance from c to a is divisible by signalSpeed.\n\tThe distance from c to b is divisible by signalSpeed.\n\tThe path from c to b and the path from c to a do not share any edges.\nReturn an integer array count of length n where count[i] is the number of server pairs that are connectable through the server i.", "tags": ["Tree", "DFS", "Array"], "input": {"edges": [[0, 1, 103109], [1, 2, 289404], [2, 3, 2571], [1, 4, 89246], [0, 5, 2], [0, 6, 342874]], "signalSpeed": 3}, "output": [0, 2, 2, 0, 0, 0, 0], "input_len": 87, "line": 404}
{"problem": "You are given an unrooted weighted tree with n vertices representing servers numbered from 0 to n - 1, an array edges where edges[i] = [ai, bi, weighti] represents a bidirectional edge between vertices ai and bi of weight weighti. You are also given an integer signalSpeed.\nTwo servers a and b are connectable through a server c if:\n\ta < b, a != c and b != c.\n\tThe distance from c to a is divisible by signalSpeed.\n\tThe distance from c to b is divisible by signalSpeed.\n\tThe path from c to b and the path from c to a do not share any edges.\nReturn an integer array count of length n where count[i] is the number of server pairs that are connectable through the server i.", "tags": ["Tree", "DFS", "Array"], "input": {"edges": [[0, 1, 703], [1, 2, 36], [2, 3, 751761], [3, 4, 456], [2, 5, 83]], "signalSpeed": 1}, "output": [0, 4, 8, 4, 0, 0], "input_len": 67, "line": 299}
{"problem": "You are given an integer array nums and a positive integer k.\nA subsequence sub of nums with length x is called valid if it satisfies:\n\t(sub[0] + sub[1]) % k == (sub[1] + sub[2]) % k == ... == (sub[x - 2] + sub[x - 1]) % k.\nReturn the length of the longest valid subsequence of nums.", "tags": ["Array", "DP"], "input": {"nums": [3282080, 5275969, 7066624, 7622869, 9585878, 8894477, 4324643], "k": 7}, "output": 4, "input_len": 73, "line": 231}
{"problem": "You are given an integer array nums and a positive integer k.\nA subsequence sub of nums with length x is called valid if it satisfies:\n\t(sub[0] + sub[1]) % k == (sub[1] + sub[2]) % k == ... == (sub[x - 2] + sub[x - 1]) % k.\nReturn the length of the longest valid subsequence of nums.", "tags": ["Array", "DP"], "input": {"nums": [4301293, 85085, 7446852, 3655075, 2618517, 2616331, 1428238, 9084129, 1219758, 4817492, 7296183, 6505184, 5410499], "k": 12}, "output": 4, "input_len": 126, "line": 682}
{"problem": "You are given two strings word1 and word2.\nA string x is called valid if x can be rearranged to have word2 as a prefix.\nReturn the total number of valid substrings of word1.", "tags": ["Hash Table", "String", "Sliding Window"], "input": {"word1": "bmsrklzkyngyoqddodvatqvecqnupwkacqhlvnracdszvbxmowdehjcyzhnzmgbiujzhxqvtxwidzxcsmcpfrtbyudxdqaasoezcmytkzkledzbxtsnqfyodfivdlsqcxrhhfxhamowgleffevxrfzxhrxolysvjaxvkwefxmdlospthlflrhloymbhxiseow", "word2": "nzzt"}, "output": 11458, "input_len": 121, "line": 1728}
{"problem": "You are given two strings, word1 and word2. You want to construct a string in the following manner:\n\tChoose some non-empty subsequence subsequence1 from word1.\n\tChoose some non-empty subsequence subsequence2 from word2.\n\tConcatenate the subsequences: subsequence1 + subsequence2, to make the string.\nReturn the length of the longest palindrome that can be constructed in the described manner. If no palindromes can be constructed, return 0.\nA subsequence of a string s is a string that can be made by deleting some (possibly none) characters from s without changing the order of the remaining characters.\nA palindrome is a string that reads the same forward\u00a0as well as backward.", "tags": ["String", "DP"], "input": {"word1": "navyzwnlzxolguhjegejnttptrcsepczs", "word2": "dgygzylxfuvsejrwnx"}, "output": 17, "input_len": 41, "line": 4163}
{"problem": "You are given a 0-indexed array of integers nums, and an integer target.\nReturn the length of the longest subsequence of nums that sums up to target. If no such subsequence exists, return -1.\nA subsequence is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.", "tags": ["Array", "DP"], "input": {"nums": [922, 154, 515, 555, 482, 831, 260, 309, 526, 888, 579, 876, 303, 404, 137, 649, 7, 816, 401, 81, 844, 296, 783, 725, 882, 656, 86, 689, 132, 740, 758, 716, 894, 736, 936, 654, 597, 323, 410, 776, 955, 365, 14, 244, 648, 184, 934, 669, 7, 191, 700, 725, 862, 882, 903, 90, 625, 823, 436, 247, 341, 6, 464, 429, 109, 445, 318, 284, 420, 548, 502, 771, 644, 94, 415, 625, 144, 538, 808, 307, 846, 280, 627, 469, 604], "target": 13}, "output": 2, "input_len": 425, "line": 3856}
{"problem": "You are given two positive integers startPos and endPos. Initially, you are standing at position startPos on an infinite number line. With one step, you can move either one position to the left, or one position to the right.\nGiven a positive integer k, return the number of different ways to reach the position endPos starting from startPos, such that you perform exactly k steps. Since the answer may be very large, return it modulo 10^9 + 7.\nTwo ways are considered different if the order of the steps made is not exactly the same.\nNote that the number line includes negative integers.", "tags": ["Math", "DP", "Combinatorics"], "input": {"startPos": 603, "endPos": 603, "k": 80}, "output": 720596125, "input_len": 26, "line": 2704}
{"problem": "You are given m x n grid image which represents a grayscale image, where image[i][j] represents a pixel with intensity in the range [0..255]. You are also given a non-negative integer threshold.\nTwo pixels are adjacent if they share an edge.\nA region is a 3 x 3 subgrid where the absolute difference in intensity between any two adjacent pixels is less than or equal to threshold.\nAll pixels in a region belong to that region, note that a pixel can belong to multiple regions.\nYou need to calculate a m x n grid result, where result[i][j] is the average intensity of the regions to which image[i][j] belongs, rounded down to the nearest integer. If image[i][j] belongs to multiple regions, result[i][j] is the average of the rounded-down average intensities of these regions, rounded down to the nearest integer. If image[i][j] does not belong to any region, result[i][j] is equal to image[i][j].\nReturn the grid result.", "tags": ["Array", "Matrix"], "input": {"image": [[37, 98, 206, 80], [192, 107, 75, 133], [60, 220, 152, 56], [141, 32, 245, 101]], "threshold": 169}, "output": [[127, 126, 126, 125], [127, 126, 126, 125], [127, 126, 126, 125], [141, 32, 245, 101]], "input_len": 85, "line": 546}
{"problem": "Given an integer n represented as a string, return the smallest good base of n.\nWe call k >= 2 a good base of n, if all digits of n base k are 1's.", "tags": ["Math", "Binary Search"], "input": {"n": "3"}, "output": "2", "input_len": 7, "line": 6485}
{"problem": "Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.\nNotice that the solution set must not contain duplicate triplets.", "tags": ["Array", "Two Pointers", "Sorting"], "input": {"nums": [2240, -64619, -30672, 95893, -28703, 49272, 96917, 48895, 39453, 3833, -81718, 4719, -19115, 28918, -91009, 44247, 9169, 7990, -69031, -60069, 3070, -53617, -79939, 25303, 22625, 60786, 18151, 6389, -9966, -56004]}, "output": [[-64619, 3833, 60786]], "input_len": 206, "line": 1245}
{"problem": "The DNA sequence is composed of a series of nucleotides abbreviated as 'A', 'C', 'G', and 'T'.\n\tFor example, \"ACGAATTCCG\" is a DNA sequence.\nWhen studying DNA, it is useful to identify repeated sequences within the DNA.\nGiven a string s that represents a DNA sequence, return all the 10-letter-long sequences (substrings) that occur more than once in a DNA molecule. You may return the answer in any order.", "tags": ["Bit Manipulation", "Hash Table", "String", "Sliding Window", "Hash Function", "Rolling Hash"], "input": {"s": "GGCCCCCTATAACGTTATCACTTCAATGCCTCGCGAGACCTACAAAAAGCTAGTACTTAGTTCACCTCACTCTGGCGGATTGTTCTGTGCCGGGAATGGCCCATATCGTTACTATAAAACAGCGTAGATAAGTCAATTACATCGACCTCCGGGTTTCTTACACATCCTAAATCATCCCAATATGATAACTTTCGGACTAAAACTGCCAGTATCCCGTTTTCCATACGAGTACCAGGGACCCCTAGAGATTTCATTGCCATCCTACGCCCGGCTGGATGATAACTTT"}, "output": ["ATGATAACTT", "TGATAACTTT"], "input_len": 144, "line": 1395}
{"problem": "You are given an integer array prices where prices[i] is the price of a given stock on the ith day, and an integer k.\nFind the maximum profit you can achieve. You may complete at most k transactions: i.e. you may buy at most k times and sell at most k times.\nNote: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).", "tags": ["Array", "DP"], "input": {"k": 3, "prices": [261, 935, 836, 11, 222, 823, 390, 883, 957, 87, 960, 403, 84, 706, 539, 285, 525, 603, 492, 14, 225, 580, 455, 474, 78, 442, 353, 427, 83, 600, 644, 406, 991, 397, 323, 12, 679, 681, 114, 669, 307, 309, 484, 139, 386, 732, 94, 510, 825, 769, 556, 699, 620, 576, 465, 425, 126, 520, 482, 495, 662, 897, 969, 420, 586, 0, 587, 249, 354, 486, 536, 153, 100, 311, 685, 112, 713, 301, 758, 708, 907, 846, 439, 422, 234, 515, 576, 306, 570, 545, 157, 981, 762, 260, 884, 455, 316, 331, 120, 485, 78, 824, 906, 392, 54, 745, 244, 701, 322, 398, 511, 185, 801, 478, 575, 814, 474, 337, 695, 203, 501, 25, 800, 107, 673, 30, 58, 11, 102, 601, 944, 199, 67, 964, 544, 498, 120, 758, 183, 986, 731, 499, 231, 484, 528, 457, 188, 86, 549, 752, 368, 931, 945, 980, 238, 231, 826, 789, 58, 171, 399, 955, 778, 635, 603, 925, 790, 685, 413, 901, 503, 652, 711, 67, 315, 556, 685, 647, 886, 495, 587, 27, 348, 316, 109, 408, 510, 900, 601, 31, 819, 906, 926, 801, 370, 322, 565, 474, 412, 77, 310, 930, 311, 234, 4, 410, 73, 395, 397, 784, 737, 398, 366]}, "output": 2936, "input_len": 1049, "line": 8037}
{"problem": "Given an array of distinct integers nums and a target integer target, return the number of possible combinations that add up to\u00a0target.\nThe test cases are generated so that the answer can fit in a 32-bit integer.", "tags": ["Array", "DP"], "input": {"nums": [472, 646, 228, 694, 4, 729, 597, 167, 541, 850, 892, 290, 905, 451, 555, 317, 67, 264, 199, 198, 406, 523, 212, 923, 197, 457, 527], "target": 24}, "output": 1, "input_len": 143, "line": 1370}
{"problem": "Given an array of distinct integers nums and a target integer target, return the number of possible combinations that add up to\u00a0target.\nThe test cases are generated so that the answer can fit in a 32-bit integer.", "tags": ["Array", "DP"], "input": {"nums": [551, 140, 967, 43, 223, 987, 883, 80], "target": 420}, "output": 1, "input_len": 50, "line": 8763}
